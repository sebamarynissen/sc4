// # generate-exemplar-props-code.js
import fs from 'node:fs';
import yaml from 'yaml';

const props = yaml.parse(fs.readFileSync(
	new URL('../src/core/data/new-properties.yaml', import.meta.url),
).toString());

let code = `// This file is automatically generated from new-properties.yaml. Don't touch 
// manually!
const Bool = Boolean;
const Uint32 = Uint32Array;
const Uint8 = Uint8Array;
const Sint32 = Int32Array;
const Sint64 = BigInt64Array;
const Float32 = Float32Array;

const kToPrimitive = Symbol.toPrimitive;
export const kType = Symbol('type');
export default {
`;
for (let key of Object.keys(props)) {
	let obj = props[key];
	if (key.match(/^\d/)) key = `'${key}'`;
	let value = hex(obj.id);
	if (obj.options || obj.type !== 'Uint32') {
		let id = value;
		value = `{\n`;
		value += `\t\t[kToPrimitive]: () => ${id},\n`;
		value += `\t\t[kType]: ${obj.type},\n`;
		for (let [key, option] of Object.entries(obj.options || [])) {
			value += `\t\t${key}: ${hex(option)},\n`;
		}
		value += '\t}';
	}
	code += `\t${key}: ${value},\n`;
}
code += `} as const;
`;

function hex(nr) {
	return '0x'+nr.toString(16).padStart(8, '0');
}

fs.writeFileSync(
	new URL('../src/core/data/exemplar-properties.ts', import.meta.url),
	code,
);
