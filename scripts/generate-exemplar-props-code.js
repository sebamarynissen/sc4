// # generate-exemplar-props-code.js
import fs from 'node:fs';
import yaml from 'yaml';

const props = yaml.parse(fs.readFileSync(
	new URL('../src/core/data/new-properties.yaml', import.meta.url),
).toString());

let code = `// This file is automatically generated from new-properties.yaml. Don't touch 
// manually!
import { inspect } from 'sc4/utils';
import type { uint8, uint32, sint32, sint64, float } from 'sc4/types';
const Uint32 = Uint32Array;
const Uint8 = Uint8Array;
const Sint32 = Int32Array;
const Sint64 = BigInt64Array;
const Float = Float32Array;

function inspector(this: any) {
	let keys = Object.keys(this);
	if (keys.length === 0) {
		return inspect.hex(this[kPropertyId]);
	} else {
		return Object.fromEntries(
			Object.entries(this).map(
				([key, value]) => [key, inspect.hex(value as number, 2)]
			),
		);
	}
};

const kInspect = Symbol.for('nodejs.util.inspect.custom');
const kToPrimitive = Symbol.toPrimitive;
export const kPropertyId = Symbol.for('sc4.ExemplarPropertyId');
export const kPropertyType = Symbol.for('sc4.ExemplarPropertyType');

export const ExemplarProperty = {
`;
for (let prop of props) {
	let { name } = prop;
	if (name.match(/^\d/)) name = `'${name}'`;
	let value = hex(prop.id);
	if (prop.options || prop.type !== 'Uint32' || Math.abs(prop.count) > 1) {
		let { type, count } = prop;
		if (Math.abs(count) > 1) {
			type = `[${type}]`;
		}
		let id = value;
		value = `{\n`;
		value += `\t\t[kToPrimitive]: () => ${id},\n`;
		value += `\t\t[kPropertyId]: ${id},\n`;
		value += `\t\t[kPropertyType]: ${type},\n`;
		value += `\t\t[kInspect]: inspector,\n`;
		for (let [key, option] of Object.entries(prop.options || [])) {
			value += `\t\t${key}: ${hex(option)},\n`;
		}
		value += '\t}';
	}
	if (prop.description) {
		code += `\t/**\n`;
		code += `${wrap(prop.description)}\n`;
		code += `\t */\n`;
	}
	code += `\t${name}: ${value},\n`;
}
code += `} as const;
export default ExemplarProperty;

// IMPORTANT! We want to generate as much static type information as possible 
// because TypeScript is noticeably slower due to the massive amount of types it 
// has to recalculate all the time. That's why we dump as much information as 
// possible about the types!
`;

// Group all exemplar ids by type identifier.
let grouped = Object.groupBy(props, prop => {
	let { type, count } = prop;
	if (+count > 1) {
		return `${type.toLowerCase()}[]`;
	} else {
		return type.toLowerCase();
	}
});
let sorted = {};
for (let [type, group] of Object.entries(grouped)) {
	sorted[type] = group.map(prop => [prop.name, prop.id]).flat();
}
for (let array of Object.values(sorted)) {
	array.sort((a, b) => {
		let ta = typeof a;
		let tb = typeof b;
		if (ta !== tb) {
			return ta === 'number' ? -1 : 1;
		} else {
			return ta < tb ? -1 : 1;
		}
	});
}
code += `export type ExemplarPropertyIdLikeToValueType<T, R = unknown> =\n`;
for (let [type, literals] of Object.entries(sorted)) {
	let union = literals.map(value => {
		if (typeof value === 'number') {
			return '0x'+value.toString(16).padStart(8, '0');
		} else {
			return `'${value}'`;
		}
	}).map(x => `\t\t| ${x}`).join('\n');
	code += `\tT extends\n`;
	code += `${union}\n`;
	code += `\t\t? ${type} :\n`;
}
code += `\tR;\n`;

function hex(nr) {
	return '0x'+nr.toString(16).padStart(8, '0');
}

fs.writeFileSync(
	new URL('../src/core/exemplar-properties.ts', import.meta.url),
	code,
);

function wrap(description, prefix = '\t') {
	let lines = [''];
	let split = description.split(' ');
	while (split.length > 0) {
		let word = split.shift();
		if (lines.at(-1).length + word.length > 80-7) {
			lines.push(word);
		} else {
			lines[lines.length-1] += ` ${word}`;
		}
	}
	return lines.map(x => `${prefix} * ${x.trim()}`).join('\n');
}
