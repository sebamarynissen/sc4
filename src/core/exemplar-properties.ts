// This file is automatically generated from new-properties.yaml. Don't touch 
// manually!
import { inspect } from 'sc4/utils';
import type { uint8, uint32, sint32, sint64, float } from 'sc4/types';
const Uint32 = Uint32Array;
const Uint8 = Uint8Array;
const Sint32 = Int32Array;
const Sint64 = BigInt64Array;
const Float = Float32Array;

function inspector(this: any) {
	let keys = Object.keys(this);
	if (keys.length === 0) {
		return inspect.hex(this[kPropertyId]);
	} else {
		return Object.fromEntries(
			Object.entries(this).map(
				([key, value]) => [key, inspect.hex(value as number, 2)]
			),
		);
	}
};

const kInspect = Symbol.for('nodejs.util.inspect.custom');
const kToPrimitive = Symbol.toPrimitive;
export const kPropertyId = Symbol.for('sc4.ExemplarPropertyId');
export const kPropertyType = Symbol.for('sc4.ExemplarPropertyType');

export const ExemplarProperty = {
	/**
	 * Used by property editors to group exemplars and filter properties
	 */
	ExemplarType: {
		[kToPrimitive]: () => 0x00000010,
		[kPropertyId]: 0x00000010,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		OtherUnknown: 0x00000000,
		Tuning: 0x00000001,
		Buildings: 0x00000002,
		RCI: 0x00000003,
		Developer: 0x00000004,
		Simulator: 0x00000005,
		Road: 0x00000006,
		Bridge: 0x00000007,
		MiscNetwork: 0x00000008,
		NetworkIntersection: 0x00000009,
		Rail: 0x0000000a,
		Highway: 0x0000000b,
		PowerLine: 0x0000000c,
		Terrain: 0x0000000d,
		Ordinances: 0x0000000e,
		Flora: 0x0000000f,
		LotConfigurations: 0x00000010,
		Foundations: 0x00000011,
		Advice: 0x00000012,
		Lighting: 0x00000013,
		Cursor: 0x00000014,
		LotRetainingWalls: 0x00000015,
		Vehicles: 0x00000016,
		Pedestrians: 0x00000017,
		Aircraft: 0x00000018,
		Watercraft: 0x00000019,
		Prop: 0x0000001e,
		Construction: 0x0000001f,
		AutomataTuning: 0x00000020,
		Type21: 0x00000021,
		Disaster: 0x00000022,
		DataView: 0x00000023,
		Crime: 0x00000024,
		Audio: 0x00000025,
		MySimTemplate: 0x00000026,
		TerrainBrush: 0x00000027,
		MiscCatalog: 0x00000028,
	},
	/**
	 * A GZGUID that identifies a class interface
	 */
	ExemplarInterfaceID: 0x00000011,
	/**
	 * A GZCLSID that identifies a class implementation
	 */
	ExemplarClassID: 0x00000012,
	/**
	 * If true, LotEditor identifies the lot as a custom lot.
	 */
	CustomLot: 0xcbe243f7,
	/**
	 * Identifies this exemplar in property editors.
	 */
	ExemplarName: {
		[kToPrimitive]: () => 0x00000020,
		[kPropertyId]: 0x00000020,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Identifies this exemplar so that C++ code and other exemplars can refer
	 * to it
	 */
	ExemplarID: 0x00000021,
	/**
	 * Specifies a group id registered with the resource manager
	 */
	ResManRegisteredGroups: {
		[kToPrimitive]: () => 0x07af514b,
		[kPropertyId]: 0x07af514b,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		AutoTracks: 0x67cd5fa1,
	},
	/**
	 * Range: [0.0 - 90.0]
	 */
	MaxNetworkSlopeChange: {
		[kToPrimitive]: () => 0x07b36c71,
		[kPropertyId]: 0x07b36c71,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * kSC4FloraParametersProperty
	 */
	kSC4FloraParametersProperty: {
		[kToPrimitive]: () => 0x083dc35b,
		[kPropertyId]: 0x083dc35b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * kSC4FloraPreferencesProperty
	 */
	kSC4FloraPreferencesProperty: {
		[kToPrimitive]: () => 0x083dc487,
		[kPropertyId]: 0x083dc487,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * kSC4FloraCursorProperty
	 */
	kSC4FloraCursorProperty: 0x083de16f,
	/**
	 * mnRandomSeedingCellsPerMonth
	 */
	MnRandomSeedingCellsPerMonth: 0x085489c7,
	/**
	 * ID of FSH texture to use for flora's shadow
	 */
	ShadowTextureID: 0x085489c8,
	/**
	 * Offset of shadow from object center
	 */
	ShadowOffset: {
		[kToPrimitive]: () => 0x085489c9,
		[kPropertyId]: 0x085489c9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Size of shadow
	 */
	ShadowSize: {
		[kToPrimitive]: () => 0x085489ca,
		[kPropertyId]: 0x085489ca,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Color of shadow
	 */
	ShadowColor: {
		[kToPrimitive]: () => 0x085489cb,
		[kPropertyId]: 0x085489cb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Strength of flora shadows
	 */
	ShadowStrength: {
		[kToPrimitive]: () => 0x085489cc,
		[kPropertyId]: 0x085489cc,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Mask threshold of flora shadows
	 */
	ShadowThreshold: {
		[kToPrimitive]: () => 0x085489cd,
		[kPropertyId]: 0x085489cd,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Sun direction in degrees, clockwise from Z axis
	 */
	SunDirection: {
		[kToPrimitive]: () => 0x085489ce,
		[kPropertyId]: 0x085489ce,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Sun pitch in degrees, up from XZ plane
	 */
	SunPitch: {
		[kToPrimitive]: () => 0x085489cf,
		[kPropertyId]: 0x085489cf,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Strength of hill shadows
	 */
	HillShadowStrength: {
		[kToPrimitive]: () => 0x085489d0,
		[kPropertyId]: 0x085489d0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Can be used to bend shadows downwards (below 1) or upwards (above 1)
	 */
	HillShadowWarp: {
		[kToPrimitive]: () => 0x085489d1,
		[kPropertyId]: 0x085489d1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Depth below the hill shadow at which object shadows fade to nothingness
	 */
	HillShadowFadeDistance: {
		[kToPrimitive]: () => 0x085489d2,
		[kPropertyId]: 0x085489d2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of station at its center (in protection units: 0-255).
	 */
	FireStationCenterStrength: {
		[kToPrimitive]: () => 0x08f55dc0,
		[kPropertyId]: 0x08f55dc0,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of station at its limit (in protection units: 0-255).
	 */
	FireStationExteriorStrength: {
		[kToPrimitive]: () => 0x08f55dc1,
		[kPropertyId]: 0x08f55dc1,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Effect radius of station (in meters).
	 */
	FireStationRadius: {
		[kToPrimitive]: () => 0x08f55dc2,
		[kPropertyId]: 0x08f55dc2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of trucks that can be dispatched from this station.
	 */
	FireStationTotalDispatches: {
		[kToPrimitive]: () => 0x08f55dc5,
		[kPropertyId]: 0x08f55dc5,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on air pollution
	 */
	AirEffect: {
		[kToPrimitive]: () => 0x08f79b8e,
		[kPropertyId]: 0x08f79b8e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The minimum before you are bankrupt. Usually something like -100,000
	 */
	BudgetMinAllowableFunds: {
		[kToPrimitive]: () => 0x090e0a9f,
		[kPropertyId]: 0x090e0a9f,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * The maximum number of outstanding bonds that is allowed
	 */
	BudgetMaxBonds: {
		[kToPrimitive]: () => 0x090e0aac,
		[kPropertyId]: 0x090e0aac,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Factor by which this ordinance reduces power consumption
	 */
	PowerReductionEffect: {
		[kToPrimitive]: () => 0x0911e117,
		[kPropertyId]: 0x0911e117,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % chance
	 * of a utility strike
	 */
	UtilityStrikeResponseCurve: {
		[kToPrimitive]: () => 0x0911e2e6,
		[kPropertyId]: 0x0911e2e6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Converts the current radation of the plant to a multiplier for
	 * maintenance cost
	 */
	AgeToMaintenanceCostMultiplierResponseCurve: {
		[kToPrimitive]: () => 0x0911e2e7,
		[kPropertyId]: 0x0911e2e7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiples the rate of aging based on funding level
	 */
	FundingPercentageToDecayRateMultiplierResponseCurve: {
		[kToPrimitive]: () => 0x0911e2e8,
		[kPropertyId]: 0x0911e2e8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiples the rate of aging based on usage level
	 */
	UsagePercentageToDecayRateMultiplierResponseCurve: {
		[kToPrimitive]: () => 0x0911e2e9,
		[kPropertyId]: 0x0911e2e9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Efficiency of utility buildings will drop to this % during a strike
	 */
	UtilityStrikeEfficiency: {
		[kToPrimitive]: () => 0x09122027,
		[kPropertyId]: 0x09122027,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost of maintaining this power pole
	 */
	PowerPoleMonthlyUpkeep: {
		[kToPrimitive]: () => 0x09132de8,
		[kPropertyId]: 0x09132de8,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Maximum water pollution value reported to the UI, must be less than 32767
	 */
	MaxWaterPollutionValueForUI: 0x09134be2,
	/**
	 * When a cell has this much garbage, it's considered polluted
	 */
	GarbagePollutionThreshold: 0x0913519b,
	/**
	 * When a cell has this much water pollution, it's considered polluted
	 */
	WaterPollutionThreshold: 0x091351ae,
	/**
	 * Number of garbage units that decompose (i.e., disappear) each month
	 */
	GarbageDecompostionAmount: 0x09135479,
	/**
	 * Scaling factor to convert simulator garbage units to whatever units the
	 * UI displays (tons, Kgs)
	 */
	GarbageUIScalingFactor: {
		[kToPrimitive]: () => 0x09135482,
		[kPropertyId]: 0x09135482,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Radius of this hospital's coverage, in meters.  Current settings are 384
	 * for clinic; 800 for hospital; 5800 for disease lab.
	 */
	HospitalCoverageRadius: {
		[kToPrimitive]: () => 0x091b42a2,
		[kPropertyId]: 0x091b42a2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Amount by which HQ decays each month
	 */
	HQDecay: {
		[kToPrimitive]: () => 0x0929c439,
		[kPropertyId]: 0x0929c439,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Average age assigned to new Medium Wealth residents
	 */
	MediumWealthAverageAge: {
		[kToPrimitive]: () => 0x0929cc30,
		[kPropertyId]: 0x0929cc30,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Average age assigned to new High Wealth residents
	 */
	HighWealthAverageAge: {
		[kToPrimitive]: () => 0x0929cc36,
		[kPropertyId]: 0x0929cc36,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * EQ assigned to new Medium Wealth residents
	 */
	MediumWealthEQ: {
		[kToPrimitive]: () => 0x0929cc65,
		[kPropertyId]: 0x0929cc65,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects the capacity
	 * of hospitals
	 */
	HealthCapacityEffect: {
		[kToPrimitive]: () => 0x092d909b,
		[kPropertyId]: 0x092d909b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Default height above trench floor to place intersectons
	 */
	UndergroundIntersectionHeight: {
		[kToPrimitive]: () => 0x096e5653,
		[kPropertyId]: 0x096e5653,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * RGBA color for unwatered terrain cells in pipe view
	 */
	UnwateredTerrainColor: {
		[kToPrimitive]: () => 0x097f4c4e,
		[kPropertyId]: 0x097f4c4e,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * The maximum number of cells allowed between power poles
	 */
	MaxCellsBetweenPowerPoles: 0x098b25c8,
	/**
	 * The minimum distance allowed between a power line and the terrain
	 */
	MinimumPowerLineHeight: {
		[kToPrimitive]: () => 0x098b27d0,
		[kPropertyId]: 0x098b27d0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Bulldoze cost to delete the building, in Simoleans(tm)
	 */
	BulldozeCost: {
		[kToPrimitive]: () => 0x099afacd,
		[kPropertyId]: 0x099afacd,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Total lifetime of fog particle (ms)
	 */
	ParticleLife: {
		[kToPrimitive]: () => 0x09b00b2b,
		[kPropertyId]: 0x09b00b2b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Wind power coefficient (v = wind * c)
	 */
	WindFactor: {
		[kToPrimitive]: () => 0x09b00b2c,
		[kPropertyId]: 0x09b00b2c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terrain gradient coefficient (effect of hills)
	 */
	TerrainFactor: {
		[kToPrimitive]: () => 0x09b00b2d,
		[kPropertyId]: 0x09b00b2d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max fog creation rate (particles/sec)
	 */
	MaxParticleRate: {
		[kToPrimitive]: () => 0x09b00b2e,
		[kPropertyId]: 0x09b00b2e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Angular window centered around anti-wind direction in which fog appears
	 * (degrees)
	 */
	ParticleFOV: {
		[kToPrimitive]: () => 0x09b00b2f,
		[kPropertyId]: 0x09b00b2f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Floating distance of fog above terrain
	 */
	FloatAltitude: {
		[kToPrimitive]: () => 0x09b00b30,
		[kPropertyId]: 0x09b00b30,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum alpha value for particles (0-255)
	 */
	MaxOpacity: {
		[kToPrimitive]: () => 0x09b00b31,
		[kPropertyId]: 0x09b00b31,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Initial portion of particle life for fade-in (ms)
	 */
	FadeinTime: {
		[kToPrimitive]: () => 0x09b00b32,
		[kPropertyId]: 0x09b00b32,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terminal portion of particle life for fade-out (ms)
	 */
	FadeoutTime: {
		[kToPrimitive]: () => 0x09b00b33,
		[kPropertyId]: 0x09b00b33,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of fog particles
	 */
	ParticleCount: 0x09b00b34,
	/**
	 * Fraction (0-1) of maximum particle rate by hour of the clock
	 */
	FogRateByHour: {
		[kToPrimitive]: () => 0x09b00b35,
		[kPropertyId]: 0x09b00b35,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Global lighting value for night time -- everything gets multiplied by
	 * this.
	 */
	NighttimeGlobalColor: {
		[kToPrimitive]: () => 0x09b6d6ae,
		[kPropertyId]: 0x09b6d6ae,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifies the time (0-23) that night time graphically begins.
	 */
	K24HourClockNightBeginProperty: 0x09b73421,
	/**
	 * Specifies the time (0-23) that night time graphically ends.
	 */
	K24HourClockNightEndProperty: 0x09b73422,
	/**
	 * Higher this value, the more weightage this texture gets while blending
	 * with others
	 */
	TextureBlendStrength: {
		[kToPrimitive]: () => 0x09c2aef0,
		[kPropertyId]: 0x09c2aef0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Specifiess how does the texture strength fall off with distance
	 */
	Z0_TextureSpreadCurve: {
		[kToPrimitive]: () => 0x09c2aef3,
		[kPropertyId]: 0x09c2aef3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifiess how does the texture strength fall off with distance
	 */
	Z1_TextureSpreadCurve: {
		[kToPrimitive]: () => 0x09c2aef4,
		[kPropertyId]: 0x09c2aef4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifiess how does the texture strength fall off with distance
	 */
	Z2_TextureSpreadCurve: {
		[kToPrimitive]: () => 0x09c2aef5,
		[kPropertyId]: 0x09c2aef5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifiess how does the texture strength fall off with distance
	 */
	Z3_TextureSpreadCurve: {
		[kToPrimitive]: () => 0x09c2aef6,
		[kPropertyId]: 0x09c2aef6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifiess how does the texture strength fall off with distance
	 */
	Z4_TextureSpreadCurve: {
		[kToPrimitive]: () => 0x09c2aef7,
		[kPropertyId]: 0x09c2aef7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Model type, group, and instance ID
	 */
	ModelResourceKey: {
		[kToPrimitive]: () => 0x09c80416,
		[kPropertyId]: 0x09c80416,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Type/Group/Instance ID for headlight/taillight model
	 */
	AuxiliaryModel1KeyHeadlights: {
		[kToPrimitive]: () => 0x09c80417,
		[kPropertyId]: 0x09c80417,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * If set to true, specifies that the prop should ignore lot state effects
	 * (distressed, abandoned, etc.).
	 */
	IgnoreLotStateEffects: {
		[kToPrimitive]: () => 0x09f00e59,
		[kPropertyId]: 0x09f00e59,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Water Pollution Average Level to Water Pollution Decal Alpha curve
	 */
	WaterPollutionEffectStrengthCurve: {
		[kToPrimitive]: () => 0x0a10c772,
		[kPropertyId]: 0x0a10c772,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Air Pollution Average Level to Air Pollution Particle Emission Rage curve
	 */
	AirPollutionEffectStrengthCurve: {
		[kToPrimitive]: () => 0x0a10c773,
		[kPropertyId]: 0x0a10c773,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Radiation Pollution Average Level to Radiation Effect Strength curve
	 */
	RadiationPollutionEffectStrengthCurve: {
		[kToPrimitive]: () => 0x0a10c774,
		[kPropertyId]: 0x0a10c774,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Radiation Pollution Average Level to Radiation Effect Strength curve
	 */
	GarbagePollutionEffectStrengthCurve: {
		[kToPrimitive]: () => 0x0a10c775,
		[kPropertyId]: 0x0a10c775,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Bitfield describing which zoom levels score is active for
	 */
	AudioZoomScoreEnable: {
		[kToPrimitive]: () => 0x0a25896b,
		[kPropertyId]: 0x0a25896b,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Cost to demolish a power pole. Lines are ignored
	 */
	PowerPoleDemolitionCost: {
		[kToPrimitive]: () => 0x0a2eced8,
		[kPropertyId]: 0x0a2eced8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound played when alarm goes off
	 */
	SFXAlarmSoundId: 0x0a36afa2,
	/**
	 * Radii for attention per zoom
	 */
	AudioAmbienceAttentionSpanRadii: {
		[kToPrimitive]: () => 0x0a36f410,
		[kPropertyId]: 0x0a36f410,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of months to payback a bond
	 */
	BudgetBondPaybackMonths: 0x0a3fb9a8,
	/**
	 * Filter GUIDs any of which must be satisfied
	 */
	AudioORFilters: 0x0a410ba0,
	/**
	 * Size of glob for grouping single layer, or occupant
	 */
	AudioOccupantGroupRadius: {
		[kToPrimitive]: () => 0x0a4168e1,
		[kPropertyId]: 0x0a4168e1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps supply-over-demand to profit factor
	 */
	NDe_ProfitResponseCurve: {
		[kToPrimitive]: () => 0x0a469353,
		[kPropertyId]: 0x0a469353,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Time In Seconds until lava flowing and solidification continues
	 */
	VolcanoLavaTotalLavaTimeInSecs: {
		[kToPrimitive]: () => 0x0a4bc742,
		[kPropertyId]: 0x0a4bc742,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Orifice Size of Lava Flow in Metres
	 */
	VolcanoLavaOrificeRadius: 0x0a4bc752,
	/**
	 * GUID of sound played when building is around and damaged or decayed.
	 */
	SFXAmbienceDecayedSound: {
		[kToPrimitive]: () => 0x0a4c13cb,
		[kPropertyId]: 0x0a4c13cb,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		CoalPowerPlant: 0x4a4c43e5,
		HydrogenPowerPlant: 0x8a890d15,
		NaturalGasPowerPlant: 0x6a890d99,
		NuclearPowerPlant: 0x4a4c444b,
		OilPowerPlant: 0xaa4c4370,
		SolarPowerPlant: 0x8a4c4443,
		WindPowerPlant: 0x6a4c4478,
		WasteToEnergyPlant: 0xea4c448d,
		WaterPump: 0x2a55aaca,
		WaterPurificationPlant: 0x2a55b192,
	},
	/**
	 * Maps city population to a multiplier (0.0-1.0) for freight train density
	 */
	FreightTrainDensityCurve: {
		[kToPrimitive]: () => 0x0a51188a,
		[kPropertyId]: 0x0a51188a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to %
	 * coverage
	 */
	HealthFundingToCoverageCurve: {
		[kToPrimitive]: () => 0x0a53b2f9,
		[kPropertyId]: 0x0a53b2f9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How many trips are satisfied by each train car.  Determines train length.
	 */
	SimsPerTrainCar: 0x0a53fd32,
	/**
	 * Size of glob for grouping cells
	 */
	AudioCellGroupRadius: {
		[kToPrimitive]: () => 0x0a56212a,
		[kPropertyId]: 0x0a56212a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost of placing each cell of wire
	 */
	PowerLinePlacementCost: {
		[kToPrimitive]: () => 0x0a5f596b,
		[kPropertyId]: 0x0a5f596b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How often this prop becomes active, in days.
	 */
	SimulatorDateInterval: 0x0a751675,
	/**
	 * GUID of the sound to play when the occupant is clicked on with query tool
	 * and is abandoned.
	 */
	SFXQuerySoundAbandoned: 0x0a902434,
	/**
	 * GUID of the sound to play when an occupant is demolished
	 */
	SFXDemolitionSound: 0x0a93036f,
	/**
	 * Max playing one-shots
	 */
	AudioMaxPlayingOneShots: 0x0a946a57,
	/**
	 * Max amount of full volume to change down per second
	 */
	AudioVolumeDecayLimit: {
		[kToPrimitive]: () => 0x0a9599bf,
		[kPropertyId]: 0x0a9599bf,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Flag specifying the zooms in which the model should appear.
	 */
	AppearanceZoomsFlag: {
		[kToPrimitive]: () => 0x0abfc024,
		[kPropertyId]: 0x0abfc024,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		None: 0x00000000,
		Zoom1: 0x00000001,
		Zoom2: 0x00000002,
		Zoom12: 0x00000003,
		Zoom3: 0x00000004,
		Zoom13: 0x00000005,
		Zoom23: 0x00000006,
		Zoom123: 0x00000007,
		Zoom4: 0x00000008,
		Zoom14: 0x00000009,
		Zoom24: 0x0000000a,
		Zoom124: 0x0000000b,
		Zoom34: 0x0000000c,
		Zoom134: 0x0000000d,
		Zoom234: 0x0000000e,
		Zoom1234: 0x0000000f,
		Zoom5: 0x00000010,
		Zoom15: 0x00000011,
		Zoom25: 0x00000012,
		Zoom125: 0x00000013,
		Zoom35: 0x00000014,
		Zoom135: 0x00000015,
		Zoom235: 0x00000016,
		Zoom1235: 0x00000017,
		Zoom45: 0x00000018,
		Zoom145: 0x00000019,
		Zoom245: 0x0000001a,
		Zoom1245: 0x0000001b,
		Zoom345: 0x0000001c,
		Zoom1345: 0x0000001d,
		Zoom2345: 0x0000001e,
		Zoom12345: 0x0000001f,
	},
	/**
	 * uSecs of active time for background thread
	 */
	MicroSecsPerTimeSlice: 0x0b579c21,
	/**
	 * uSecs of sleep time for background thread
	 */
	SleepMicroSecsAfterTimeSlice: 0x0b579c22,
	/**
	 * uSec budget for processing cells in main thread
	 */
	ProcessCellsMaxTimeSliceMicroSecs: 0x0b579c23,
	MOperationQuantaForOccupiedCell: {
		[kToPrimitive]: () => 0x0b579c24,
		[kPropertyId]: 0x0b579c24,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	MOperationQuantaForEmptyCell: {
		[kToPrimitive]: () => 0x0b579c25,
		[kPropertyId]: 0x0b579c25,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	MOperationQuantaBeforeTimerCall: {
		[kToPrimitive]: () => 0x0b579c26,
		[kPropertyId]: 0x0b579c26,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * if true, background loader is disabled
	 */
	DisableBackgroundLoader: {
		[kToPrimitive]: () => 0x0b579c27,
		[kPropertyId]: 0x0b579c27,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Mininum extra radius to load (by zoom level)
	 */
	MinLoadRadius: {
		[kToPrimitive]: () => 0x0b579c28,
		[kPropertyId]: 0x0b579c28,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * extra radius to load per free meg (by zoom level)
	 */
	ExtraLoadRadiusPerMeg: {
		[kToPrimitive]: () => 0x0b579c29,
		[kPropertyId]: 0x0b579c29,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Type of ferry terminal
	 */
	FerryTerminalType: {
		[kToPrimitive]: () => 0x0bd86fd3,
		[kPropertyId]: 0x0bd86fd3,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		Passenger: 0x00000000,
		CarAndPassenger: 0x00000001,
	},
	/**
	 * Maps funding (as percentage) to road/rail damage acceleration
	 */
	FundingToDamageAccelerationCurve: {
		[kToPrimitive]: () => 0x0bd86fd4,
		[kPropertyId]: 0x0bd86fd4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Probability (0 to 1.0) that a train going over a rail pothole will cause
	 * derailment
	 */
	RailDamageAccidentFactor: {
		[kToPrimitive]: () => 0x0bd86fd5,
		[kPropertyId]: 0x0bd86fd5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Indicate what kind of airplane should appear at this point
	 */
	AirplaneHangerType: {
		[kToPrimitive]: () => 0x0bfa15a5,
		[kPropertyId]: 0x0bfa15a5,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		CropDuster: 0x00000001,
		Fire: 0x00000002,
		Stunt: 0x00000003,
		Military: 0x00000004,
	},
	/**
	 * Simoleon charge per traveller to enter the switch
	 */
	TransitSwitchFare: {
		[kToPrimitive]: () => 0x0bfc0a4c,
		[kPropertyId]: 0x0bfc0a4c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Starting tax rate for all developer types, indexed by difficulty type
	 */
	BudgetInitialTaxRate: {
		[kToPrimitive]: () => 0x0c032488,
		[kPropertyId]: 0x0c032488,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of planes that can be dispatched from this station.
	 */
	FireStationTotalPlaneDispatches: {
		[kToPrimitive]: () => 0x0c0afdd7,
		[kPropertyId]: 0x0c0afdd7,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * In meters: Width Height Depth
	 */
	OccupantSize: {
		[kToPrimitive]: () => 0x27812810,
		[kPropertyId]: 0x27812810,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	FillingDegree: {
		[kToPrimitive]: () => 0x27812811,
		[kPropertyId]: 0x27812811,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Specifies 1 model key for all Z/R
	 */
	ResourceKeyType0: {
		[kToPrimitive]: () => 0x27812820,
		[kPropertyId]: 0x27812820,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Specifies 1 model key for each Z/R
	 */
	ResourceKeyType1: {
		[kToPrimitive]: () => 0x27812821,
		[kPropertyId]: 0x27812821,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * A unique instance ID for each zoom and rotation.
	 */
	ResourceKeyType2: {
		[kToPrimitive]: () => 0x27812822,
		[kPropertyId]: 0x27812822,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * A unique instance ID for each zoom
	 */
	ResourceKeyType3: {
		[kToPrimitive]: () => 0x27812823,
		[kPropertyId]: 0x27812823,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Multi-model, multi state (see tuning docs)
	 */
	ResourceKeyType4: {
		[kToPrimitive]: () => 0x27812824,
		[kPropertyId]: 0x27812824,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Specifies 1 model key for each Z/R/state
	 */
	ResourceKeyType5: {
		[kToPrimitive]: () => 0x27812825,
		[kPropertyId]: 0x27812825,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Wealth represented by the building.
	 */
	Wealth: {
		[kToPrimitive]: () => 0x27812832,
		[kPropertyId]: 0x27812832,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		LowWealth: 0x00000001,
		MediumWealth: 0x00000002,
		HighWealth: 0x00000003,
	},
	/**
	 * Function of building
	 */
	Purpose: {
		[kToPrimitive]: () => 0x27812833,
		[kPropertyId]: 0x27812833,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		Residence: 0x00000001,
		Services: 0x00000002,
		Office: 0x00000003,
		Tourism: 0x00000004,
		Agriculture: 0x00000005,
		Processing: 0x00000006,
		Manufacturing: 0x00000007,
		HighTech: 0x00000008,
		Other: 0x00000009,
	},
	/**
	 * A list of pairs. The first number is a demand ID, and the second number
	 * indicates how much plopping this building supplies the resource. Put the
	 * primary one first (i.e., for residential buildings, start with residential
	 * demand). Recommended range: [0, 100]
	 */
	CapacitySatisfied: {
		[kToPrimitive]: () => 0x27812834,
		[kPropertyId]: 0x27812834,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
		R$: 0x00001010,
		R$$: 0x00001020,
		R$$$: 0x00001030,
		CS$: 0x00003110,
		CS$$: 0x00003120,
		CS$$$: 0x00003130,
		CO$$: 0x00003320,
		CO$$$: 0x00003330,
		IR: 0x00004100,
		ID: 0x00004200,
		IM: 0x00004300,
		IHT: 0x00004400,
	},
	/**
	 * if true, different types can occupy the building simultaneously
	 */
	AllowJointOccupancy: {
		[kToPrimitive]: () => 0x27812836,
		[kPropertyId]: 0x27812836,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Similar to density, but with more granularity. The smallest (1) is the
	 * first to appear
	 */
	GrowthStage: {
		[kToPrimitive]: () => 0x27812837,
		[kPropertyId]: 0x27812837,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If true, this building is for debug and tuning use only
	 */
	MonopolyPiece: {
		[kToPrimitive]: () => 0x2781283f,
		[kPropertyId]: 0x2781283f,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Paired values, demand ID, and how much plopping this building supplies
	 * the resource.
	 */
	DemandSatisfied: {
		[kToPrimitive]: () => 0x27812840,
		[kPropertyId]: 0x27812840,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
		R$CAP: 0x00001810,
		R$$CAP: 0x00001820,
		R$$$CAP: 0x00001830,
		CO$$CAP: 0x00003b20,
		CO$$$CAP: 0x00003b30,
		IRCAP: 0x00004900,
		IDCAP: 0x00004a00,
		IMCAP: 0x00004b00,
		IHCAP: 0x00004c00,
	},
	/**
	 * A list of pairs. The first number is a demand ID, and the second number
	 * indicates how much plopping this building increases the demand for the
	 * resource. Recommended increase range: [0, 100]
	 */
	DemandCreated: {
		[kToPrimitive]: () => 0x27812841,
		[kPropertyId]: 0x27812841,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
		Jobs$: 0x00002010,
		Jobs$$: 0x00002020,
		Jobs$$$: 0x00002030,
		Amenities$: 0x00001810,
		Amenities$$: 0x00001820,
		Amenities$$$: 0x00001830,
		CS$: 0x00003110,
		CS$$: 0x00003120,
		CS$$$: 0x00003130,
		CO$$: 0x00003320,
		CO$$$: 0x00003330,
		IR: 0x00004100,
		ID: 0x00004200,
		IM: 0x00004300,
		IHT: 0x00004400,
	},
	/**
	 * IDs from Demand Satisfied are associated to these values instead of the
	 * Uint32 values
	 */
	DemandSatisfiedFloat: {
		[kToPrimitive]: () => 0x27812842,
		[kPropertyId]: 0x27812842,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * IDs from Demand Created are associated to these values instead of the
	 * Uint32 values
	 */
	DemandCreatedFloat: {
		[kToPrimitive]: () => 0x27812843,
		[kPropertyId]: 0x27812843,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * if true, the demand simulator ignores demand created and demand satisfied
	 * until instructed
	 */
	DemandIsVariable: {
		[kToPrimitive]: () => 0x27812844,
		[kPropertyId]: 0x27812844,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * This determines the landmark building's impact on desirability. Magnitude
	 * (-100 to +100), radius (in cells).
	 */
	LandmarkEffect: {
		[kToPrimitive]: () => 0x87cd6399,
		[kPropertyId]: 0x87cd6399,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Affects desirability of residential buildings.   The first number in this
	 * array is the amount of the effect (-100 to 100) and the second number is
	 * the radius in cells.
	 */
	ParkEffect: {
		[kToPrimitive]: () => 0x87cd6341,
		[kPropertyId]: 0x87cd6341,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Amount of pollution generated by the occupant, for each type (air, water,
	 * garbage, and radiation). This value represents the amount of pollution at
	 * the center of the circular area of effect. This can be negative for
	 * occupants that decrease pollution.
	 */
	PollutionAtCenter: {
		[kToPrimitive]: () => 0x27812851,
		[kPropertyId]: 0x27812851,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * Amount of power generated by this building.
	 */
	PowerGenerated: 0x27812852,
	/**
	 * Type of power plant.
	 */
	PowerPlantType: {
		[kToPrimitive]: () => 0x27812853,
		[kPropertyId]: 0x27812853,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		Coal: 0x00000001,
		Hydrogen: 0x00000002,
		NaturalGas: 0x00000003,
		Nuclear: 0x00000005,
		Oil: 0x00000006,
		Solar: 0x00000007,
		WasteToEnergy: 0x00000008,
		Wind: 0x00000009,
		Auxiliary: 0x0000000a,
	},
	/**
	 * Amount of power consumed by this building.
	 */
	PowerConsumed: 0x27812854,
	/**
	 * The family that this building or prop is a member of.
	 */
	BuildingpropFamily: 0x27812870,
	/**
	 * Specifies 1 model key for each Z/R
	 */
	ResourceKeyType1xm: {
		[kToPrimitive]: () => 0x27812921,
		[kPropertyId]: 0x27812921,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * A unique instance ID for each zoom and rotation.
	 */
	ResourceKeyType2xm: {
		[kToPrimitive]: () => 0x27812922,
		[kPropertyId]: 0x27812922,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * A unique instance ID for each zoom
	 */
	ResourceKeyType3xm: {
		[kToPrimitive]: () => 0x27812923,
		[kPropertyId]: 0x27812923,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Multi-model, multi state (see tuning docs)
	 */
	ResourceKeyType4xm: {
		[kToPrimitive]: () => 0x27812924,
		[kPropertyId]: 0x27812924,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Specifies 1 model key for each Z/R/state
	 */
	ResourceKeyType5xm: {
		[kToPrimitive]: () => 0x27812925,
		[kPropertyId]: 0x27812925,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Range: [0.0 - 90.0]
	 */
	MaxSlopeOnNetworkSide: {
		[kToPrimitive]: () => 0x279d1707,
		[kPropertyId]: 0x279d1707,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * ID of this ordinance
	 */
	ID: 0x28ebbc30,
	/**
	 * Ordinance name
	 */
	NameStringNonlocalizable: {
		[kToPrimitive]: () => 0x28ebbc32,
		[kPropertyId]: 0x28ebbc32,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Ordinance description string
	 */
	DescriptionStringNonlocalizable: {
		[kToPrimitive]: () => 0x28ebbc34,
		[kPropertyId]: 0x28ebbc34,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Year this ordinance becomes available
	 */
	YearAvailable: 0x28ebbc35,
	/**
	 * Monthly chance of this ordinance bemoming available
	 */
	MonthlyChance: {
		[kToPrimitive]: () => 0x28ebbc36,
		[kPropertyId]: 0x28ebbc36,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Revenue generated by enacting this ordinance
	 */
	EnactmentIncome: {
		[kToPrimitive]: () => 0x28ebbc37,
		[kPropertyId]: 0x28ebbc37,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Cost of retracting this ordinance
	 */
	RetractmentIncome: {
		[kToPrimitive]: () => 0x28ebbc38,
		[kPropertyId]: 0x28ebbc38,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Constant part of monthly income generated by this ordinance
	 */
	MonthlyConstantIncome: {
		[kToPrimitive]: () => 0x28ebbc39,
		[kPropertyId]: 0x28ebbc39,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Factor applied to ordinance cost basis
	 */
	MonthlyIncomeFactor: {
		[kToPrimitive]: () => 0x28ebbc3a,
		[kPropertyId]: 0x28ebbc3a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Advisor ID for this ordinance
	 */
	AdvisorID: 0x28ebbc3b,
	/**
	 * True for ordinances that should appear on income part of budget
	 */
	IncomeOrdinance: {
		[kToPrimitive]: () => 0x28ebbc3c,
		[kPropertyId]: 0x28ebbc3c,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Crime effect: magnitude, radius. Doesn't increase overall crime, but can
	 * negate effects of police stations
	 */
	CrimeEffect: {
		[kToPrimitive]: () => 0xca5b9306,
		[kPropertyId]: 0xca5b9306,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on flammability
	 */
	FlammabilityEffect: {
		[kToPrimitive]: () => 0x28f42aa0,
		[kPropertyId]: 0x28f42aa0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum acceptable percentage for Utility department funding
	 */
	PowerMinAcceptableFunding: {
		[kToPrimitive]: () => 0x29121e8b,
		[kPropertyId]: 0x29121e8b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum duration of a Utility strike, in months
	 */
	UtilityStrikeDuration: 0x2912202e,
	/**
	 * When a cell has this much radiation, it's considered polluted
	 */
	RadiationPollutionThreshold: 0x291351b5,
	/**
	 * Traffic density multiplied by this each month
	 */
	MonthlyTrafficDensityReduction: {
		[kToPrimitive]: () => 0x29136788,
		[kPropertyId]: 0x29136788,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % of
	 * Health output
	 */
	HealthFundingToEfficiencyCurve: {
		[kToPrimitive]: () => 0x2918949e,
		[kPropertyId]: 0x2918949e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Brightness floor for terrain textures
	 */
	TextureFloor: {
		[kToPrimitive]: () => 0x29189beb,
		[kPropertyId]: 0x29189beb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Whether to use art-supplied environment map for lighting
	 */
	UseEnvironmentMap: {
		[kToPrimitive]: () => 0x29189bec,
		[kPropertyId]: 0x29189bec,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Use test environment map to determine orientation
	 */
	TestEnvironmentMap: {
		[kToPrimitive]: () => 0x29189bed,
		[kPropertyId]: 0x29189bed,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * How much models are shadowed by the terrain
	 */
	TerrainShadowAmount: {
		[kToPrimitive]: () => 0x29189bee,
		[kPropertyId]: 0x29189bee,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Test model shadowing by terrain
	 */
	TestTerrainShadowing: {
		[kToPrimitive]: () => 0x29189bef,
		[kPropertyId]: 0x29189bef,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Global lighting value for day time -- everything gets multiplied by this.
	 */
	DaytimeGlobalColor: {
		[kToPrimitive]: () => 0x29189bf0,
		[kPropertyId]: 0x29189bf0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much flora are shadowed by the terrain
	 */
	FloraTerrainShadowAmount: {
		[kToPrimitive]: () => 0x29189bf1,
		[kPropertyId]: 0x29189bf1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How much models (buildings) are shadowed by the terrain
	 */
	ModelTerrainShadowAmount: {
		[kToPrimitive]: () => 0x29189bf2,
		[kPropertyId]: 0x29189bf2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How much automata are shadowed by the terrain
	 */
	AutomataTerrainShadowAmount: {
		[kToPrimitive]: () => 0x29189bf3,
		[kPropertyId]: 0x29189bf3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The colour the terrain gets tinted by in the distance
	 */
	AtmosphericScatteringColour: {
		[kToPrimitive]: () => 0x29189bf4,
		[kPropertyId]: 0x29189bf4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much the terrain gets tinted
	 */
	AtmosphericScattering: {
		[kToPrimitive]: () => 0x29189bf5,
		[kPropertyId]: 0x29189bf5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The required change in brightness before the terrain gets updated
	 */
	LightingUpdateDelta: {
		[kToPrimitive]: () => 0x29189bf6,
		[kPropertyId]: 0x29189bf6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The brightness below which night falls
	 */
	NightThreshold: {
		[kToPrimitive]: () => 0x29189bf7,
		[kPropertyId]: 0x29189bf7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps distance from hospital to a % of population covered
	 */
	HospitalPopulationVsDistance: {
		[kToPrimitive]: () => 0x2921a9cc,
		[kPropertyId]: 0x2921a9cc,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * See ISC4FireProtectionSimulator.h
	 */
	FireProtectionSimFundingEfficiencyCurve: {
		[kToPrimitive]: () => 0x29233e8d,
		[kPropertyId]: 0x29233e8d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * 100.0+ Maximum percentage you can fund a fire station
	 */
	FireProtectionSimMaxAllowedFunding: {
		[kToPrimitive]: () => 0x29233e8f,
		[kPropertyId]: 0x29233e8f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * 0.0-1.0 efficiency multiplier when stations are on strike
	 */
	FireProtectionSimStrikeEfficiencyMultiplier: {
		[kToPrimitive]: () => 0x29233e94,
		[kPropertyId]: 0x29233e94,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of days a strike can last
	 */
	FireProtectionSimMaxStrikeDuration: {
		[kToPrimitive]: () => 0x29233e95,
		[kPropertyId]: 0x29233e95,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * 0.0-100.0, See ISC4FireProtectionSimulator.h
	 */
	FireProtectionSimMinFundingToEndStrikes: {
		[kToPrimitive]: () => 0x29233e96,
		[kPropertyId]: 0x29233e96,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * See ISC4FireProtectionSimulator.h"
	 */
	FireProtectionSimStrikeResponseCurve: {
		[kToPrimitive]: () => 0x29233e98,
		[kPropertyId]: 0x29233e98,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of vehicle at its center (in protection units: 0-255).
	 */
	FireStationDispatchCenterStrength: {
		[kToPrimitive]: () => 0x29233e9a,
		[kPropertyId]: 0x29233e9a,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of vehicle at its limit (in protection units: 0-255).
	 */
	FireStationDispatchExteriorStrength: {
		[kToPrimitive]: () => 0x29233e9b,
		[kPropertyId]: 0x29233e9b,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Effect radius of active vehicle (in meters).
	 */
	FireStationDispatchRadius: {
		[kToPrimitive]: () => 0x29233e9c,
		[kPropertyId]: 0x29233e9c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Base flammability (0-255) of occupant.
	 */
	Flammability: {
		[kToPrimitive]: () => 0x29244db5,
		[kPropertyId]: 0x29244db5,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * EQ assigned to new High Wealth residents
	 */
	HighWealthEQ: {
		[kToPrimitive]: () => 0x2929cc6b,
		[kPropertyId]: 0x2929cc6b,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Variable length list of type IDs for this hospital
	 */
	HospitalTypeIDList: 0x292d8f9b,
	/**
	 * Texture IDs for each zoom level.
	 */
	kSC4RetainingWallPropertyWallTextures: {
		[kToPrimitive]: () => 0x295961f2,
		[kPropertyId]: 0x295961f2,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Size of a texture in meters. Defaults to standard city cell size.
	 */
	kSC4RetainingWallPropertyWallTextureSize: {
		[kToPrimitive]: () => 0x295961f3,
		[kPropertyId]: 0x295961f3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Zone wealth values compatible with crime (none == can appear around any
	 * wealth)
	 */
	WealthFilter: {
		[kToPrimitive]: () => 0xaa12fcb3,
		[kPropertyId]: 0xaa12fcb3,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Determines whether unwatered terrain cells are colored in pipe view
	 */
	DrawUnwateredTerrainCellColor: {
		[kToPrimitive]: () => 0x297f42b7,
		[kPropertyId]: 0x297f42b7,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * At this depth (meters), water becomes opaque
	 */
	WaterDepthForMaxAlpha: {
		[kToPrimitive]: () => 0x29ab15c0,
		[kPropertyId]: 0x29ab15c0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min alpha of water
	 */
	WaterMinAlpha: {
		[kToPrimitive]: () => 0x29ab15c1,
		[kPropertyId]: 0x29ab15c1,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Number of pixels in the gradient corresponding to each meter of water
	 * depth
	 */
	WaterDepthToColorGradientFactor: {
		[kToPrimitive]: () => 0x29ab15c2,
		[kPropertyId]: 0x29ab15c2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Enable/Disable the display of water surface
	 */
	DisplayWaterSurface: {
		[kToPrimitive]: () => 0x29ab15c3,
		[kPropertyId]: 0x29ab15c3,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Enable/Disable the display of terrain surface
	 */
	DisplayTerrainSurface: {
		[kToPrimitive]: () => 0x29ab15c4,
		[kPropertyId]: 0x29ab15c4,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Modifications to the r,g,b of water at night
	 */
	WaterNightColorAdjustment: {
		[kToPrimitive]: () => 0x29ab15c5,
		[kPropertyId]: 0x29ab15c5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Heights (meters) of all but the bottom-most layers on city edge
	 */
	CityEdgeLayerHeights: {
		[kToPrimitive]: () => 0x29ab15c6,
		[kPropertyId]: 0x29ab15c6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiplication factor to tune the brightness of cliffs on city edges
	 */
	CityEdgeBrightnessKludgeFactor: {
		[kToPrimitive]: () => 0x29ab15c7,
		[kPropertyId]: 0x29ab15c7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * flammability multiplier if building if abandoned
	 */
	FlammabilityMultiplierAbandonment: {
		[kToPrimitive]: () => 0x29b40134,
		[kPropertyId]: 0x29b40134,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * flammability multiplier if building is not watered
	 */
	FlammabilityMultiplierNoWater: {
		[kToPrimitive]: () => 0x29b4013b,
		[kPropertyId]: 0x29b4013b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * hotspot settings: threshold value (0-255), radius (in tracts), minimum
	 * weight
	 */
	FlammabilityHotspotSettings: {
		[kToPrimitive]: () => 0x29b4013c,
		[kPropertyId]: 0x29b4013c,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * maps hotspot weight (# of cells above threshold) to monthly fire
	 * probability (in percent 0-100)
	 */
	FlammabilityHotspotFireProbability: {
		[kToPrimitive]: () => 0x29b4013d,
		[kPropertyId]: 0x29b4013d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * monthly fire probability (in percent 0-100) of random lot fire
	 */
	FlammabilityRandomFireProbability: {
		[kToPrimitive]: () => 0x29b4013e,
		[kPropertyId]: 0x29b4013e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * A list of IDs of 1x1 lots that describe a field tile associated with this
	 * building (will choose 1 randomly)
	 */
	FieldLots: {
		[kToPrimitive]: () => 0x29b55f73,
		[kPropertyId]: 0x29b55f73,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		FurrowsWithSprinkler: 0x2a6e4309,
		DirtWithSprinkler: 0x2a6e431d,
		OrangeTreeOrchards: 0xaa6e4328,
		AppleTreeOrchards: 0x6a6e4332,
		DirtPatch: 0xea6e4721,
		GreenPatch: 0xea6e4722,
	},
	/**
	 * Minimum (left side) and maximum (right side) range of offset from paths
	 * for pedestrians
	 */
	PathOffsetRangeForPeds: {
		[kToPrimitive]: () => 0x29dd40c1,
		[kPropertyId]: 0x29dd40c1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Minimum (left side) and maximum (right side) range of offset from paths
	 * for vehicles
	 */
	PathOffsetRangeForVehicles: {
		[kToPrimitive]: () => 0x29dd40c2,
		[kPropertyId]: 0x29dd40c2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Flora type that results when combining this type and one of equal or
	 * lesser value.
	 */
	FloraClusterType: 0x2a0348ba,
	/**
	 * Maximum plane distance for this flora to cluster with others.
	 */
	FloraClusterMaxRadius: {
		[kToPrimitive]: () => 0x2a0348bb,
		[kPropertyId]: 0x2a0348bb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum altitude differential for this flora to cluster with others.
	 */
	FloraClusterMaxHeight: {
		[kToPrimitive]: () => 0x2a0348bc,
		[kPropertyId]: 0x2a0348bc,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to plop a lot is building + area x this response curve
	 */
	LotDeveloperCostMultiplierVsLotSlope: {
		[kToPrimitive]: () => 0x2a2d7824,
		[kPropertyId]: 0x2a2d7824,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Brush belongs to mayor mode, miscellaneous category
	 */
	CategoryMayorMisc: 0x2a3143d7,
	/**
	 * Scale factor for all zoom levels
	 */
	AudioZoomScaleFactor: {
		[kToPrimitive]: () => 0x2a35a25f,
		[kPropertyId]: 0x2a35a25f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How fast sounds rolloff with distance
	 */
	AudioListenerRolloffFactor: {
		[kToPrimitive]: () => 0x2a36e3cb,
		[kPropertyId]: 0x2a36e3cb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Filter GUIDs that MUST be satisfied
	 */
	AudioANDFilters: 0x2a3fbde1,
	/**
	 * Filter GUIDs that must NOT be satisfied
	 */
	AudioNOTFilters: 0x2a3fbde5,
	/**
	 * Array of exemplars to load
	 */
	AudioAmbienceExemplarIds: 0x2a3ff8cd,
	/**
	 * GUID for this building's Query exemplar
	 */
	QueryExemplarGUID: 0x2a499f85,
	/**
	 * Maps city population to a multiplier (0.0-1.0) for commute train density
	 */
	CommuteTrainDensityCurve: {
		[kToPrimitive]: () => 0x2a511893,
		[kPropertyId]: 0x2a511893,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiplied by a vehicle's default speed when it goes around a curve
	 */
	CurveSpeedMultiplier: {
		[kToPrimitive]: () => 0x2a511cbc,
		[kPropertyId]: 0x2a511cbc,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound. Plays between alarm times.
	 */
	SFXAlarmAmbienceSound: 0x2a53be13,
	/**
	 * Crime sims only - which crime type this model represents
	 */
	CrimeType: {
		[kToPrimitive]: () => 0x2a62d9f3,
		[kPropertyId]: 0x2a62d9f3,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		NONE: 0x00000000,
		GenericCrime: 0x00000001,
		Fighting: 0x00000003,
		NarcoticsDeal: 0x00000004,
		Arson: 0x00000005,
		MoneySnatcher: 0x00000006,
		Stickup: 0x00000007,
		CarTheft: 0x00000008,
		Solicitation: 0x00000009,
		Mugging: 0x0000000a,
		BankRobbery: 0x0000000b,
		Flashing: 0x00000010,
		Graffiti: 0x00000011,
		PieThrowing: 0x00000012,
		TPing: 0x00000013,
	},
	/**
	 * Factor applied to commercial demand
	 */
	CommercialDemandEffect: {
		[kToPrimitive]: () => 0x2a633000,
		[kPropertyId]: 0x2a633000,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Factor applied to industrial demand
	 */
	IndustrialDemandEffect: {
		[kToPrimitive]: () => 0x2a634000,
		[kPropertyId]: 0x2a634000,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on Cs$ when active
	 */
	DemandEffectCs$: {
		[kToPrimitive]: () => 0x2a653110,
		[kPropertyId]: 0x2a653110,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on Cs$$ when active
	 */
	DemandEffectCs$$: {
		[kToPrimitive]: () => 0x2a653120,
		[kPropertyId]: 0x2a653120,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on Cs$$$ when active
	 */
	DemandEffectCs$$$: {
		[kToPrimitive]: () => 0x2a653130,
		[kPropertyId]: 0x2a653130,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on Co$$ when active
	 */
	DemandEffectCo$$: {
		[kToPrimitive]: () => 0x2a653320,
		[kPropertyId]: 0x2a653320,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on Co$$$ when active
	 */
	DemandEffectCo$$$: {
		[kToPrimitive]: () => 0x2a653330,
		[kPropertyId]: 0x2a653330,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on IR when active
	 */
	DemandEffectIR: {
		[kToPrimitive]: () => 0x2a654100,
		[kPropertyId]: 0x2a654100,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on ID when active
	 */
	DemandEffectID: {
		[kToPrimitive]: () => 0x2a654200,
		[kPropertyId]: 0x2a654200,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on IM when active
	 */
	DemandEffectIM: {
		[kToPrimitive]: () => 0x2a654300,
		[kPropertyId]: 0x2a654300,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the % Effect the Ordinance will have on IHT when active
	 */
	DemandEffectIHT: {
		[kToPrimitive]: () => 0x2a654400,
		[kPropertyId]: 0x2a654400,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Whether or not prop destroys entire lot when it burns down.  Default is
	 * true for flammable props.
	 */
	PropDestroysLot: {
		[kToPrimitive]: () => 0x2a89b677,
		[kPropertyId]: 0x2a89b677,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Max amount of full volume to change up per second
	 */
	AudioVolumeAttackLimit: {
		[kToPrimitive]: () => 0x2a9590de,
		[kPropertyId]: 0x2a9590de,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When zoning, the additional cost per cell for each meter of altitude
	 * changed
	 */
	LandfillCostForAltitudeChange: {
		[kToPrimitive]: () => 0x2aa00fe7,
		[kPropertyId]: 0x2aa00fe7,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Values per zoom controlling update garnularity in meters
	 */
	AudioListenerGranularity: {
		[kToPrimitive]: () => 0x2aa40ccc,
		[kPropertyId]: 0x2aa40ccc,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max HQ boost achievable without reward buildings.  Used to scale values
	 * for Sims opinion polls.
	 */
	MaximumHQBoost: {
		[kToPrimitive]: () => 0x2aa84164,
		[kPropertyId]: 0x2aa84164,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to demolish a tile on a lot that has been destroyed
	 */
	LotDeveloperCostToDemolishDestroyedTile: 0x2ab845e7,
	/**
	 * Maximum number of riot leaders created per instance
	 */
	RiotMaxLeaders: 0x2adb6b6d,
	/**
	 * Male=0, Female=1, used by MySim ped chooser
	 */
	MySimWalkGender: 0x2c0c922e,
	/**
	 * Automata group ID which controls the creation and driving properties for
	 * this automaton
	 */
	FinalGroupId: 0x2c23a3a1,
	/**
	 * Categorizes this exemplar; for debug and exemplar editors use only
	 */
	ExemplarCategory: 0x2c8f8746,
	/**
	 * Minimum active demand, use 0x80000000 for none
	 */
	MinimumValue: {
		[kToPrimitive]: () => 0x47bb3f10,
		[kPropertyId]: 0x47bb3f10,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Maximum active demand, use 0x7fffffff for none
	 */
	MaximumValue: {
		[kToPrimitive]: () => 0x47bb3f11,
		[kPropertyId]: 0x47bb3f11,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Initial supply of this resource, [min, max]
	 */
	InitialSupply: {
		[kToPrimitive]: () => 0x47bb3f20,
		[kPropertyId]: 0x47bb3f20,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Initial demand for this resource, [min, max]
	 */
	InitialDemand: {
		[kToPrimitive]: () => 0x47bb3f21,
		[kPropertyId]: 0x47bb3f21,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Demands increased by this resource (demandID, percentage)
	 */
	Drives: {
		[kToPrimitive]: () => 0x47bb3f30,
		[kPropertyId]: 0x47bb3f30,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Resources created by this resource (demandID, percentage)
	 */
	Satisfies: {
		[kToPrimitive]: () => 0x47bb3f31,
		[kPropertyId]: 0x47bb3f31,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Demands increased by this demand (demandID, percentage)
	 */
	Contributes: {
		[kToPrimitive]: () => 0x47bb3f32,
		[kPropertyId]: 0x47bb3f32,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Demand IDs capped by this resource, based on % depleted
	 */
	CapsDemand: 0x47bb3f41,
	/**
	 * List of demand IDs summed by this one
	 */
	Sums: 0x47bb3f50,
	/**
	 * Which part of the regional index is added to the local index
	 */
	RegionUse: {
		[kToPrimitive]: () => 0x47bb3f60,
		[kPropertyId]: 0x47bb3f60,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		UseNone: 0x00000000,
		UseSupply: 0x00000001,
		UseDemand: 0x00000002,
	},
	/**
	 * Power of 2; determines the size of the demand grid
	 */
	TractSize: {
		[kToPrimitive]: () => 0x87cd6310,
		[kPropertyId]: 0x87cd6310,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Minimum > 0, Maximum
	 */
	LandValueIntrinsicMinMax: {
		[kToPrimitive]: () => 0x47e2c300,
		[kPropertyId]: 0x47e2c300,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Low/Medium boundary, Medium/High boundary
	 */
	LandValueWealthBoundaries: {
		[kToPrimitive]: () => 0x47e2c301,
		[kPropertyId]: 0x47e2c301,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Effect of water on land value: size, radius
	 */
	LandValueWaterEffect: {
		[kToPrimitive]: () => 0x47e2c310,
		[kPropertyId]: 0x47e2c310,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Maps altitude to land value
	 */
	LandValueAltitudeEffect: {
		[kToPrimitive]: () => 0x47e2c320,
		[kPropertyId]: 0x47e2c320,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Growth Developer IDs (see Effects)
	 */
	LandValueDesirabilityIDs: 0x47e2c330,
	/**
	 * Size of effects (see IDs)
	 */
	LandValueDesirabilityFactors: {
		[kToPrimitive]: () => 0x47e2c331,
		[kPropertyId]: 0x47e2c331,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps desirability to land value
	 */
	LandValueDesirabilityCurve: {
		[kToPrimitive]: () => 0x47e2c332,
		[kPropertyId]: 0x47e2c332,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Amount of capacity that can be under construction at any one time
	 */
	ConstructionResourcesMinMax: {
		[kToPrimitive]: () => 0x47e2c380,
		[kPropertyId]: 0x47e2c380,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Factor applied to population to calculate construction resources
	 */
	ConstructionResourcesPerResident: {
		[kToPrimitive]: () => 0x47e2c381,
		[kPropertyId]: 0x47e2c381,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Improves that chance that low-demand types will have opportunity to build
	 */
	ConstructionTypeSelectionBias: 0x47e2c382,
	/**
	 * Values >1 allow big stage buildings sooner. Indexed by difficulty level
	 */
	StagePopluationMultiplier: {
		[kToPrimitive]: () => 0x47e2c383,
		[kPropertyId]: 0x47e2c383,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of days before a building can distress
	 */
	LotDeveloperStayNewTime: 0x47e2c400,
	/**
	 * When to abandon, distress, and renew. Values 0-1
	 */
	LotDeveloperOccupancyThresholds: {
		[kToPrimitive]: () => 0x47e2c401,
		[kPropertyId]: 0x47e2c401,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Factor applied to desired capacity when growing buildings in a tract
	 */
	TractDeveloperOverbuild: {
		[kToPrimitive]: () => 0x47e2c500,
		[kPropertyId]: 0x47e2c500,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Start and Stop percentage of desired capacity that can be fulfilled by
	 * abandoned buildings
	 */
	TractDeveloperReoccupyThresholds: {
		[kToPrimitive]: () => 0x47e2c501,
		[kPropertyId]: 0x47e2c501,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * What percentage of the existing capacity must be demanded before we
	 * redevelop
	 */
	TractDeveloperRedevelopSizeThreshold: {
		[kToPrimitive]: () => 0x47e2c502,
		[kPropertyId]: 0x47e2c502,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * for occupied/abandoned buildings"
	 */
	TractDeveloperDemolitionCosts: {
		[kToPrimitive]: () => 0x47e2c510,
		[kPropertyId]: 0x47e2c510,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Fictional cost to aggregate a lot/subdivide a lot
	 */
	TractDeveloperNewLotCosts: {
		[kToPrimitive]: () => 0x47e2c511,
		[kPropertyId]: 0x47e2c511,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Building occupancy rate +/- variation from tract rate
	 */
	TractDeveloperOccupancyVariation: {
		[kToPrimitive]: () => 0x47e2c530,
		[kPropertyId]: 0x47e2c530,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When 100% full, subtract a little from the occupancy rate
	 */
	TractDeveloperMinVacancyRange: {
		[kToPrimitive]: () => 0x47e2c531,
		[kPropertyId]: 0x47e2c531,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If true, higher wealth buildings can replace non-empty lower wealth
	 * buildings
	 */
	TractDeveloperKickOutLowerWealth: {
		[kToPrimitive]: () => 0x47e2c540,
		[kPropertyId]: 0x47e2c540,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * List of available (R and C) building styles
	 */
	TractDeveloperAvailableStyles: 0x47e2c550,
	/**
	 * How often to change (R and C) building styles
	 */
	TractDeveloperYearsBetweenStyles: {
		[kToPrimitive]: () => 0x47e2c551,
		[kPropertyId]: 0x47e2c551,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Min clearance below bridge (meters)
	 */
	MinClearance: {
		[kToPrimitive]: () => 0x482cb441,
		[kPropertyId]: 0x482cb441,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of end pieces
	 */
	NumEndPieces: 0x482cb442,
	/**
	 * Exemplar ids for end pieces(in order)
	 */
	EndPieceExemplars: 0x482cb443,
	/**
	 * Model rotations for end pieces
	 */
	EndPieceRotations: {
		[kToPrimitive]: () => 0x482cb444,
		[kPropertyId]: 0x482cb444,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Exemplar id for the repeat pieces
	 */
	RepeatPieceExemplar: 0x482cb445,
	/**
	 * Model rotation for repeat piece
	 */
	RepeatPieceRotation: {
		[kToPrimitive]: () => 0x482cb446,
		[kPropertyId]: 0x482cb446,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Number of cells between supports
	 */
	SupportInterval: 0x482cb447,
	/**
	 * Number of support pieces(count one side only)
	 */
	NumSupportPieces: 0x482cb448,
	/**
	 * Exemplar ids for support pieces(start at pillar)
	 */
	SupportPieceExemplars: 0x482cb449,
	/**
	 * Model rotations for support pieces
	 */
	SupportPieceRotations: {
		[kToPrimitive]: () => 0x482cb44a,
		[kPropertyId]: 0x482cb44a,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Dist from top the two spans of each end piece are
	 */
	EndPieceSpanLocations: {
		[kToPrimitive]: () => 0x482cb44b,
		[kPropertyId]: 0x482cb44b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Dist from pivot point to the top of concrete column (-ve for no column)
	 */
	ColumnTopPosForSupportPieces: {
		[kToPrimitive]: () => 0x482cb44c,
		[kPropertyId]: 0x482cb44c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Dist from pivot point to the top of concrete column (-ve for no column)
	 */
	ColumnTopPosForEndPieces: {
		[kToPrimitive]: () => 0x482cb44d,
		[kPropertyId]: 0x482cb44d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * (x,z) corresponding to the 4 corners of the support column w.r.t column
	 * center
	 */
	SupportColumnCorners: {
		[kToPrimitive]: () => 0x482cb44e,
		[kPropertyId]: 0x482cb44e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Set to true if this bridge can work as land bridge
	 */
	CanWorkAsLandBridge: {
		[kToPrimitive]: () => 0x482cb44f,
		[kPropertyId]: 0x482cb44f,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Set to true if this bridge can work as water bridge
	 */
	CanWorkAsWaterBridge: {
		[kToPrimitive]: () => 0x482cb450,
		[kPropertyId]: 0x482cb450,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * The lowest suspend wire can get in the middle
	 */
	MinHold: {
		[kToPrimitive]: () => 0x482cb455,
		[kPropertyId]: 0x482cb455,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The lowest suspend wire can get at the ends (leave it at 0 please)
	 */
	MinEndHold: {
		[kToPrimitive]: () => 0x482cb456,
		[kPropertyId]: 0x482cb456,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Pylons height (meters)
	 */
	PylonsHeight: {
		[kToPrimitive]: () => 0x482cb457,
		[kPropertyId]: 0x482cb457,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The shortest possible bridge of this type (tiles)
	 */
	MinSpan: 0x482cb458,
	/**
	 * Number of cells between supports at the ends of the bridge
	 */
	EndSupportInterval: 0x482cb459,
	/**
	 * Minimal number of pylons
	 */
	MinPylons: 0x482cb45a,
	/**
	 * Maximal number of pylons
	 */
	MaxPylons: 0x482cb45b,
	/**
	 * Texture ID for suspension wire
	 */
	WireMainTexId: 0x482cb45c,
	/**
	 * Texture ID for vertical suspension wires
	 */
	WireTileTexId: 0x482cb45d,
	/**
	 * (x,z) corresponding to the 4 corners of the pylon w.r.t pylon center
	 */
	MainPylonCorners: {
		[kToPrimitive]: () => 0x482cb45e,
		[kPropertyId]: 0x482cb45e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Bridge width in tiles (defaults to 1)
	 */
	BridgeWidth: 0x482cb45f,
	/**
	 * The longest possible bridge of this type (tiles)
	 */
	MaxSpan: 0x482cb467,
	/**
	 * Distance from road top to ceiling of water passage below bridge tiles.
	 */
	CeilingHeight: {
		[kToPrimitive]: () => 0x482cb468,
		[kPropertyId]: 0x482cb468,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * 3D start and end (x,y,z) of cable attachments on front side of pylon.
	 */
	CableStayedFrontAnchors: {
		[kToPrimitive]: () => 0x482cb469,
		[kPropertyId]: 0x482cb469,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * 3D start and end (x,y,z) of cable attachments on rear side of pylon.
	 */
	CableStayedRearAnchors: {
		[kToPrimitive]: () => 0x482cb46a,
		[kPropertyId]: 0x482cb46a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Instance ID of texture to use for cable-stayed bridge wires.
	 */
	CableStayedWireTexture: 0x482cb46b,
	/**
	 * Thickness of cable-stayed wires in meters.
	 */
	CableStayedWireThickness: {
		[kToPrimitive]: () => 0x482cb46c,
		[kPropertyId]: 0x482cb46c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Start and end positions for cable-stayed bridge wires on the span,
	 * relative to the pylon.
	 */
	CableStayedSpanAnchors: {
		[kToPrimitive]: () => 0x482cb46d,
		[kPropertyId]: 0x482cb46d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The number of wires on one side of a pylon on a cable-stayed bridge.
	 */
	CableStayedWireCount: 0x482cb46e,
	/**
	 * Group and instance ID for preview image of bridge.
	 */
	BridgeImageKey: {
		[kToPrimitive]: () => 0x482cb46f,
		[kPropertyId]: 0x482cb46f,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * One-time and per-tile costs for bridge, in simoleons.
	 */
	BridgeCosts: {
		[kToPrimitive]: () => 0x482cb470,
		[kPropertyId]: 0x482cb470,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Height of a repeating wire tile for suspension bridges.
	 */
	WireTilingUnit: {
		[kToPrimitive]: () => 0x482cb471,
		[kPropertyId]: 0x482cb471,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Vertical displacement for all models in a bridge.
	 */
	BridgeHeightBias: {
		[kToPrimitive]: () => 0x482cb472,
		[kPropertyId]: 0x482cb472,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Offset of suspension wire base
	 */
	SuspensionWireBase: {
		[kToPrimitive]: () => 0x482cd460,
		[kPropertyId]: 0x482cd460,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Offset of suspension wire inside the bridge tile
	 */
	SuspensionWireInside: {
		[kToPrimitive]: () => 0x482cd461,
		[kPropertyId]: 0x482cd461,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Offset of pylon base
	 */
	SupportColumnBase: {
		[kToPrimitive]: () => 0x482cd462,
		[kPropertyId]: 0x482cd462,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum estimated elevation above water
	 */
	MinAltitudeAboveWater: {
		[kToPrimitive]: () => 0x482cd463,
		[kPropertyId]: 0x482cd463,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum estimated elevation above water
	 */
	MaxAltitudeAboveWater: {
		[kToPrimitive]: () => 0x482cd464,
		[kPropertyId]: 0x482cd464,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Force pylon-to-end distance to be at least some% of pylon-to-pylon
	 * distance.
	 */
	MinEndIntervalFraction: {
		[kToPrimitive]: () => 0x482cd465,
		[kPropertyId]: 0x482cd465,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Group and instance ID for string name of bridge.
	 */
	BridgeNameKey: {
		[kToPrimitive]: () => 0x482cd466,
		[kPropertyId]: 0x482cd466,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Relative to left, bottom, far corner of bounding box (x,y,z meters)
	 */
	PivotPointPosition: {
		[kToPrimitive]: () => 0x4835c6a4,
		[kPropertyId]: 0x4835c6a4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Dist (meters) from the pivot pt to left, right, back, front, bottom, top
	 * side of model
	 */
	BoundingBox: {
		[kToPrimitive]: () => 0x4835c6a5,
		[kPropertyId]: 0x4835c6a5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Test for Resource key table editor
	 */
	TestResKeyTable: {
		[kToPrimitive]: () => 0x489b6974,
		[kPropertyId]: 0x489b6974,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Max normal height in fractally generated terrains, for different city
	 * size choices
	 */
	MaxNormalTerrainHeight: {
		[kToPrimitive]: () => 0x48cd7b20,
		[kPropertyId]: 0x48cd7b20,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Sea level (meters)
	 */
	SeaLevel: {
		[kToPrimitive]: () => 0x48cd7b21,
		[kPropertyId]: 0x48cd7b21,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the min ht for regular terrain
	 */
	MinRegularHtFactor: {
		[kToPrimitive]: () => 0x48cd7b22,
		[kPropertyId]: 0x48cd7b22,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the max ht for regular terrain
	 */
	MaxRegularHtFactor: {
		[kToPrimitive]: () => 0x48cd7b23,
		[kPropertyId]: 0x48cd7b23,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the min ht for mountain terrain
	 */
	MinMountainHtFactor: {
		[kToPrimitive]: () => 0x48cd7b24,
		[kPropertyId]: 0x48cd7b24,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the max ht for mountain terrain
	 */
	MaxMountainHtFactor: {
		[kToPrimitive]: () => 0x48cd7b25,
		[kPropertyId]: 0x48cd7b25,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum altitude of a terrain vertex
	 */
	MaxTerrainHeight: {
		[kToPrimitive]: () => 0x48cd7b26,
		[kPropertyId]: 0x48cd7b26,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum altitude of a terrain vertex
	 */
	MinTerrainHeight: {
		[kToPrimitive]: () => 0x48cd7b27,
		[kPropertyId]: 0x48cd7b27,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How many meters correspond to one unit of gray scale value in image
	 */
	ImageImportScaleFactor: {
		[kToPrimitive]: () => 0x48cd7b28,
		[kPropertyId]: 0x48cd7b28,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Default terrain height for new city (meters)
	 */
	DefaultTerrainHeight: {
		[kToPrimitive]: () => 0x48cd7b2a,
		[kPropertyId]: 0x48cd7b2a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the max temperature range for texture assignment
	 */
	TemperatureRangeFactor: {
		[kToPrimitive]: () => 0x48cd7b30,
		[kPropertyId]: 0x48cd7b30,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the max water proxmity range for texture assignment
	 */
	WaterProximityRangeFactor: {
		[kToPrimitive]: () => 0x48cd7b31,
		[kPropertyId]: 0x48cd7b31,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of erosion passes at initial terrain creation time
	 */
	NumInitialErosionPasses: 0x48cd7b40,
	/**
	 * Number of hydraulic erosion iterations in each initial erosion pass
	 */
	NumHydraulicIterationsPerInitialErosionPass: 0x48cd7b41,
	/**
	 * Number of wind erosion iterations in each initial erosion pass
	 */
	NumWindIterationsPerInitialErosionPass: 0x48cd7b42,
	/**
	 * The sea level change range (meters) corresponding to the water slider,
	 * for diff city sizes
	 */
	SeaLevelChangeDueToWaterSlider: {
		[kToPrimitive]: () => 0x48cd7b43,
		[kPropertyId]: 0x48cd7b43,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * do not auto flatten it"
	 */
	MinCellsInUsefulFlatArea: 0x48cd7b50,
	/**
	 * Controls the extent of height change allowed in auto-flattening
	 */
	MaxHtChangeToFlattenFactor: {
		[kToPrimitive]: () => 0x48cd7b51,
		[kPropertyId]: 0x48cd7b51,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls the maximum altitude upto which auto-flattening gets done
	 */
	MaxTerraceAltitudeFactor: {
		[kToPrimitive]: () => 0x48cd7b52,
		[kPropertyId]: 0x48cd7b52,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls the lowest altitude at which terraces get created
	 */
	MinTerraceAltitudeFactor: {
		[kToPrimitive]: () => 0x48cd7b53,
		[kPropertyId]: 0x48cd7b53,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * To what distance (in cells) around an auto-flattened area we do smoothing
	 */
	AutoFlatAreaEdgeSmootheningRadius: 0x48cd7b54,
	/**
	 * Minimum number of shore vertices in a shore cliff
	 */
	MinShoreCliffSize: 0x48cd7b60,
	/**
	 * Minimum pre-existing ht difference at shore for it to be considered for
	 * turning into a cliff
	 */
	MinShoreCliffCandidateHt: {
		[kToPrimitive]: () => 0x48cd7b61,
		[kPropertyId]: 0x48cd7b61,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum ht above sea level at a shore cliff (after cliff creation)
	 */
	MinShoreCliffHt: {
		[kToPrimitive]: () => 0x48cd7b62,
		[kPropertyId]: 0x48cd7b62,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum ht above sea level at a shore cliff (after cliff creation)
	 */
	MaxShoreCliffHt: {
		[kToPrimitive]: () => 0x48cd7b63,
		[kPropertyId]: 0x48cd7b63,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of shore vertices in a shore cliff
	 */
	MaxShoreCliffSize: 0x48cd7b64,
	/**
	 * A face is considered cliff if the y-component of its normal is less than
	 * this
	 */
	MaxNormalYForCliff: {
		[kToPrimitive]: () => 0x48cd7b65,
		[kPropertyId]: 0x48cd7b65,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum sea altitude
	 */
	MinSeaLevel: {
		[kToPrimitive]: () => 0x48cd7b70,
		[kPropertyId]: 0x48cd7b70,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum sea altitude
	 */
	MaxSeaLevel: {
		[kToPrimitive]: () => 0x48cd7b71,
		[kPropertyId]: 0x48cd7b71,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Extent by which the sea level is raised/lowered for each player click
	 */
	SeaRaiseLowerAmount: {
		[kToPrimitive]: () => 0x48cd7b72,
		[kPropertyId]: 0x48cd7b72,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Extent by which the terrain level is raised/lowered each time raise/lower
	 * menu is selected
	 */
	TerrainRaiseLowerAmount: {
		[kToPrimitive]: () => 0x48cd7b73,
		[kPropertyId]: 0x48cd7b73,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Run auto-flatten tool upon initial terrain creation
	 */
	AutoFlattenUponCreation: {
		[kToPrimitive]: () => 0x48cd7b80,
		[kPropertyId]: 0x48cd7b80,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Run cliff creation tool upon initial terrain creation
	 */
	ShoreCliffsUponCreation: {
		[kToPrimitive]: () => 0x48cd7b81,
		[kPropertyId]: 0x48cd7b81,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Angle (in degrees) by which the brush rotates between successive
	 * applications
	 */
	TypicalBrushAngleIncrement: {
		[kToPrimitive]: () => 0x48cd7ba0,
		[kPropertyId]: 0x48cd7ba0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of water flow steps in each application of water erosion brush
	 */
	NumFlowStepsPerWaterErosionBrushApplication: {
		[kToPrimitive]: () => 0x48cd7bf1,
		[kPropertyId]: 0x48cd7bf1,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Number of water erosion steps in each application of water erosion tool
	 */
	NumWaterErosionIterationsPerInvocation: 0x48cd7bf2,
	/**
	 * Number of smoothing iterations after each application of water erosion
	 * tool
	 */
	NumSmoothingIterationsAfterWaterErosion: 0x48cd7bf3,
	/**
	 * Specifiess the smoothing radius as a function of height adjustment needed
	 */
	EdgeReconcilliationSmoothingRadiusVsHeightDiff: {
		[kToPrimitive]: () => 0x48cd7c00,
		[kPropertyId]: 0x48cd7c00,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Smoothing iterations for edge reconcilliation
	 */
	EdgeReconcilliationSmoothingIterations: 0x48cd7c01,
	/**
	 * If the height difference is less than this, don't reconcile
	 */
	EdgeReconcilliationHtDifferenceThreshold: {
		[kToPrimitive]: () => 0x48cd7c02,
		[kPropertyId]: 0x48cd7c02,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of station at its center (in protection units: 0-255).
	 */
	PoliceStationCenterStrength: {
		[kToPrimitive]: () => 0x48d71ed0,
		[kPropertyId]: 0x48d71ed0,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of station at its limit (in protection units: 0-255).
	 */
	PoliceStationExteriorStrength: {
		[kToPrimitive]: () => 0x48d71ed1,
		[kPropertyId]: 0x48d71ed1,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Effect radius of station (in meters).
	 */
	PoliceStationRadius: {
		[kToPrimitive]: () => 0x48d71ed2,
		[kPropertyId]: 0x48d71ed2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of police cars that can be dispatched from this station.
	 */
	PoliceStationTotalDispatches: {
		[kToPrimitive]: () => 0x48d71ed5,
		[kPropertyId]: 0x48d71ed5,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of vehicle at its center (in protection units: 0-255).
	 */
	PoliceStationDispatchCenterStrength: {
		[kToPrimitive]: () => 0x48d71ed9,
		[kPropertyId]: 0x48d71ed9,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Protection effect of vehicle at its limit (in protection units: 0-255).
	 */
	PoliceStationDispatchExteriorStrength: {
		[kToPrimitive]: () => 0x48d71eda,
		[kPropertyId]: 0x48d71eda,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Effect radius of active vehicle (in meters).
	 */
	PoliceStationDispatchRadius: {
		[kToPrimitive]: () => 0x48d71edb,
		[kPropertyId]: 0x48d71edb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Jail Inmate Capacity.  Note: The value you see in game and the number you
	 * enter here may not match. The value entered here is the ideal number of
	 * inmates you can pack into a jail. The number in the game is the practical
	 * number you can pack into a jail.
	 */
	JailInmateCapacity: {
		[kToPrimitive]: () => 0x48d71ee0,
		[kPropertyId]: 0x48d71ee0,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Monthly cost, per convict, for every prisoner over regular (100%)
	 * capacity
	 */
	JailOvercapacityCostPerPerson: {
		[kToPrimitive]: () => 0x48d71ee4,
		[kPropertyId]: 0x48d71ee4,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Amount of trash converted to energy per month.
	 */
	WasteToEnergyMonthlyCapacity: 0x48ebd0b1,
	/**
	 * Amount of garbage the building can store in a month
	 */
	GarbageCapacity: 0x48ee7a44,
	/**
	 * Where this water producer gets its water
	 */
	WaterSource: {
		[kToPrimitive]: () => 0x48f23a7e,
		[kPropertyId]: 0x48f23a7e,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		FreshWater: 0x00000000,
		SaltWater: 0x00000001,
		Aquifer: 0x00000002,
	},
	/**
	 * Bonds are issued in values that are of this increment
	 */
	BudgetBondIncrement: {
		[kToPrimitive]: () => 0x490e0aa6,
		[kPropertyId]: 0x490e0aa6,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Minimum funding percentage that must be restored to end a utility strike
	 */
	UtilityMinFundingToEndStrike: {
		[kToPrimitive]: () => 0x49122036,
		[kPropertyId]: 0x49122036,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Traffic volume generated per point of population in a building
	 */
	TrafficVolumePerPopulation: {
		[kToPrimitive]: () => 0x491332e6,
		[kPropertyId]: 0x491332e6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Speed to walk through rd, rl, hwy, st, x, x, ave, sub, lr, mo, ow, dr, gh
	 */
	MaxSpeedByNetworkForWalking: {
		[kToPrimitive]: () => 0x491332e7,
		[kPropertyId]: 0x491332e7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to drive through rd, rl, hwy, st, x, x, ave, sub, lr, mo, ow, dr,
	 * gh
	 */
	MaxSpeedByNetworkForDriving: {
		[kToPrimitive]: () => 0x491332e8,
		[kPropertyId]: 0x491332e8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to bus travel through rd, rl, hwy, st, x, x, ave, sub, lr, mo, ow,
	 * dr, gh
	 */
	MaxSpeedByNetworkForABus: {
		[kToPrimitive]: () => 0x491332e9,
		[kPropertyId]: 0x491332e9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to train travel through rd, rl, hwy, st, x, x, ave, sub, lr, mo,
	 * ow, dr, gh
	 */
	MaxSpeedByNetworkForATrain: {
		[kToPrimitive]: () => 0x491332ea,
		[kPropertyId]: 0x491332ea,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to truck travel through rd, rl, hwy, st, x, x, ave, sub, lr, mo,
	 * ow, dr, gh
	 */
	MaxSpeedByNetworkForATruck: {
		[kToPrimitive]: () => 0x491332eb,
		[kPropertyId]: 0x491332eb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to train travel through rd, rl, hwy, st, x, x, ave, sub, lr, mo,
	 * ow, dr, gh
	 */
	MaxSpeedByNetworkForAFrtTrain: {
		[kToPrimitive]: () => 0x491332ec,
		[kPropertyId]: 0x491332ec,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to subway travel. Set the eighth value.
	 */
	MaxSpeedByNetworkForSubways: {
		[kToPrimitive]: () => 0x491332ed,
		[kPropertyId]: 0x491332ed,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to ride el train.  Set the eighth value.
	 */
	MaxSpeedByNetworkForElTrain: {
		[kToPrimitive]: () => 0x491332ee,
		[kPropertyId]: 0x491332ee,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed to ride monorail.  Set the ninth value.
	 */
	MaxSpeedByNetworkForMonorail: {
		[kToPrimitive]: () => 0x491332ef,
		[kPropertyId]: 0x491332ef,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of garbage units reported to the UI, must be less than
	 * 32767
	 */
	MaxGarbageValueForUI: 0x49134bd4,
	/**
	 * Maximum air pollution value reported to the UI, must be less than 32767
	 */
	MaxAirPollutionValueForUI: 0x49134bdd,
	/**
	 * Multiplier to tweak the relative weighting of the R$$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_R$$$: {
		[kToPrimitive]: () => 0x4918c925,
		[kPropertyId]: 0x4918c925,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the CS$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_Cs$$: {
		[kToPrimitive]: () => 0x4918c92c,
		[kPropertyId]: 0x4918c92c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the CS$$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_Cs$$$: {
		[kToPrimitive]: () => 0x4918c930,
		[kPropertyId]: 0x4918c930,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the CO$$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_Co$$$: {
		[kToPrimitive]: () => 0x4918c93a,
		[kPropertyId]: 0x4918c93a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200) by which this ordinance affects coverage
	 * radius of health buildings
	 */
	HealthCoverageRadiusEffect: {
		[kToPrimitive]: () => 0x491b3ad5,
		[kPropertyId]: 0x491b3ad5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Enable/disable ripples
	 */
	RipplesEnabled: {
		[kToPrimitive]: () => 0x491c9c00,
		[kPropertyId]: 0x491c9c00,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Place ripples only if the shore is these many cells long
	 */
	RippleMinShoreSizeForPlacement: 0x491c9c01,
	/**
	 * Approximate width of the quads along the ribbon axis (meters)
	 */
	RippleQuadWidth: {
		[kToPrimitive]: () => 0x491c9c02,
		[kPropertyId]: 0x491c9c02,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Land side of the ribbon is keptabove sea level to get ripple washing the
	 * beach effect
	 */
	RippleLandVertexHtAboveSeaLevel: {
		[kToPrimitive]: () => 0x491c9c03,
		[kPropertyId]: 0x491c9c03,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * What portion of the texture corresponds to each quad
	 */
	RippleTextureUIncrementPerQuad: {
		[kToPrimitive]: () => 0x491c9c04,
		[kPropertyId]: 0x491c9c04,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Dist (meters) from ribbon center to the quad edge on water side
	 */
	RippleWaterSideRibbonWidth: {
		[kToPrimitive]: () => 0x491c9c05,
		[kPropertyId]: 0x491c9c05,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Dist (meters) from ribbon center to the quad edge on land side
	 */
	RippleLandSideRibbonWidth: {
		[kToPrimitive]: () => 0x491c9c06,
		[kPropertyId]: 0x491c9c06,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Microseconds spent in each frame of animation
	 */
	RippleMicroSecsPerFrame: 0x491c9c07,
	/**
	 * Alpha values for the ribbon vertices on the land side
	 */
	RippleLandVertexAlpha: {
		[kToPrimitive]: () => 0x491c9c08,
		[kPropertyId]: 0x491c9c08,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Alpha values for the ribbon vertices on the water side
	 */
	RippleWaterVertexAlpha: {
		[kToPrimitive]: () => 0x491c9c09,
		[kPropertyId]: 0x491c9c09,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Factor governing the variation of the ribbon width [0-1]
	 */
	RippleWaterSideRibbonWidthVariation: {
		[kToPrimitive]: () => 0x491c9c0a,
		[kPropertyId]: 0x491c9c0a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If the variation in ripple tangent direction is more than this, we break
	 * the ripple there
	 */
	RippleConcavityThresholdAngle: {
		[kToPrimitive]: () => 0x491c9c0b,
		[kPropertyId]: 0x491c9c0b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If the area (square cells) of terrain edits exceeds this, ripples get
	 * reevaluated
	 */
	RippleTerrainUpdateAreaThreshold: 0x491c9c0c,
	/**
	 * On the edges of the ripples, alpha increments over these many steps to
	 * reach its max
	 */
	RippleAlphaIncrementSteps: 0x491c9c0d,
	/**
	 * HQ assigned to new High Wealth residents
	 */
	HighWealthHQ: {
		[kToPrimitive]: () => 0x4929cc97,
		[kPropertyId]: 0x4929cc97,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Maps Life Expectancy of a tract to the % of that tract that is in the
	 * workforce
	 */
	LifeExpectancyToWorkforceCurve: {
		[kToPrimitive]: () => 0x4941a92b,
		[kPropertyId]: 0x4941a92b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Odds of selecting each travel strategy
	 */
	TravelStrategyPercentWealthNone: {
		[kToPrimitive]: () => 0x4953e8a3,
		[kPropertyId]: 0x4953e8a3,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Odds of selecting each travel strategy
	 */
	TravelStrategyPercentWealth$: {
		[kToPrimitive]: () => 0x4953e8a4,
		[kPropertyId]: 0x4953e8a4,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Odds of selecting each travel strategy
	 */
	TravelStrategyPercentWealth$$: {
		[kToPrimitive]: () => 0x4953e8a5,
		[kPropertyId]: 0x4953e8a5,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Odds of selecting each travel strategy
	 */
	TravelStrategyPercentWealth$$$: {
		[kToPrimitive]: () => 0x4953e8a6,
		[kPropertyId]: 0x4953e8a6,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Default depth of underground network piece below terrain
	 */
	UndergroundPieceDepth: {
		[kToPrimitive]: () => 0x496e564c,
		[kPropertyId]: 0x496e564c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If false, normal pipe pieces are placed as per intersections
	 */
	UsePipeDepth: {
		[kToPrimitive]: () => 0x496e5a36,
		[kPropertyId]: 0x496e5a36,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Zone purpose types compatible with crime (none == can appear around any
	 * purpose)
	 */
	ZonePurposeFilter: {
		[kToPrimitive]: () => 0xaa12fcb4,
		[kPropertyId]: 0xaa12fcb4,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Percent amount to decelerate scrolling speed per GZPaint tick.
	 */
	ScrollingDeceleration: {
		[kToPrimitive]: () => 0xca383ca2,
		[kPropertyId]: 0xca383ca2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * True if ScrollingDeceleration should be the percentage (0.0-1.0) to
	 * decelerate per GZPaint tick.  False if that amount should be the absolute
	 * amount to decrement the speed per tick.
	 */
	ScrollingDecelerationIsPercentage: {
		[kToPrimitive]: () => 0x4975dd25,
		[kPropertyId]: 0x4975dd25,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * RGBA color for unwatered buildings in pipe view
	 */
	UnwateredBuildingColor: {
		[kToPrimitive]: () => 0x497f42a4,
		[kPropertyId]: 0x497f42a4,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Maps city population to a multiplier (0.0-1.0) for vehicle density
	 */
	VehicleDensityCurve: {
		[kToPrimitive]: () => 0x4998c89c,
		[kPropertyId]: 0x4998c89c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Which travel types are currently visible and simulated by the automata
	 * system
	 */
	ActiveTravelTypes: {
		[kToPrimitive]: () => 0x4998c89d,
		[kPropertyId]: 0x4998c89d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		Commute: 0x00000001,
		Bus: 0x00000002,
		FreightTruck: 0x00000003,
		CommuteTrain: 0x00000004,
		FreightTrain: 0x00000005,
		Subway: 0x00000006,
		OccupantTrip: 0x00000007,
		Crime: 0x00000008,
		ElTrain: 0x00000009,
		Monorail: 0x0000000a,
	},
	/**
	 * Max number of vehicles to cross a tile per second
	 */
	MaxVehiclesPerSecond: {
		[kToPrimitive]: () => 0x4998c89e,
		[kPropertyId]: 0x4998c89e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of vehicles at one time
	 */
	MaxVehicles: 0x4998c89f,
	/**
	 * Minimum and maximum DEFAULT speed for vehicles, in kilometers per hour
	 */
	VehicleMinMaxKPH: {
		[kToPrimitive]: () => 0x4998c900,
		[kPropertyId]: 0x4998c900,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maps city population to a multiplier (0.0-1.0) for ped (sim) density
	 */
	PedDensityCurve: {
		[kToPrimitive]: () => 0x4998c901,
		[kPropertyId]: 0x4998c901,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of cells that occupant-trip vehicles should travel before
	 * disappearing
	 */
	VehicleLifespanRange: {
		[kToPrimitive]: () => 0x4998c902,
		[kPropertyId]: 0x4998c902,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Max number of peds to cross a tile per second
	 */
	MaxPedsPerSecond: {
		[kToPrimitive]: () => 0x4998c903,
		[kPropertyId]: 0x4998c903,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of pedestrianss at one time
	 */
	MaxPeds: 0x4998c904,
	/**
	 * Minimum and maximum DEFAULT speed for pedestrians, in kilometers per hour
	 */
	PedMinMaxKPH: {
		[kToPrimitive]: () => 0x4998c905,
		[kPropertyId]: 0x4998c905,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of aircraft at one time
	 */
	MaxAircraft: 0x4998c908,
	/**
	 * Number of cells that occupant-trip pedestrians should travel before
	 * disappearing
	 */
	PedLifespanRange: {
		[kToPrimitive]: () => 0x4998c909,
		[kPropertyId]: 0x4998c909,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Range for random value used to dampen occupancy values when generating
	 * occupant trips
	 */
	OccupantTripNoiseRange: {
		[kToPrimitive]: () => 0x4998c90a,
		[kPropertyId]: 0x4998c90a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of watercraft at one time
	 */
	MaxWatercraft: 0x4998c90b,
	/**
	 * Maps time of day on 24-hour clock to a percentage of commute automata
	 * generated (0.0 - 1.0)
	 */
	CommuteClock: {
		[kToPrimitive]: () => 0x4998c90c,
		[kPropertyId]: 0x4998c90c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of bus automata
	 * generated (0.0 - 1.0)
	 */
	BusClock: {
		[kToPrimitive]: () => 0x4998c90d,
		[kPropertyId]: 0x4998c90d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of freight train
	 * automata generated (0.0 - 1.0)
	 */
	FreightTrainClock: {
		[kToPrimitive]: () => 0x4998c90e,
		[kPropertyId]: 0x4998c90e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of commute train
	 * automata generated (0.0 - 1.0)
	 */
	CommuteTrainClock: {
		[kToPrimitive]: () => 0x4998c90f,
		[kPropertyId]: 0x4998c90f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of occupant trip
	 * automata generated (0.0 - 1.0)
	 */
	OccupantTripClock: {
		[kToPrimitive]: () => 0x4998c910,
		[kPropertyId]: 0x4998c910,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of freight truck
	 * automata generated (0.0 - 1.0)
	 */
	FreightTruckClock: {
		[kToPrimitive]: () => 0x4998c911,
		[kPropertyId]: 0x4998c911,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds an automaton will pause at a stop sign
	 */
	StopSignDelay: {
		[kToPrimitive]: () => 0x4998c912,
		[kPropertyId]: 0x4998c912,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds traffic coming from secondary streets gets the green
	 * light
	 */
	StreetGoTime: {
		[kToPrimitive]: () => 0x4998c913,
		[kPropertyId]: 0x4998c913,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds traffic coming from main roads gets the green light
	 */
	RoadGoTime: {
		[kToPrimitive]: () => 0x4998c914,
		[kPropertyId]: 0x4998c914,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds traffic coming from avenues/boulevards gets the green
	 * light
	 */
	AvenueGoTime: {
		[kToPrimitive]: () => 0x4998c915,
		[kPropertyId]: 0x4998c915,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds it takes automata to fade in or out
	 */
	FadeTime: {
		[kToPrimitive]: () => 0x4998c916,
		[kPropertyId]: 0x4998c916,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Lowest zoom level at which vehicles are visible
	 */
	VehicleMinZoomVisibility: {
		[kToPrimitive]: () => 0x4998c918,
		[kPropertyId]: 0x4998c918,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Lowest zoom level at which pedestrians are visible
	 */
	PedestrianMinZoomVisibility: {
		[kToPrimitive]: () => 0x4998c919,
		[kPropertyId]: 0x4998c919,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Lowest zoom level at which aircraft are visible
	 */
	AircraftMinZoomVisibility: {
		[kToPrimitive]: () => 0x4998c91a,
		[kPropertyId]: 0x4998c91a,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Lowest zoom level at which watercraft are visible
	 */
	WatercraftMinZoomVisibility: {
		[kToPrimitive]: () => 0x4998c91b,
		[kPropertyId]: 0x4998c91b,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Automata should base traffic levels on 24-hour clock
	 */
	Use24hourClock: {
		[kToPrimitive]: () => 0x4998c91c,
		[kPropertyId]: 0x4998c91c,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * How many cells around a road tile the system will check population for
	 * occupant trips
	 */
	OccupantTripPopulationRadius: {
		[kToPrimitive]: () => 0x4998c91d,
		[kPropertyId]: 0x4998c91d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Time in days to complete construction. Recommended range: [15, 255]
	 */
	ConstructionTime: {
		[kToPrimitive]: () => 0x499afa38,
		[kPropertyId]: 0x499afa38,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Distance between the points generated for power line curves
	 */
	PowerLineCurveDistanceBetweenPoints: {
		[kToPrimitive]: () => 0x49a195c0,
		[kPropertyId]: 0x49a195c0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Which prop requester this prop satisfies. Most props satisfy the Wealth
	 * Requester, meaning they express the wealth level of the lot or street they
	 * are placed on. Choices are Wealth, Crime and Garbage.
	 */
	RequesterSatisfaction: {
		[kToPrimitive]: () => 0x49a1e05a,
		[kPropertyId]: 0x49a1e05a,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		Wealth: 0x49a1e995,
		Crime: 0x49a1e996,
		Garbage: 0xe9a4300b,
	},
	/**
	 * Percent of line length at which to place control points, horizontally
	 */
	PowerLineControlHoriz: {
		[kToPrimitive]: () => 0x49a1e8c4,
		[kPropertyId]: 0x49a1e8c4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percentage of industrial bldg. population that will generate freight
	 * trips
	 */
	FreightTrafficScalingFactor: {
		[kToPrimitive]: () => 0x49a2e8be,
		[kPropertyId]: 0x49a2e8be,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Crime level (0-1) vs. Prop Share
	 */
	CrimePropRequestCurve: {
		[kToPrimitive]: () => 0x49a34301,
		[kPropertyId]: 0x49a34301,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * DEBUG ONLY - Sims drive on the right side of the road, like proper
	 * Americans
	 */
	DriveOnRight: {
		[kToPrimitive]: () => 0x49be9565,
		[kPropertyId]: 0x49be9565,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Highest fire stage that this occupant reaches before burning down. Range
	 * = 1 to 5.
	 */
	MaxFireStage: {
		[kToPrimitive]: () => 0x49beda31,
		[kPropertyId]: 0x49beda31,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How this prop reacts to night
	 */
	NighttimeStateChange: {
		[kToPrimitive]: () => 0x49c9c93c,
		[kPropertyId]: 0x49c9c93c,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		NoChange: 0x00000000,
		ChangeToState1: 0x00000001,
	},
	/**
	 * Cost to plop this building, in Simoleans(tm)
	 */
	PlopCost: {
		[kToPrimitive]: () => 0x49cac341,
		[kPropertyId]: 0x49cac341,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * kPropertyID_NetworkPlacementPattern
	 */
	KPropertyID_NetworkPlacementPattern: {
		[kToPrimitive]: () => 0x49d55951,
		[kPropertyId]: 0x49d55951,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Speed of scrolling when cursor hits screen edge.
	 */
	AutoScrollSpeed: {
		[kToPrimitive]: () => 0x49e5522f,
		[kPropertyId]: 0x49e5522f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Brush strength multiplier at epicenter vs. quake intensity
	 */
	QuakeBrushStrengthAtEpicenterVsQuakeIntensity: {
		[kToPrimitive]: () => 0x4a08c500,
		[kPropertyId]: 0x4a08c500,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Brush width multiplier at epicenter vs. quake intensity
	 */
	QuakeBrushWidthAtEpicenterVsQuakeIntensity: {
		[kToPrimitive]: () => 0x4a08c501,
		[kPropertyId]: 0x4a08c501,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Variation of brush strength with distance from epicenter
	 */
	QuakeBrushStrengthVsDistance: {
		[kToPrimitive]: () => 0x4a08c502,
		[kPropertyId]: 0x4a08c502,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Variation of brush width with distance from epicenter
	 */
	QuakeBrushWidthVsDistance: {
		[kToPrimitive]: () => 0x4a08c503,
		[kPropertyId]: 0x4a08c503,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Distance in meters, specifying how far apart we place effects
	 */
	QuakeDistBetweenEffects: {
		[kToPrimitive]: () => 0x4a08c504,
		[kPropertyId]: 0x4a08c504,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max deviation from a straight fault line
	 */
	QuakeFaultLineCurviness: {
		[kToPrimitive]: () => 0x4a08c505,
		[kPropertyId]: 0x4a08c505,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max variation (degrees) in the slope of fault line
	 */
	QuakeMaxFaultLineSlopeVariation: {
		[kToPrimitive]: () => 0x4a08c506,
		[kPropertyId]: 0x4a08c506,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Speed (meters/sec) with which earthquake brush moves
	 */
	QuakeBrushTravelSpeed: {
		[kToPrimitive]: () => 0x4a08c507,
		[kPropertyId]: 0x4a08c507,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Microsecs between shake effects
	 */
	QuakeMicroSecsBetweenShakeEffects: 0x4a08c508,
	/**
	 * Distance in meters, specifying how far apart we place automata repulsors
	 */
	QuakeDistBetweenAutomataRepulsors: {
		[kToPrimitive]: () => 0x4a08c509,
		[kPropertyId]: 0x4a08c509,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min time (secs) from onset of leak until burst happens
	 */
	PipeBurstMinLeakTimeBeforeBurst: {
		[kToPrimitive]: () => 0x4a08c600,
		[kPropertyId]: 0x4a08c600,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max time (secs) from onset of leak until burst happens
	 */
	PipeBurstMaxLeakTimeBeforeBurst: {
		[kToPrimitive]: () => 0x4a08c601,
		[kPropertyId]: 0x4a08c601,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Specifies base name of disaster effect
	 */
	EffectName: {
		[kToPrimitive]: () => 0x4a08c700,
		[kPropertyId]: 0x4a08c700,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Specifies the id of the disaster manager to use
	 */
	ManagerID: 0x4a08c701,
	/**
	 * Mouse pick for disaster trigger should choose water surface instead of
	 * terrain bed underneath
	 */
	StopPickAtWaterSurface: {
		[kToPrimitive]: () => 0x4a08c702,
		[kPropertyId]: 0x4a08c702,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Occupant types to include or exclude (0=unused).
	 */
	DataViewTypeFilter: {
		[kToPrimitive]: () => 0x4a0b47e0,
		[kPropertyId]: 0x4a0b47e0,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * If true, the occupant filter is exclusive rather than inclusive.
	 */
	DataViewInvertFilter: {
		[kToPrimitive]: () => 0x4a0b47e1,
		[kPropertyId]: 0x4a0b47e1,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * If true, zoning decals are hidden.
	 */
	DataViewHideZones: {
		[kToPrimitive]: () => 0x4a0b47e2,
		[kPropertyId]: 0x4a0b47e2,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Specifies a surface or underground view to use.
	 */
	DataViewViewLevel: 0x4a0b47e3,
	/**
	 * Color progression to use for data.
	 */
	DataViewColorRamp: {
		[kToPrimitive]: () => 0x4a0b47e4,
		[kPropertyId]: 0x4a0b47e4,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Data overlay to display.
	 */
	DataViewDataSource: 0x4a0b47e5,
	/**
	 * Override value for undeveloped zone opacity (0-255).
	 */
	DataViewZoneOpacity: {
		[kToPrimitive]: () => 0x4a0b47e6,
		[kPropertyId]: 0x4a0b47e6,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If true, data map is interpolated to city cell resolution.
	 */
	DataViewInterpolateData: {
		[kToPrimitive]: () => 0x4a0b47e7,
		[kPropertyId]: 0x4a0b47e7,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Force data to be uniform over lots, possibly of a specific type.
	 */
	DataViewQuantizeLots: 0x4a0b47e8,
	/**
	 * Selects building types for coverage rings and highlights.
	 */
	DataViewHighlightMode: 0x4a0b47e9,
	/**
	 * Specifies visual effect for coverage rings.
	 */
	DataViewCoverageEffect: {
		[kToPrimitive]: () => 0x4a0b47ea,
		[kPropertyId]: 0x4a0b47ea,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Specifies a CLSID of special code to create a custom view.
	 */
	DataViewCustomView: 0x4a0b47eb,
	/**
	 * Specifies a scaling factor for 16-bit maps.
	 */
	DataViewMaximumScale: 0x4a0b47ec,
	/**
	 * Specifies a layer subtype for development layers (R$, CO$$, etc.)
	 */
	DataViewDemandType: 0x4a0b47ed,
	/**
	 * Enables coverage circles for current highlight type with given color
	 * (0xRRGGBB, HTML-style).
	 */
	DataViewCoverageCircleColor: 0x4a0b47ee,
	/**
	 * Shows highlighted buildings on 2D map with given color (0xAARRGGBB).
	 */
	DataViewHighlightColor: 0x4a0b47ef,
	/**
	 * If true, developed lots will show up as plain zone coloring.
	 */
	DataViewForceZones: {
		[kToPrimitive]: () => 0x4a0b47f0,
		[kPropertyId]: 0x4a0b47f0,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Sets which networks are visible.
	 */
	DataViewNetworkVislevel: {
		[kToPrimitive]: () => 0x4a0b47f1,
		[kPropertyId]: 0x4a0b47f1,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Set Color for legend on Data view
	 */
	DataViewLegendsColor: {
		[kToPrimitive]: () => 0x4a0b47f2,
		[kPropertyId]: 0x4a0b47f2,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * GUID for ledgend Text GroupID, GUID
	 */
	DataViewLegendsGUIDS: {
		[kToPrimitive]: () => 0x4a0b47f3,
		[kPropertyId]: 0x4a0b47f3,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Selects building types for coverage rings and highlights.
	 */
	DataViewLegendsHeader: 0x4a0b47f4,
	/**
	 * Displays zone coloring in the 2D map.
	 */
	DataViewShowZoneMap: {
		[kToPrimitive]: () => 0x4a0b47f5,
		[kPropertyId]: 0x4a0b47f5,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Range of hours on 24-hour clock (0-23) when prop will be at state 0
	 * (visible).  If start and end times are both 0, always visible.
	 */
	PropTimeOfDay: {
		[kToPrimitive]: () => 0x4a149631,
		[kPropertyId]: 0x4a149631,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * What is the highest tax rate you can set before demand suffers?
	 */
	DemandNeutralTaxRateVsPopulation: {
		[kToPrimitive]: () => 0x4a1f38b5,
		[kPropertyId]: 0x4a1f38b5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much is demand impacted by tax rates above or below neutral?
	 */
	DemandTaxModifierVsRateVariance: {
		[kToPrimitive]: () => 0x4a1f38b6,
		[kPropertyId]: 0x4a1f38b6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How long a high tax rate depresses demand (even after it is lowered)
	 */
	DemandDaysOfTaxPenalty: 0x4a1f38b7,
	/**
	 * Relief for first connection (more have diminishing returns)
	 */
	DemandCommercicalCapReliefForConnections: {
		[kToPrimitive]: () => 0x4a1f38c5,
		[kPropertyId]: 0x4a1f38c5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Relief per connected Co population
	 */
	DemandCommercicalCapReliefForAirports: {
		[kToPrimitive]: () => 0x4a1f38c6,
		[kPropertyId]: 0x4a1f38c6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Relief per industrial trip
	 */
	DemandCommercicalCapReliefForSeaports: {
		[kToPrimitive]: () => 0x4a1f38c7,
		[kPropertyId]: 0x4a1f38c7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Relief per neighbor trip
	 */
	DemandIndustrialCapReliefForTrips: {
		[kToPrimitive]: () => 0x4a1f38c8,
		[kPropertyId]: 0x4a1f38c8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Relief per connected Co population
	 */
	DemandIndustrialCapReliefForAirports: {
		[kToPrimitive]: () => 0x4a1f38c9,
		[kPropertyId]: 0x4a1f38c9,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Relief per industrial trip
	 */
	DemandIndustrialCapReliefForSeaports: {
		[kToPrimitive]: () => 0x4a1f38ca,
		[kPropertyId]: 0x4a1f38ca,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * List of IDs corresponding to Demand Modifiers
	 */
	NationDemandIDList: 0x4a1f629f,
	/**
	 * Demand boost over time
	 */
	NationDefaultDemandModifierVsMonth: {
		[kToPrimitive]: () => 0x4a1f62a0,
		[kPropertyId]: 0x4a1f62a0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier1VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a1,
		[kPropertyId]: 0x4a1f62a1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier2VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a2,
		[kPropertyId]: 0x4a1f62a2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier3VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a3,
		[kPropertyId]: 0x4a1f62a3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier4VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a4,
		[kPropertyId]: 0x4a1f62a4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier5VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a5,
		[kPropertyId]: 0x4a1f62a5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier6VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a6,
		[kPropertyId]: 0x4a1f62a6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier7VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a7,
		[kPropertyId]: 0x4a1f62a7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier8VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a8,
		[kPropertyId]: 0x4a1f62a8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier9VsMonth: {
		[kToPrimitive]: () => 0x4a1f62a9,
		[kPropertyId]: 0x4a1f62a9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier10VsMonth: {
		[kToPrimitive]: () => 0x4a1f62b0,
		[kPropertyId]: 0x4a1f62b0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier11VsMonth: {
		[kToPrimitive]: () => 0x4a1f62b1,
		[kPropertyId]: 0x4a1f62b1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost over time
	 */
	NationDemandModifier12VsMonth: {
		[kToPrimitive]: () => 0x4a1f62b2,
		[kPropertyId]: 0x4a1f62b2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Demand boost, indexed by difficulty
	 */
	NationDifficultyDemandModifier: {
		[kToPrimitive]: () => 0x4a1f6300,
		[kPropertyId]: 0x4a1f6300,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of seconds the construction crew will spend per tile while
	 * building network
	 */
	ConstructionCrewTime: {
		[kToPrimitive]: () => 0x4a270db0,
		[kPropertyId]: 0x4a270db0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Speed of construction crew vehicles in meters/second
	 */
	ConstructionCrewVehicleSpeed: {
		[kToPrimitive]: () => 0x4a270e94,
		[kPropertyId]: 0x4a270e94,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Instance ID of construction crew lead vehicle
	 */
	ConstructionCrewLeadVehicleInstance: 0x4a271248,
	/**
	 * Instance ID of construction crew follow vehicle
	 */
	ConstructionCrewFollowVehicleInstance: 0x4a27124f,
	/**
	 * Type of path used by construction crew vehicles (0=None, 1=Auto, 2=Ped,
	 * 3=Train, 4=Subway
	 */
	ConstructionCrewVehiclePathType: 0x4a275748,
	/**
	 * The rate at which garbage decays in units per month
	 */
	LandfillGarbageDecayRate: {
		[kToPrimitive]: () => 0x4a280510,
		[kPropertyId]: 0x4a280510,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The altitude variance of the landfill zone before levelling will take
	 * place
	 */
	LandfillLevelToleranceThreshold: {
		[kToPrimitive]: () => 0x4a280513,
		[kPropertyId]: 0x4a280513,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to create a tile of network using this tool
	 */
	SimoleanCostPerTile: 0x4a2d49b9,
	/**
	 * Bits 0 - 3 indicate which sides of the lot require a road (before
	 * rotation).Side ordering is SC4 standard (0 = left side, 1 = top side, etc.
	 */
	LotConfigRequiredRoads: {
		[kToPrimitive]: () => 0x4a4a88f0,
		[kPropertyId]: 0x4a4a88f0,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		Left: 0x00000001,
		Behind: 0x00000002,
		Right: 0x00000004,
		Front: 0x00000008,
		LeftCorner: 0x00000009,
		RightCorner: 0x0000000c,
	},
	/**
	 * Solidification Rate for the Flow of VolcanoLava (Input Time in Fraction
	 * from [0, 1])
	 */
	VolcanoLavaCurveSolidifcationRate: {
		[kToPrimitive]: () => 0x4a4bc714,
		[kPropertyId]: 0x4a4bc714,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound played when building goes online.
	 */
	SFXActivateSound: {
		[kToPrimitive]: () => 0x4a4c132e,
		[kPropertyId]: 0x4a4c132e,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		CoalPowerUp: 0xaa4c4718,
		HydrogenPowerUp: 0x2a4c42b3,
		NaturalGasPowerUp: 0xca4c4395,
		NuclearPowerUp: 0xea4c4755,
		OilPowerUp: 0xea4c4790,
		SolarPowerUp: 0x0a4c44bf,
		WindPowerUp: 0x6a4c4490,
		WasteToEnergyPowerUp: 0x4a4c47b0,
		WaterPump: 0x0a55aaec,
		WaterPurificationPlant: 0x2a55b1b1,
	},
	/**
	 * Maps city population to a multiplier (0.0-1.0) for bus density
	 */
	BusDensityCurve: {
		[kToPrimitive]: () => 0x4a511873,
		[kPropertyId]: 0x4a511873,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Cost to place a power pole using the power line tool
	 */
	PowerPolePlacementCost: 0x4a5f5953,
	/**
	 * Radius in cells, Max effect, and min effect for each developer
	 */
	DesirabilityEffectValues: {
		[kToPrimitive]: () => 0x4a5f7315,
		[kPropertyId]: 0x4a5f7315,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Growth Developer IDs to go with next property
	 */
	DesirabilityEffectIDs: 0x4a5f7c4b,
	/**
	 * Maximum amount of garbage units the valve can hold
	 */
	MaxGarbageOnValve: 0x4a652679,
	/**
	 * Amount of garbage units each landfill tile can hold
	 */
	LandfillTileCapacity: 0x4a65267a,
	/**
	 * Input: park efficiency (0-100)  Output: Chance of zoo escape each month
	 * (0-100)
	 */
	ZooEscapeChanceCurve: {
		[kToPrimitive]: () => 0x4a6676ad,
		[kPropertyId]: 0x4a6676ad,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * The max total amount of garbage units taken in by landfills monthly
	 */
	LandfillTotalMaxGarbageMonthly: 0x4a677e5b,
	/**
	 * The max amount of garbage units taken in by each landfill monthly
	 */
	LandfillMonthlyMaxGarbagePerLandfill: 0x4a677e5c,
	/**
	 * Flag indicating whether or not to move landfill tiles with terrain
	 */
	LandfillMoveLandfillTilesWithTerrain: {
		[kToPrimitive]: () => 0x4a677e5d,
		[kPropertyId]: 0x4a677e5d,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * The max amount of garbage units to decay in each landfill monthly
	 */
	LandfillMonthlyMaxGarbageDecayedPerLandfill: 0x4a677e5e,
	/**
	 * Monthly maintenance cost of a landfill cell (can be overridden by the
	 * model budghet cost property)
	 */
	LandfillDefaultLandfillCellMaintenanceCost: {
		[kToPrimitive]: () => 0x4a677e5f,
		[kPropertyId]: 0x4a677e5f,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Lower scores means more side explorations but also more CPU time
	 */
	NearestDestinationAttractiveness: {
		[kToPrimitive]: () => 0x4a678060,
		[kPropertyId]: 0x4a678060,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Add this property only if prop states are visually depicted by different
	 * frames in an animated model instance
	 */
	StatesAsFrames: {
		[kToPrimitive]: () => 0x4a70d491,
		[kPropertyId]: 0x4a70d491,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Random chance (0-100) of this prop appearing according to time-of-day and
	 * simulator date
	 */
	PropRandomChance: {
		[kToPrimitive]: () => 0x4a751ad5,
		[kPropertyId]: 0x4a751ad5,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How long in simulator days the prop will stay active once triggered
	 */
	SimulatorDateDuration: 0x4a764564,
	/**
	 * Minimum music volume level setting for slider in audio prefs (0-1024)
	 */
	AudioMinMusicVolumeLevel: 0x4a7cb3ba,
	/**
	 * Minimum sound volume level setting for slider in audio prefs (0-1024)
	 */
	AudioMinSoundVolumeLevel: 0x4a7cb3bb,
	/**
	 * Max music volume level setting for slider in audio prefs (0-1024)
	 */
	AudioMaxMusicVolumeLevel: 0x4a7cb3bc,
	/**
	 * Max sound volume level setting for slider in audio prefs (0-1024)
	 */
	AudioMaxSoundVolumeLevel: 0x4a7cb3bd,
	/**
	 * Amount by which to adjust music volume such that at 80 percent it matches
	 * the sfx volume at full
	 */
	AudioMusicVolAdjustment: 0x4a7cb3be,
	/**
	 * Time (in ms) within which music fades out when switching radio stations
	 */
	AudioMusicFadeoutTimeMs: 0x4a7cb3bf,
	/**
	 * If set to true, the prop will appear in the building plop preview
	 */
	Previewable: {
		[kToPrimitive]: () => 0x4a89fcf3,
		[kPropertyId]: 0x4a89fcf3,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Max playing sounds
	 */
	AudioMaxPlayingSounds: 0x4a946a5d,
	/**
	 * Set if prop has a light mask and should light up at night with the lot
	 * building.
	 */
	Light: {
		[kToPrimitive]: () => 0x4a9f188b,
		[kPropertyId]: 0x4a9f188b,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Layer volume smoothing delta limit
	 */
	AudioLayerVolumeSmoothDelta: 0x4aa03db1,
	/**
	 * Value for displaying capacity in the catalog - not simulated
	 */
	CatalogCapacity: 0x4aa60ebc,
	/**
	 * Value for displaying maximum capacity (last stage) in the catalog - not
	 * simulated
	 */
	MaximumCatalogCapacity: 0x4aa60ebd,
	/**
	 * Value for displaying maximum monthly cost (last stage) in the catalog -
	 * not simulated
	 */
	MaximumCatalogCost: {
		[kToPrimitive]: () => 0x4aa60ebe,
		[kPropertyId]: 0x4aa60ebe,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Value for displaying maximum plop cost (last stage) in the catalog - not
	 * simulated
	 */
	MaximumPlopCost: 0x4aa60ebf,
	/**
	 * Value for displaying alternative capacity (other than port) in the
	 * catalog - not simulated
	 */
	AltCatalogCapacity: 0x4aa60ec0,
	/**
	 * Value for displaying maximum alternative capacity (other than port) in
	 * the catalog - not simulated
	 */
	MaximumAltCatalogCapacity: 0x4aa60ec1,
	/**
	 * Value for displaying maximum alternate monthly cost (other than port) in
	 * the catalog - not simulated
	 */
	MaximumAltCatalogCost: {
		[kToPrimitive]: () => 0x4aa60ec2,
		[kPropertyId]: 0x4aa60ec2,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Max EQ boost achievable without reward buildings.  Used to scale values
	 * for Sims opinion polls.
	 */
	MaximumEQBoost: {
		[kToPrimitive]: () => 0x4aa84161,
		[kPropertyId]: 0x4aa84161,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percent chance (0-100.0) that the effect will play for a tract that's at
	 * death's door.
	 */
	DeathsDoorEffectChance: {
		[kToPrimitive]: () => 0x4ab70dac,
		[kPropertyId]: 0x4ab70dac,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Random height variance for effect for a tract that's at death's door.
	 */
	DeathsDoorEffectHeightDelta: {
		[kToPrimitive]: () => 0x4ab71659,
		[kPropertyId]: 0x4ab71659,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * For each taxable square of the given land value, the number of Simoleans
	 * produced
	 */
	BudgetLandValueToSimoleans: {
		[kToPrimitive]: () => 0x4ac519b8,
		[kPropertyId]: 0x4ac519b8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps true simulation cost to synthetic cost value used by garbage deals.
	 */
	NDe_MaxUnitCostForGarbageDealsRCurve: {
		[kToPrimitive]: () => 0x4b61ffc9,
		[kPropertyId]: 0x4b61ffc9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Player-visible name of this automaton during query
	 */
	AutomatonDisplayName: {
		[kToPrimitive]: () => 0x4b733e12,
		[kPropertyId]: 0x4b733e12,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Multiply by default speed on road, rail, highway, street, pipe,
	 * powerline, avenue, subway, light rail, monorail, 1-way road, dirt road,
	 * ground highway
	 */
	SpeedMultiplierByNetwork: {
		[kToPrimitive]: () => 0x4bae8fe0,
		[kPropertyId]: 0x4bae8fe0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Cost to add per vehicle when deciding whether to switch lanes to pass
	 * slower-moving vehicles
	 */
	LaneSwitchCost: {
		[kToPrimitive]: () => 0x4bae8fe1,
		[kPropertyId]: 0x4bae8fe1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max distance in meters that a vehicle will switch lanes on a multi-lane
	 * network
	 */
	LaneSwitchMaxDistance: {
		[kToPrimitive]: () => 0x4bae8fe2,
		[kPropertyId]: 0x4bae8fe2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps congestion to accident probablity
	 */
	CongestionToAccidentProbability: {
		[kToPrimitive]: () => 0x4be09ec9,
		[kPropertyId]: 0x4be09ec9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps capacity to accident probablity
	 */
	CapacityToAccidentProbability: {
		[kToPrimitive]: () => 0x4be09eca,
		[kPropertyId]: 0x4be09eca,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Time (in seconds) that a traffic accident lasts
	 */
	AccidentDuration: {
		[kToPrimitive]: () => 0x4be09ecb,
		[kPropertyId]: 0x4be09ecb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Period (in seconds) that the traffic sim tests for accidents
	 */
	AccidentCheckPeriod: {
		[kToPrimitive]: () => 0x4be09ecc,
		[kPropertyId]: 0x4be09ecc,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If true, this building radiates capacity reduction like intersections
	 */
	TransitSwitchCapacityEffect: {
		[kToPrimitive]: () => 0x4bfc47b0,
		[kPropertyId]: 0x4bfc47b0,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * AEMS Volume curve
	 */
	AudioAEMSVolumeCurve: {
		[kToPrimitive]: () => 0x4bfdd955,
		[kPropertyId]: 0x4bfdd955,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Height that clouds float at
	 */
	MtnCloudsHeight: {
		[kToPrimitive]: () => 0x66fbf7a9,
		[kPropertyId]: 0x66fbf7a9,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Lowest terrain height that clouds form over
	 */
	MtnCloudsFormHeight: {
		[kToPrimitive]: () => 0x66fbf7aa,
		[kPropertyId]: 0x66fbf7aa,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Lowest terrain height that clouds have max opacity
	 */
	MtnCloudsFadeInHeight: {
		[kToPrimitive]: () => 0x66fbf7ab,
		[kPropertyId]: 0x66fbf7ab,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terrain height above which clouds begin to fade
	 */
	MtnCloudsFadeOutHeight: {
		[kToPrimitive]: () => 0x66fbf7ac,
		[kPropertyId]: 0x66fbf7ac,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terrain height above which clouds fade completely
	 */
	MtnCloudsDisperseHeight: {
		[kToPrimitive]: () => 0x66fbf7ad,
		[kPropertyId]: 0x66fbf7ad,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terrain height above which clouds begin to slow
	 */
	MtnCloudsSlowDownHeight: {
		[kToPrimitive]: () => 0x66fbf7ae,
		[kPropertyId]: 0x66fbf7ae,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Terrain height above which clouds stop completely
	 */
	MtnCloudsStopHeight: {
		[kToPrimitive]: () => 0x66fbf7af,
		[kPropertyId]: 0x66fbf7af,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min and Max of cloud size variation (meters)
	 */
	MtnCloudsSizeRange: {
		[kToPrimitive]: () => 0x66fbf7b0,
		[kPropertyId]: 0x66fbf7b0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max of cloud aspect ratio variation (0-1)
	 */
	MtnCloudsAspectRange: {
		[kToPrimitive]: () => 0x66fbf7b1,
		[kPropertyId]: 0x66fbf7b1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max of cloud opacity variation (0-1)
	 */
	MtnCloudsOpacityRange: {
		[kToPrimitive]: () => 0x66fbf7b2,
		[kPropertyId]: 0x66fbf7b2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max of cloud intensity variation (0-1)
	 */
	MtnCloudsIntensityRange: {
		[kToPrimitive]: () => 0x66fbf7b3,
		[kPropertyId]: 0x66fbf7b3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max of cloud speed variation (meters/msec)
	 */
	MtnCloudsSpeedRange: {
		[kToPrimitive]: () => 0x66fbf7b4,
		[kPropertyId]: 0x66fbf7b4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max scale factors for ShadeOffsetDir
	 */
	MtnCloudsShadeOffsetRange: {
		[kToPrimitive]: () => 0x66fbf7b5,
		[kPropertyId]: 0x66fbf7b5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min and Max radii in world units where clouds are hidden by cursor.
	 */
	MtnCloudsCursorHideRange: {
		[kToPrimitive]: () => 0x66fbf7b6,
		[kPropertyId]: 0x66fbf7b6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * brightness of shadow quad as % of highlight (0-1)
	 */
	MtnCloudsShadeIntensity: {
		[kToPrimitive]: () => 0x66fbf7b8,
		[kPropertyId]: 0x66fbf7b8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier for cloud speed based on sim speed. Slow Med Fast Paused
	 */
	MtnCloudsSimSpeedFactor: {
		[kToPrimitive]: () => 0x66fbf7ba,
		[kPropertyId]: 0x66fbf7ba,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * X and Y(Z) offset of shade quad as a ratio of particle size (0-1)
	 */
	MtnCloudsShadeOffsetDir: {
		[kToPrimitive]: () => 0x66fbf7bb,
		[kPropertyId]: 0x66fbf7bb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max # of cloud particles that can exist at once
	 */
	MtnCloudsMaxParticles: 0x66fbf7bc,
	/**
	 * Min time for particles to fade in when they spawn visible, or to fade out
	 * when they die due to age. (Milliseconds)
	 */
	MtnCloudsMinFadeInTime: {
		[kToPrimitive]: () => 0x66fbf7bd,
		[kPropertyId]: 0x66fbf7bd,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max particle lifetime (Milliseconds)
	 */
	MtnCloudsParticleMaxAge: {
		[kToPrimitive]: () => 0x66fbf7be,
		[kPropertyId]: 0x66fbf7be,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Particle spawning rate (Particles per second)
	 */
	MtnCloudsParticleGenRate: {
		[kToPrimitive]: () => 0x66fbf7bf,
		[kPropertyId]: 0x66fbf7bf,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * if true, particles are still simulated outside of regions where clouds
	 * are visible
	 */
	MtnCloudsAllowHiddenParticles: {
		[kToPrimitive]: () => 0x66fbf7c0,
		[kPropertyId]: 0x66fbf7c0,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Percent of normal opacity by zoom level. Set to 0 to disable a particular
	 * zoom. Top is zoom 1 bottom is zoom 5
	 */
	MtnCloudsZoomFade: {
		[kToPrimitive]: () => 0x66fbf7c1,
		[kPropertyId]: 0x66fbf7c1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * 0.0-100.0, See ISC4PoliceSimulator.h
	 */
	PoliceMaxJailOvercrowdingPercentage: {
		[kToPrimitive]: () => 0x68ddae92,
		[kPropertyId]: 0x68ddae92,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * See ISC4PoliceSimulator.h
	 */
	PoliceFundingToEfficiencyResponseCurve: {
		[kToPrimitive]: () => 0x68ddae93,
		[kPropertyId]: 0x68ddae93,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * 0.0-100.0, See ISC4PoliceSimulator.h
	 */
	PoliceMaxAllowedFundingPercentage: {
		[kToPrimitive]: () => 0x68ddae95,
		[kPropertyId]: 0x68ddae95,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * 0.0-100.0, See ISC4PoliceSimulator.h
	 */
	PoliceMonthlyCriminalRehabilitationPercent: {
		[kToPrimitive]: () => 0x68ddae97,
		[kPropertyId]: 0x68ddae97,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * 0.0-100.0, See ISC4PoliceSimulator.h
	 */
	PoliceStrikeEfficiency: {
		[kToPrimitive]: () => 0x68ddae9a,
		[kPropertyId]: 0x68ddae9a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * In days. See ISC4PoliceSimulator.h
	 */
	PoliceMaxStrikeDuration: 0x68ddae9b,
	/**
	 * 0.0-100.0, See ISC4PoliceSimulator.h
	 */
	PoliceMinFundingToEndStrikes: {
		[kToPrimitive]: () => 0x68ddae9c,
		[kPropertyId]: 0x68ddae9c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * See ISC4PoliceSimulator.h
	 */
	PoliceStrikeResponseCurve: {
		[kToPrimitive]: () => 0x68ddae9e,
		[kPropertyId]: 0x68ddae9e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If crime is committed in a cell whose police protection value is above
	 * this, they'll get arrested
	 */
	PoliceArrestThreshold: 0x68ddae9f,
	/**
	 * See ISC4PoliceSimulator.h
	 */
	JailFundingToEfficiencyResponseCurve: {
		[kToPrimitive]: () => 0x68ddaea0,
		[kPropertyId]: 0x68ddaea0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of people that can be served by this recycling center
	 */
	RecyclingCenterPopulationServed: 0x68ed1736,
	/**
	 * Radii of pollution (in cells) generated by the building, for each type
	 * (air, water, garbage, radiation).
	 */
	PollutionRadii: {
		[kToPrimitive]: () => 0x68ee9764,
		[kPropertyId]: 0x68ee9764,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * RGBA color of 3D overlay of 2-color map view
	 */
	MapViewUnsignedColors: {
		[kToPrimitive]: () => 0x68f26014,
		[kPropertyId]: 0x68f26014,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * RGBA color of 3D overlay of 3-color map view
	 */
	MapViewSignedColors: {
		[kToPrimitive]: () => 0x68f26015,
		[kPropertyId]: 0x68f26015,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Number of cells surrounding water pipes that will also be watered
	 */
	WaterPipeEffectRadius: 0x68f5436a,
	/**
	 * Number of cells away from fresh water a water pump can be placed
	 */
	FreshWaterPumpReach: 0x68f5436b,
	/**
	 * Number of cells away from salt water a water pump can be placed
	 */
	SaltWaterPumpReach: 0x68f5436c,
	/**
	 * Percentace by which water production is reduced when not within range of
	 * fresh water source
	 */
	FreshWaterDistanceLoss: 0x68f5436d,
	/**
	 * Texture IDs for each zoom level. Mutally exclusive with building model
	 * properties.
	 */
	kSC4FoundationPropertySideTextures: {
		[kToPrimitive]: () => 0x68fcff37,
		[kPropertyId]: 0x68fcff37,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Texture IDs for each zoom level. Mutally exclusive with building model
	 * properties.
	 */
	kSC4FoundationPropertyTopTextures: {
		[kToPrimitive]: () => 0x68fcff38,
		[kPropertyId]: 0x68fcff38,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % of a
	 * utility output
	 */
	PowerFundingToEfficiencyCurve: {
		[kToPrimitive]: () => 0x6911e2df,
		[kPropertyId]: 0x6911e2df,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % chance
	 * of a Health strike
	 */
	HealthStrikeResponseCurve: {
		[kToPrimitive]: () => 0x691894a4,
		[kPropertyId]: 0x691894a4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Minimum grade that all schools must have to end a School strike
	 */
	SchoolMinGradeToEndStrike: {
		[kToPrimitive]: () => 0x691894c0,
		[kPropertyId]: 0x691894c0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % of
	 * Education output
	 */
	SchoolFundingToEfficiencyCurve: {
		[kToPrimitive]: () => 0x691894c6,
		[kPropertyId]: 0x691894c6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Radius of a school's coverage, in meters.
	 */
	SchoolCoverageRadius: {
		[kToPrimitive]: () => 0x691b42b3,
		[kPropertyId]: 0x691b42b3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of patients served by this hospital.
	 */
	HospitalPatientCapacity: 0x69220415,
	/**
	 * HQ assigned to new Medium Wealth residents
	 */
	MediumWealthHQ: {
		[kToPrimitive]: () => 0x6929cc92,
		[kPropertyId]: 0x6929cc92,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects the rate at
	 * which EQ decays
	 */
	SchoolEQDecayEffect: {
		[kToPrimitive]: () => 0x692ef65a,
		[kPropertyId]: 0x692ef65a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Distance (meters) from the shore to the starting location of waves
	 */
	DistFromShoreToWaveStartLocation: {
		[kToPrimitive]: () => 0x6932dc00,
		[kPropertyId]: 0x6932dc00,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min time (sec) between the production of successive waves
	 */
	WaveMinProductionInterval: {
		[kToPrimitive]: () => 0x6932dc01,
		[kPropertyId]: 0x6932dc01,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max time (sec) between the production of successive waves
	 */
	WaveMaxProductionInterval: {
		[kToPrimitive]: () => 0x6932dc02,
		[kPropertyId]: 0x6932dc02,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Inner radius (meter) of the wave arc
	 */
	WaveInnerRadius: {
		[kToPrimitive]: () => 0x6932dc03,
		[kPropertyId]: 0x6932dc03,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Outer radius (meter) of the wave arc
	 */
	WaveOuterRadius: {
		[kToPrimitive]: () => 0x6932dc04,
		[kPropertyId]: 0x6932dc04,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Arc angle (degrees) for the wave
	 */
	WaveArcAngle: {
		[kToPrimitive]: () => 0x6932dc05,
		[kPropertyId]: 0x6932dc05,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min time (sec) the wave spends in each of the states
	 */
	WaveMinTimeInState: {
		[kToPrimitive]: () => 0x6932dc06,
		[kPropertyId]: 0x6932dc06,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max time (sec) the wave spends in each of the states
	 */
	WaveMaxTimeInState: {
		[kToPrimitive]: () => 0x6932dc07,
		[kPropertyId]: 0x6932dc07,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Initial movement speed (meter/sec) of  the wave
	 */
	WaveInitialMoveSpeed: {
		[kToPrimitive]: () => 0x6932dc08,
		[kPropertyId]: 0x6932dc08,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Initial expansion speed (meter/sec) of  the wave
	 */
	WaveInitialExpandSpeed: {
		[kToPrimitive]: () => 0x6932dc09,
		[kPropertyId]: 0x6932dc09,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min movement speed (meter/sec) of  the wave
	 */
	WaveMinMoveSpeed: {
		[kToPrimitive]: () => 0x6932dc0a,
		[kPropertyId]: 0x6932dc0a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min expansion speed (meter/sec) of  the wave
	 */
	WaveMinExpandSpeed: {
		[kToPrimitive]: () => 0x6932dc0b,
		[kPropertyId]: 0x6932dc0b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max movement speed (meter/sec) of  the wave
	 */
	WaveMaxMoveSpeed: {
		[kToPrimitive]: () => 0x6932dc0c,
		[kPropertyId]: 0x6932dc0c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max expansion speed (meter/sec) of  the wave
	 */
	WaveMaxExpandSpeed: {
		[kToPrimitive]: () => 0x6932dc0d,
		[kPropertyId]: 0x6932dc0d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min acceleration of expansion in each of the states
	 */
	WaveMinExpandAcceleration: {
		[kToPrimitive]: () => 0x6932dc0e,
		[kPropertyId]: 0x6932dc0e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max acceleration of expansion in each of the states
	 */
	WaveMaxExpandAcceleration: {
		[kToPrimitive]: () => 0x6932dc0f,
		[kPropertyId]: 0x6932dc0f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min acceleration of movement in each of the states
	 */
	WaveMinMoveAcceleration: {
		[kToPrimitive]: () => 0x6932dc10,
		[kPropertyId]: 0x6932dc10,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max acceleration of movement in each of the states
	 */
	WaveMaxMoveAcceleration: {
		[kToPrimitive]: () => 0x6932dc11,
		[kPropertyId]: 0x6932dc11,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of waves in the city
	 */
	MaxWaves: 0x6932dc12,
	/**
	 * Gap (meters) between two waves
	 */
	InterWaveGap: {
		[kToPrimitive]: () => 0x6932dc13,
		[kPropertyId]: 0x6932dc13,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum difference in the orientation of different waves
	 */
	WaveMaxOrientationDifference: {
		[kToPrimitive]: () => 0x6932dc14,
		[kPropertyId]: 0x6932dc14,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps HQ of a tract to the Life Expectancy of that tract
	 */
	HealthQuotientToLifeExpectancyCurve: {
		[kToPrimitive]: () => 0x6941a67f,
		[kPropertyId]: 0x6941a67f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps amount of air pollution in a tract to the rate at which the HQ in
	 * that tract decays
	 */
	AirPollutionToHQDecayCurve: {
		[kToPrimitive]: () => 0x6941b022,
		[kPropertyId]: 0x6941b022,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Affects how traffic density equates to air pollution
	 */
	TrafficAirPollutionFactor: {
		[kToPrimitive]: () => 0x69501944,
		[kPropertyId]: 0x69501944,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Zone types compatible with crime (none == can appear in any zone)
	 */
	ZoneFilter: {
		[kToPrimitive]: () => 0xaa12fcb2,
		[kPropertyId]: 0xaa12fcb2,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Number of pixels in color gradient corresponding to every meter of lava
	 * depth
	 */
	LavaColorGradientMapFactor: {
		[kToPrimitive]: () => 0x69987e60,
		[kPropertyId]: 0x69987e60,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Higher the viscosity, lower should this number be.
	 */
	LavaMaxFlowRate: {
		[kToPrimitive]: () => 0x69987e61,
		[kPropertyId]: 0x69987e61,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Lava height differential at which the max flow rate is reached
	 */
	LavaHtDiffForMaxFlowRate: {
		[kToPrimitive]: () => 0x69987e62,
		[kPropertyId]: 0x69987e62,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When unit amount of lava solidifies, it increases the terrain height by
	 * this much
	 */
	LavaLiquidToSolidConversionFactor: {
		[kToPrimitive]: () => 0x69987e63,
		[kPropertyId]: 0x69987e63,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min alpha for lava
	 */
	LavaMinAlpha: {
		[kToPrimitive]: () => 0x69987e64,
		[kPropertyId]: 0x69987e64,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * When the lava depth is less than this, we set alpha to be LavaMinAlpha
	 */
	LavaMinAlphaDepth: {
		[kToPrimitive]: () => 0x69987e65,
		[kPropertyId]: 0x69987e65,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If lava depth is more than this, it becomes opaque (i.e., max alpha)
	 */
	LavaMaxAlphaDepth: {
		[kToPrimitive]: () => 0x69987e66,
		[kPropertyId]: 0x69987e66,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Width of scorched terrain decal (meters)
	 */
	LavaScorchedTerrainDecalSize: {
		[kToPrimitive]: () => 0x69987e67,
		[kPropertyId]: 0x69987e67,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Solidification rate under water this many times that over land
	 */
	LavaUnderWaterSolidificationMultiple: {
		[kToPrimitive]: () => 0x69987e68,
		[kPropertyId]: 0x69987e68,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The lava depth at which occupants will catch on fire
	 */
	LavaDepthBurnThreshold: {
		[kToPrimitive]: () => 0x69987e69,
		[kPropertyId]: 0x69987e69,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The lava depth at which occupants will instantly burn down
	 */
	LavaDepthDeepFryThreshold: {
		[kToPrimitive]: () => 0x69987e6a,
		[kPropertyId]: 0x69987e6a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Duration of each lava texture animation frame (microsecs)
	 */
	LavaAnimationFrameDuration: 0x69987e6b,
	/**
	 * If lava amount is less than this, we don't deposit it (We simply dry it
	 * up!)
	 */
	LavaMinAmountForDepositToHappen: {
		[kToPrimitive]: () => 0x69987e6c,
		[kPropertyId]: 0x69987e6c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Life time of scorch decal(microsecs)
	 */
	LavaScorchDecalLifeTime: 0x69987e6d,
	/**
	 * Fade in time (Secs) of scorch decal
	 */
	LavaScorchDecalFadeInTime: {
		[kToPrimitive]: () => 0x69987e6e,
		[kPropertyId]: 0x69987e6e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Fade out time (Secs) of scorch decal
	 */
	LavaScorchDecalFadeOutTime: {
		[kToPrimitive]: () => 0x69987e6f,
		[kPropertyId]: 0x69987e6f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The Min slope this lot will develop on
	 */
	LotConfigPropertyMinSlopeAllowed: {
		[kToPrimitive]: () => 0x699b08a4,
		[kPropertyId]: 0x699b08a4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the IResource occupant
	 * type's taxes
	 */
	BudgetTaxRateOccWeight_IResource: {
		[kToPrimitive]: () => 0x69a36e40,
		[kPropertyId]: 0x69a36e40,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Shares of garbage props requested vs. garbage percentage of max
	 */
	GarbagePropRequestCurve: {
		[kToPrimitive]: () => 0x69a437f6,
		[kPropertyId]: 0x69a437f6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If the water depth exceeds this, we apply deep seabed texture
	 */
	MinWaterDepthForDeepSeaBedTexture: {
		[kToPrimitive]: () => 0x69ac5640,
		[kPropertyId]: 0x69ac5640,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Upto this water depth we use deep seabed texture for terrain (No
	 * texturing beyond that depth)
	 */
	MaxWaterDepthForDeepSeaBedTexture: {
		[kToPrimitive]: () => 0x69ac5641,
		[kPropertyId]: 0x69ac5641,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * (0.0 - 1.0)
	 */
	FireProtectionSimStationNoRoadMultiplier: {
		[kToPrimitive]: () => 0x69b425db,
		[kPropertyId]: 0x69b425db,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls how often terrain texture updates happen while applying terrain
	 * brushes
	 */
	TextureUpdateIntervalForTerrainBrushes: 0x69db8d00,
	/**
	 * Controls how the brush strength is modified by the control key
	 */
	ModKey1StrengthMultiplier: {
		[kToPrimitive]: () => 0x69db8d01,
		[kPropertyId]: 0x69db8d01,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls how the brush strength is modified by the control key
	 */
	ModKey1WidthMultiplier: {
		[kToPrimitive]: () => 0x69db8d02,
		[kPropertyId]: 0x69db8d02,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls how the brush strength is modified by the shift key
	 */
	ModKey2StrengthMultiplier: {
		[kToPrimitive]: () => 0x69db8d03,
		[kPropertyId]: 0x69db8d03,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Controls how the brush strength is modified by the shift key
	 */
	ModKey2WidthMultiplier: {
		[kToPrimitive]: () => 0x69db8d04,
		[kPropertyId]: 0x69db8d04,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Time interval (secs) between applications to get full brush strength
	 */
	ApplicationTimeIntervalForFullBrushStrength: {
		[kToPrimitive]: () => 0x69db8d05,
		[kPropertyId]: 0x69db8d05,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Prop rotates x/z to match slope.
	 */
	OrientToSlope: {
		[kToPrimitive]: () => 0x69f14d33,
		[kPropertyId]: 0x69f14d33,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (0.0-1.0) of actual crimes in a cell that will generate a
	 * corresponding crime sim
	 */
	CrimeSimMultiplier: {
		[kToPrimitive]: () => 0x6a09f62f,
		[kPropertyId]: 0x6a09f62f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min and Max number of times a one-shot sim will loop through its
	 * animation before fading out
	 */
	SimPropAnimRange: {
		[kToPrimitive]: () => 0x6a09f630,
		[kPropertyId]: 0x6a09f630,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Maps time of day on 24-hour clock to a percentage of crime props
	 * generated (0.0 - 1.0)
	 */
	CrimeLayerClock: {
		[kToPrimitive]: () => 0x6a09f631,
		[kPropertyId]: 0x6a09f631,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * This is an optional property. It is used in conjunction with the "Health
	 * Effect Strength". Radius is in cells.
	 */
	HealthEffectRadius: {
		[kToPrimitive]: () => 0x6a19f6b5,
		[kPropertyId]: 0x6a19f6b5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to raise/lower one vertex one meter when using this tool
	 */
	SimoleanCostPerMeterDisplaced: {
		[kToPrimitive]: () => 0x6a2d49f4,
		[kPropertyId]: 0x6a2d49f4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Brush belongs to god mode, mountain category
	 */
	CategoryGodMountain: 0x6a33d682,
	/**
	 * Tweak values to nudge each delta
	 */
	AudioZoomDistanceTweaks: {
		[kToPrimitive]: () => 0x6a359f22,
		[kPropertyId]: 0x6a359f22,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * 24hour times i.e. 15.5
	 */
	SFXAlarmTime: {
		[kToPrimitive]: () => 0x6a36afab,
		[kPropertyId]: 0x6a36afab,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound played for the occupant. There will be one instance per
	 * occupant.
	 */
	SFXOccupantInstanceSound: 0x6a36afac,
	/**
	 * Controls whether the flora appears in landscape mode (wild) or mayor mode
	 * (domestic).
	 */
	FloraWild: {
		[kToPrimitive]: () => 0x6a37ebb6,
		[kPropertyId]: 0x6a37ebb6,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Ambient loop id
	 */
	AudioLoopId: 0x6a3fbdda,
	/**
	 * Sound Pressure Level
	 */
	AudioFreshSPL: 0x6a3fc4c7,
	/**
	 * Trigger ID for script-defined global effect that turns this prop on
	 * (state 0) and off (state 1).
	 */
	GlobalEffectTrigger: 0x6a3fcc37,
	/**
	 * Maximum amount of air pollution that can be added to/subtracted from each
	 * cell per month.
	 */
	AirPollutionDelta: 0x6a406201,
	/**
	 * Maps difference between actual % funding and % ideal funding to % of a
	 * utility output
	 */
	WaterFundingToEfficiencyCurve: {
		[kToPrimitive]: () => 0x6a410bf2,
		[kPropertyId]: 0x6a410bf2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Density to freshness volume curve
	 */
	AudioDensity2FreshVolumeCurve: {
		[kToPrimitive]: () => 0x6a4132f3,
		[kPropertyId]: 0x6a4132f3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Density to loop volume curve
	 */
	AudioDensity2LoopVolumeCurve: {
		[kToPrimitive]: () => 0x6a4132f6,
		[kPropertyId]: 0x6a4132f6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Resource key of ordinance name resource
	 */
	NameKey: {
		[kToPrimitive]: () => 0x6a416b21,
		[kPropertyId]: 0x6a416b21,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Explosion type at end of life.
	 */
	HardFailureType: {
		[kToPrimitive]: () => 0x6a43150f,
		[kPropertyId]: 0x6a43150f,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		DoesntExplode: 0x00000000,
		LowEnergyExplosion: 0x00000001,
		MediumEnergyExplosion: 0x00000002,
		HighEnergyExplosion: 0x00000003,
		SuperHighEnergyExplosion: 0x00000004,
	},
	/**
	 * Min/max speed of trains in kilometers per hour
	 */
	TrainMinMaxKPH: {
		[kToPrimitive]: () => 0x6a440d40,
		[kPropertyId]: 0x6a440d40,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Min deal amount for water deal
	 */
	NDb_MinDealAmountWater: {
		[kToPrimitive]: () => 0x6a469337,
		[kPropertyId]: 0x6a469337,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min deal profit factor (1 + NDc_MinDealProfitFactor)
	 */
	NDc_MinDealProfitFactor: {
		[kToPrimitive]: () => 0x6a469342,
		[kPropertyId]: 0x6a469342,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Overrides the automatic maximum Y value.
	 */
	GraphMaximumYValue: {
		[kToPrimitive]: () => 0x6a4aeded,
		[kPropertyId]: 0x6a4aeded,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Overrides the automatic Y tick spacing.
	 */
	GraphYTickSpacing: {
		[kToPrimitive]: () => 0x6a4aedef,
		[kPropertyId]: 0x6a4aedef,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Array of GUIDs, one per plot, each representing a data source.
	 */
	GraphPlotDataSource1: 0x6a4aee40,
	/**
	 * (Line only) Array of GUIDs, one per plot, each representing a data
	 * source.
	 */
	GraphPlotDataSource2: 0x6a4aee5f,
	/**
	 * (Line only) Array of ints, one per plot, each representing how data
	 * sources 1 and 2 are combined (none, +, -, *, /).
	 */
	GraphPlotCombineOp: 0x6a4aee68,
	/**
	 * Array of ints, one per plot, each representing a localized string key for
	 * the label.
	 */
	GraphPlotLabelKey: 0x6a4aeedc,
	/**
	 * Array of RGB triplets, 3 integers per plot, each representing a line
	 * color.
	 */
	GraphPlotColor: {
		[kToPrimitive]: () => 0x6a4aeedf,
		[kPropertyId]: 0x6a4aeedf,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Array of floats, one per plot, which scales the plot by that amount.
	 */
	GraphPlotScale: {
		[kToPrimitive]: () => 0x6a4aeee2,
		[kPropertyId]: 0x6a4aeee2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * (Bar only) Array of ints, one per plot, each representing which series
	 * that plot should be in.
	 */
	GraphPlotSeries: 0x6a4aeee3,
	/**
	 * (Bar only) Array of RGB triplets, 3 integers per series, each
	 * representing a fill color for a whole series.
	 */
	GraphPlotSeriesFillColor: {
		[kToPrimitive]: () => 0x6a4aeee4,
		[kPropertyId]: 0x6a4aeee4,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * (Bar only) Array of RGB triplets, 3 integers per series, each
	 * representing a outline color a whole series.
	 */
	GraphPlotSeriesLineColor: {
		[kToPrimitive]: () => 0x6a4aeee5,
		[kPropertyId]: 0x6a4aeee5,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * To Allow the flow of lava flow
	 */
	VolcanoLavaShouldLavaFlow: {
		[kToPrimitive]: () => 0x6a4bc8ed,
		[kPropertyId]: 0x6a4bc8ed,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Width in cells of each demolition cluster window
	 */
	Obliterate_ClusterWindowWidth: 0x6a5a6700,
	/**
	 * Cumulative number of clusters to demolish as a function of time (secs)
	 */
	Obliterate_NumClustersVsTime: {
		[kToPrimitive]: () => 0x6a5a6701,
		[kPropertyId]: 0x6a5a6701,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Time (secs) between the creation of Finale effect and our last big
	 * wipe-out sweep of the ciry
	 */
	Obliterate_SmokeScreenFormationTime: {
		[kToPrimitive]: () => 0x6a5a6702,
		[kPropertyId]: 0x6a5a6702,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * What lot state this prop is active in.  Don't add the property if the
	 * prop is active in all lot states.
	 */
	ActiveLotState: {
		[kToPrimitive]: () => 0x6a5e0727,
		[kPropertyId]: 0x6a5e0727,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		Created: 0x00000000,
		Ready: 0x00000001,
		Constructing: 0x00000002,
		Occupied: 0x00000003,
		Vacant: 0x00000004,
		Destructing: 0x00000005,
		Destroyed: 0x00000006,
	},
	/**
	 * History data source for this trend bar
	 */
	TrendBarDataSource: 0x6a6564f4,
	/**
	 * Converts from input data source range to {0,1}
	 */
	TrendBarResponseCurve: {
		[kToPrimitive]: () => 0x6a6564f6,
		[kPropertyId]: 0x6a6564f6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Upkeep cost per tile of each network type (rd, rl, hwy, st, x, x, ave,
	 * sub, lr)
	 */
	MonthlyCostForNetworkTile: {
		[kToPrimitive]: () => 0x6a84493e,
		[kPropertyId]: 0x6a84493e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If this property is present the game will not apply deform and lighting
	 * to the model
	 */
	ModelIsPrelit: 0x6a845768,
	/**
	 * ID of the plugin pack to which the data belongs
	 */
	PluginPackID: 0x6a871b82,
	/**
	 * Volume limiting curve
	 */
	AudioVolumeLimitingCurve: {
		[kToPrimitive]: () => 0x6a946a50,
		[kPropertyId]: 0x6a946a50,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Prop only appears if lot is powered
	 */
	RequiresPowerToAppear: {
		[kToPrimitive]: () => 0x6a959e71,
		[kPropertyId]: 0x6a959e71,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * If set to true, when the prop is hover-queried, it will highlight both
	 * itself and the main building (and give the same hover data). Setting to
	 * True creates the effect of a main building that is composed of multiple
	 * pieces (such as the University).
	 */
	QueryAsMainBuilding: {
		[kToPrimitive]: () => 0x6a95e503,
		[kPropertyId]: 0x6a95e503,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Starting funds for a new city, by difficult level
	 */
	BudgetInitialFunds: {
		[kToPrimitive]: () => 0x6a9c7718,
		[kPropertyId]: 0x6a9c7718,
		[kPropertyType]: [Sint64],
		[kInspect]: inspector,
	},
	/**
	 * Whether animated props should be looped, ping-pong, or one-shot. If not
	 * present, the default is Loop.
	 */
	AnimatedPropPlayMode: {
		[kToPrimitive]: () => 0x6a9edd07,
		[kPropertyId]: 0x6a9edd07,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Coverage radii are multiplied by this value when computing tract coverage
	 */
	CoverageRadiusSlopMultiplier: {
		[kToPrimitive]: () => 0x6a9f6edd,
		[kPropertyId]: 0x6a9f6edd,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If a tract's HQ falls below this number, they're at death's door.
	 */
	DeathsDoorHQ: {
		[kToPrimitive]: () => 0x6ab70da7,
		[kPropertyId]: 0x6ab70da7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Base height above terrain at which the effect will play for a tract
	 * that's at death's door.
	 */
	DeathsDoorEffectHeight: {
		[kToPrimitive]: () => 0x6ab71654,
		[kPropertyId]: 0x6ab71654,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Value for displaying monthly cost in the catalog - not simulated
	 */
	CatalogMonthlyCost: {
		[kToPrimitive]: () => 0x6ad54804,
		[kPropertyId]: 0x6ad54804,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier for automata speed when sim is in slow, medium, fast, and
	 * player-drive mode.  1.0 = default speed
	 */
	SimulationSpeedMultiplier: {
		[kToPrimitive]: () => 0x6b42922c,
		[kPropertyId]: 0x6b42922c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Defaulted deals get suspended for this number of days.
	 */
	NDd_SuspensionPeriod: {
		[kToPrimitive]: () => 0x6b588fad,
		[kPropertyId]: 0x6b588fad,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Color progression to use for water.
	 */
	MiniMapWaterRamp: {
		[kToPrimitive]: () => 0x6b733233,
		[kPropertyId]: 0x6b733233,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * List of travel types
	 */
	DataViewTravelTypes: 0x6b7c5cdd,
	/**
	 * How many tiles traffic autos should look ahead when determining paths
	 */
	PathLookaheadTiles: {
		[kToPrimitive]: () => 0x6bac0b3e,
		[kPropertyId]: 0x6bac0b3e,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * GUID array of sounds to play (per zoom) when occupant is 'active'
	 */
	SFXActiveSound: 0x6c044bb5,
	/**
	 * Desired maximum # of vehicles in the world during player-drive
	 */
	PlayerdriveVehicleMaxCount: 0x6c200139,
	/**
	 * mnMonthsBetweenCellCoverage
	 */
	MnMonthsBetweenCellCoverage: 0x8761abd0,
	/**
	 * Range: [0.0 - 90.0]
	 */
	MaxSlopeAlongNetwork: {
		[kToPrimitive]: () => 0x879d12e7,
		[kPropertyId]: 0x879d12e7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The type of zone that is developed
	 */
	TargetZone: {
		[kToPrimitive]: () => 0x87cd6300,
		[kPropertyId]: 0x87cd6300,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		Residential: 0x00000001,
		Commercial: 0x00000002,
		Industrial: 0x00000003,
	},
	/**
	 * Demand comes from this index OR source zone
	 */
	DemandSourceIndex: 0x87cd6301,
	/**
	 * Specifies (source and target) wealth type
	 */
	WealthType: {
		[kToPrimitive]: () => 0x87cd6330,
		[kPropertyId]: 0x87cd6330,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Specifies type of building created by this developer
	 */
	PurposeType: {
		[kToPrimitive]: () => 0x87cd6332,
		[kPropertyId]: 0x87cd6332,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Specifies acceptable land values (0, 0 disables)
	 */
	LandValueRange: {
		[kToPrimitive]: () => 0x87cd6333,
		[kPropertyId]: 0x87cd6333,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * True means use total land value
	 */
	LandValueUseIntrinsic: {
		[kToPrimitive]: () => 0x87cd633f,
		[kPropertyId]: 0x87cd633f,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * How much land value is a factor in desirability
	 */
	LandValueEffect: {
		[kToPrimitive]: () => 0x87cd6340,
		[kPropertyId]: 0x87cd6340,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much proximity to R$ is a factor in desirability
	 */
	R$ProximityEffect: {
		[kToPrimitive]: () => 0x87cd6343,
		[kPropertyId]: 0x87cd6343,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much proximity to R$$ is a factor in desirability
	 */
	R$$ProximityEffect: {
		[kToPrimitive]: () => 0x87cd6344,
		[kPropertyId]: 0x87cd6344,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much proximity to R$$$ is a factor in desirability
	 */
	R$$$ProximityEffect: {
		[kToPrimitive]: () => 0x87cd6345,
		[kPropertyId]: 0x87cd6345,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much traffic volume is a factor in desirability
	 */
	TrafficEffect: {
		[kToPrimitive]: () => 0x87cd6346,
		[kPropertyId]: 0x87cd6346,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much travel time is a factor in desirability
	 */
	TripLengthEffect: {
		[kToPrimitive]: () => 0x87cd6347,
		[kPropertyId]: 0x87cd6347,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much school grade is a factor in desirability
	 */
	SchoolEffect: {
		[kToPrimitive]: () => 0x87cd6348,
		[kPropertyId]: 0x87cd6348,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much hospital grade is a factor in desirability
	 */
	HospitalEffect: {
		[kToPrimitive]: () => 0x87cd6349,
		[kPropertyId]: 0x87cd6349,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much air pollution proximity affects desirability
	 */
	PollutionEffectAir: {
		[kToPrimitive]: () => 0x87cd634b,
		[kPropertyId]: 0x87cd634b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much water pollution proximity affects desirability
	 */
	PollutionEffectWater: {
		[kToPrimitive]: () => 0x87cd634c,
		[kPropertyId]: 0x87cd634c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much garbage pollution proximity affects desirability
	 */
	PollutionEffectGarbage: {
		[kToPrimitive]: () => 0x87cd634d,
		[kPropertyId]: 0x87cd634d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much radiation pollution proximity affects desirability
	 */
	PollutionEffectRadiation: {
		[kToPrimitive]: () => 0x87cd634e,
		[kPropertyId]: 0x87cd634e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Tracts with desirability greater than this value never abandon.
	 */
	DesirabilityThresholdDecline: {
		[kToPrimitive]: () => 0x87cd6354,
		[kPropertyId]: 0x87cd6354,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Tracts with desirability less than this value never develop. Tested
	 * before pruning.
	 */
	DesirabilityThresholdGrowth: {
		[kToPrimitive]: () => 0x87cd6355,
		[kPropertyId]: 0x87cd6355,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * If true, unhappy sims will create a demand for new growth, which results
	 * in migration
	 */
	PhantomDemand: {
		[kToPrimitive]: () => 0x87cd6356,
		[kPropertyId]: 0x87cd6356,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Value for desirability, if no other effects are applicable
	 */
	BaselineDesirability: {
		[kToPrimitive]: () => 0x87cd6357,
		[kPropertyId]: 0x87cd6357,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Number of growth stages
	 */
	StageCount: {
		[kToPrimitive]: () => 0x87cd6360,
		[kPropertyId]: 0x87cd6360,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 1, as a function of the
	 * population of the city
	 */
	Stage1VsSize: {
		[kToPrimitive]: () => 0x87cd6361,
		[kPropertyId]: 0x87cd6361,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 2, as a function of the
	 * population of the city
	 */
	Stage2VsSize: {
		[kToPrimitive]: () => 0x87cd6362,
		[kPropertyId]: 0x87cd6362,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 3, as a function of the
	 * population of the city
	 */
	Stage3VsSize: {
		[kToPrimitive]: () => 0x87cd6363,
		[kPropertyId]: 0x87cd6363,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 4, as a function of the
	 * population of the city
	 */
	Stage4VsSize: {
		[kToPrimitive]: () => 0x87cd6364,
		[kPropertyId]: 0x87cd6364,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 5, as a function of the
	 * population of the city
	 */
	Stage5VsSize: {
		[kToPrimitive]: () => 0x87cd6365,
		[kPropertyId]: 0x87cd6365,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 6, as a function of the
	 * population of the city
	 */
	Stage6VsSize: {
		[kToPrimitive]: () => 0x87cd6366,
		[kPropertyId]: 0x87cd6366,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 7, as a function of the
	 * population of the city
	 */
	Stage7VsSize: {
		[kToPrimitive]: () => 0x87cd6367,
		[kPropertyId]: 0x87cd6367,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 8, as a function of the
	 * population of the city
	 */
	Stage8VsSize: {
		[kToPrimitive]: () => 0x87cd6368,
		[kPropertyId]: 0x87cd6368,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 9, as a function of the
	 * population of the city
	 */
	Stage9VsSize: {
		[kToPrimitive]: () => 0x87cd6369,
		[kPropertyId]: 0x87cd6369,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 10, as a function of the
	 * population of the city
	 */
	Stage10VsSize: {
		[kToPrimitive]: () => 0x87cd636a,
		[kPropertyId]: 0x87cd636a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 11, as a function of the
	 * population of the city
	 */
	Stage11VsSize: {
		[kToPrimitive]: () => 0x87cd636b,
		[kPropertyId]: 0x87cd636b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 12, as a function of the
	 * population of the city
	 */
	Stage12VsSize: {
		[kToPrimitive]: () => 0x87cd636c,
		[kPropertyId]: 0x87cd636c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 13, as a function of the
	 * population of the city
	 */
	Stage13VsSize: {
		[kToPrimitive]: () => 0x87cd636d,
		[kPropertyId]: 0x87cd636d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 14, as a function of the
	 * population of the city
	 */
	Stage14VsSize: {
		[kToPrimitive]: () => 0x87cd636e,
		[kPropertyId]: 0x87cd636e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage of growth which should be of type 15, as a function of the
	 * population of the city
	 */
	Stage15VsSize: {
		[kToPrimitive]: () => 0x87cd636f,
		[kPropertyId]: 0x87cd636f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum density allowed without water service
	 */
	WaterSupplyCap: {
		[kToPrimitive]: () => 0x87cd6370,
		[kPropertyId]: 0x87cd6370,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Maximum density allowed without fire protection
	 */
	FireCoverageCap: {
		[kToPrimitive]: () => 0x87cd6371,
		[kPropertyId]: 0x87cd6371,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Maximum density allowed without a nearby park
	 */
	ParkCap: {
		[kToPrimitive]: () => 0x87cd6372,
		[kPropertyId]: 0x87cd6372,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Maximum density allowed without power service
	 */
	PowerSupplyCap: {
		[kToPrimitive]: () => 0x87cd6373,
		[kPropertyId]: 0x87cd6373,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Specifies building selection mode
	 */
	UseMonopolyPieces: {
		[kToPrimitive]: () => 0x87cd6381,
		[kPropertyId]: 0x87cd6381,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		UseRealBuildingsOnly: 0x00000000,
		UseRealIfAvailable: 0x00000001,
		UseMonopolyBuildingsOnly: 0x00000002,
	},
	/**
	 * How much proximity to Co$$ is a factor in desirability
	 */
	Co$$ProximityEffect: {
		[kToPrimitive]: () => 0x87cd6391,
		[kPropertyId]: 0x87cd6391,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much proximity to Co$$$ is a factor in desirability
	 */
	Co$$$ProximityEffect: {
		[kToPrimitive]: () => 0x87cd6392,
		[kPropertyId]: 0x87cd6392,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much transient aura effects (-128, 127) affect desirability
	 */
	TransientAuraEffect: {
		[kToPrimitive]: () => 0x87cd6397,
		[kPropertyId]: 0x87cd6397,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How much slope is a factor in desirability
	 */
	SlopeEffect: {
		[kToPrimitive]: () => 0x87cd6398,
		[kPropertyId]: 0x87cd6398,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Pairs of occupant group IDs and percentages showing how often they should
	 * be used
	 */
	StylePercentages: {
		[kToPrimitive]: () => 0x87cd63a0,
		[kPropertyId]: 0x87cd63a0,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Percentage by which recycling center reduces trash
	 */
	RecyclingCenterPercentReduction: 0x88ed1059,
	/**
	 * Amount of water produced by this building per month.
	 */
	WaterProduced: 0x88ed3303,
	/**
	 * Lot Config Property Version
	 */
	LotConfigPropertyVersion: {
		[kToPrimitive]: () => 0x88edc789,
		[kPropertyId]: 0x88edc789,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * LotConfigPropertySize
	 */
	LotConfigPropertySize: {
		[kToPrimitive]: () => 0x88edc790,
		[kPropertyId]: 0x88edc790,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * LotConfigPropertyFamily
	 */
	LotConfigPropertyFamily: 0x88edc791,
	/**
	 * The slope at which it switches to using a Lot foundation
	 */
	LotConfigPropertyMaxSlopeBeforeLotFoundation: {
		[kToPrimitive]: () => 0x88edc792,
		[kPropertyId]: 0x88edc792,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * LotConfigPropertyZoneTypes
	 */
	LotConfigPropertyZoneTypes: {
		[kToPrimitive]: () => 0x88edc793,
		[kPropertyId]: 0x88edc793,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
		None: 0x00000000,
		RLowDensity: 0x00000001,
		RMediumDensity: 0x00000002,
		RHighDensity: 0x00000003,
		CLowDensity: 0x00000004,
		CMediumDensity: 0x00000005,
		CHighDensity: 0x00000006,
		ILowDensity: 0x00000007,
		IMediumDensity: 0x00000008,
		IHighDensity: 0x00000009,
		Military: 0x0000000a,
		Airport: 0x0000000b,
		Seaport: 0x0000000c,
		Spaceport: 0x0000000d,
		Landfill: 0x0000000e,
		PloppedBuilding: 0x0000000f,
	},
	/**
	 * LotConfigPropertyWealthTypes
	 */
	LotConfigPropertyWealthTypes: {
		[kToPrimitive]: () => 0x88edc795,
		[kPropertyId]: 0x88edc795,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
		None: 0x00000000,
		$: 0x00000001,
		$$: 0x00000002,
		$$$: 0x00000003,
	},
	/**
	 * LotConfigPropertyPurposeTypes
	 */
	LotConfigPropertyPurposeTypes: {
		[kToPrimitive]: () => 0x88edc796,
		[kPropertyId]: 0x88edc796,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
		None: 0x00000000,
		R: 0x00000001,
		CS: 0x00000002,
		CO: 0x00000003,
		Unknown: 0x00000004,
		IR: 0x00000005,
		ID: 0x00000006,
		IM: 0x00000007,
		IH: 0x00000008,
	},
	/**
	 * LotConfigPropertyFenceDefinition
	 */
	LotConfigPropertyFenceDefinition: 0x88edc797,
	/**
	 * LotConfigPropertyRetainingWallTypes
	 */
	LotConfigPropertyRetainingWallTypes: 0x88edc798,
	/**
	 * LotConfigPropertyLotObject
	 */
	LotConfigPropertyLotObject: {
		[kToPrimitive]: () => 0x88edc900,
		[kPropertyId]: 0x88edc900,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * The height a foundation can lift an occupant (usually a building or lot).
	 */
	kSC4FoundationPropertyMaxHeight: {
		[kToPrimitive]: () => 0x88fcc3e3,
		[kPropertyId]: 0x88fcc3e3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Foundation type ID for this building or lot.
	 */
	BuildingFoundation: {
		[kToPrimitive]: () => 0x88fcd877,
		[kPropertyId]: 0x88fcd877,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		$$16x16: 0x1a421000,
		$$16x20: 0x1a431000,
		$10x24: 0x1a3a1000,
		$16x24: 0x1a3b1000,
		$28x22: 0x1a411000,
		RedBrickProcedural: 0x890b7312,
		ConcreteHorizProcedural: 0x890b7313,
		SlateBrickProcedural: 0x890b7314,
		CreamBrickProcedural: 0x890b7315,
		R$$$16x20_123ChiMansion9: 0x006f1000,
		R$$$16x20_123HouMansion9: 0x00ee1000,
		R$$$20x20_123ChiMansion1: 0x00d41000,
		R$$$20x24: 0x1a451000,
		R$$$24x14_123ChiMansion5: 0x004d1000,
		R$$$24x28: 0x1a441000,
		R$$$26x36: 0x1a3f1000,
		R$$10x14_123ChiStdHouse1: 0x004f1000,
		R$$12x14_123ChiStdHouse8: 0x00bf1000,
		R$$16x8: 0x1a3c1000,
		R$$28x20: 0x1a3d1000,
		R$16x30: 0x1a401000,
		R$16x8_123HouTinyHouse8: 0x00b61000,
		R$4x10_123ChiTinyHouse5: 0x00a11000,
		R$6x8_123ChiTinyHouse2: 0x007d1000,
		R$6x8_123HouTinyHouse1: 0x004a1000,
		PZPark3x6x5_LifeguardTower: 0x1ddd1000,
		RW80x48_CruiseShip: 0x194f0000,
		Ut32x78_PassengerFerry: 0x194e0000,
		Ut48x78_FerryTerminal: 0x194d0000,
		Ut96x96_Seaport: 0x194a1000,
		UtMarina16x64: 0x194c0000,
	},
	/**
	 * Maximum Tax Rate - something like maybe 25%
	 */
	BudgetMaxTaxRate: {
		[kToPrimitive]: () => 0x890e0a99,
		[kPropertyId]: 0x890e0a99,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The maximum amount of outstanding bond debt that is allowed
	 */
	BudgetMaxBondAmount: {
		[kToPrimitive]: () => 0x890e0ab4,
		[kPropertyId]: 0x890e0ab4,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Maximum radiaiton pollution value reported to the UI, must be less than
	 * 32767
	 */
	MaxRadiationPollutionValueForUI: 0x89135044,
	/**
	 * LotConfigPropertyWaterCompatibility
	 */
	LotConfigPropertyWaterCompatibility: {
		[kToPrimitive]: () => 0x89136440,
		[kPropertyId]: 0x89136440,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Efficiency of Health buildings will drop to this % during a strike
	 */
	HealthStrikeEfficiency: {
		[kToPrimitive]: () => 0x89189482,
		[kPropertyId]: 0x89189482,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum duration of a Health strike, in months
	 */
	HealthStrikeDuration: 0x8918948b,
	/**
	 * Minimum grade that all health buildings must have to end a Health strike
	 */
	HealthMinGradeToEndStrike: {
		[kToPrimitive]: () => 0x89189495,
		[kPropertyId]: 0x89189495,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Initial and Maximum allowed funding percentage for schools
	 */
	SchoolInitMaxAllowedFunding: {
		[kToPrimitive]: () => 0x891894ad,
		[kPropertyId]: 0x891894ad,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the CO$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_Co$$: {
		[kToPrimitive]: () => 0x8918c937,
		[kPropertyId]: 0x8918c937,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the IManufacturing occupant
	 * type's taxes
	 */
	BudgetTaxRateOccWeight_IManufacturing: {
		[kToPrimitive]: () => 0x8918c93e,
		[kPropertyId]: 0x8918c93e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps % of coverage distance from a hospital to HQ boost %
	 */
	HealthEffectivenessVsDistanceEffect: {
		[kToPrimitive]: () => 0x891b3ae6,
		[kPropertyId]: 0x891b3ae6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of students served by this school.
	 */
	SchoolStudentCapacity: 0x8922041b,
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects the capacity
	 * of schools
	 */
	SchoolCapacityEffect: {
		[kToPrimitive]: () => 0x892d9d02,
		[kPropertyId]: 0x892d9d02,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Milliseconds per day for slow, medium, fast
	 */
	SimulatorSpeeds: {
		[kToPrimitive]: () => 0x89590e6d,
		[kPropertyId]: 0x89590e6d,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Time dilation factor to apply to animations based on sim speed
	 * (paused,slow,med,fast,emergency/drive)
	 */
	KAnimationTimeDilationProperty: {
		[kToPrimitive]: () => 0x89590e6e,
		[kPropertyId]: 0x89590e6e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Specifies a multiplier from real time to the 24 hour clock's time.
	 */
	'24HourClockSpeedTimeMagnification': {
		[kToPrimitive]: () => 0x897e709f,
		[kPropertyId]: 0x897e709f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How long (microsecs) is the volcanic ash visible on screen
	 */
	VolcanicAshLifeTime: 0x89861864,
	/**
	 * Height of one growth level
	 */
	SegmentHeight: {
		[kToPrimitive]: () => 0x8989ec22,
		[kPropertyId]: 0x8989ec22,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Width of corner posts
	 */
	PostWidth: {
		[kToPrimitive]: () => 0x8989ec23,
		[kPropertyId]: 0x8989ec23,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Gap between scaffold and building
	 */
	ScaffoldGap: {
		[kToPrimitive]: () => 0x8989ec24,
		[kPropertyId]: 0x8989ec24,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Width of the planks that run around the top of the scaffold
	 */
	PlankWidth: {
		[kToPrimitive]: () => 0x8989ec25,
		[kPropertyId]: 0x8989ec25,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How large the plank texture is, in meters
	 */
	PlankTextureScale: {
		[kToPrimitive]: () => 0x8989ec26,
		[kPropertyId]: 0x8989ec26,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How large the scaffold texture is, in meters
	 */
	ScaffoldTextureScale: {
		[kToPrimitive]: () => 0x8989ec27,
		[kPropertyId]: 0x8989ec27,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How large the top girders texture is, in meters
	 */
	GirdersTextureScale: {
		[kToPrimitive]: () => 0x8989ec28,
		[kPropertyId]: 0x8989ec28,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How fast scaffolding goes up in meters per day
	 */
	ScaffoldGrowthRate: {
		[kToPrimitive]: () => 0x8989ec29,
		[kPropertyId]: 0x8989ec29,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How fast scaffolding is removed in meters per day
	 */
	ScaffoldRemovalRate: {
		[kToPrimitive]: () => 0x8989ec2a,
		[kPropertyId]: 0x8989ec2a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Width of the post that holds up the crane model
	 */
	CranePostWidth: {
		[kToPrimitive]: () => 0x8989ec2b,
		[kPropertyId]: 0x8989ec2b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Size of gap between the crane post and the scaffold
	 */
	CranePostGap: {
		[kToPrimitive]: () => 0x8989ec2c,
		[kPropertyId]: 0x8989ec2c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How far above the scaffold to place the bottom of the crane
	 */
	CraneHeightAboveScaffold: {
		[kToPrimitive]: () => 0x8989ec2d,
		[kPropertyId]: 0x8989ec2d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Milliseconds to complete one full rotation
	 */
	CraneRotationTime: {
		[kToPrimitive]: () => 0x8989ec2e,
		[kPropertyId]: 0x8989ec2e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The item name that will be visible to the player in game.
	 */
	ItemName: {
		[kToPrimitive]: () => 0x899afbad,
		[kPropertyId]: 0x899afbad,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Max vertical distance from the center of the line at which the control
	 * points are placed
	 */
	PowerLineControlMaxVerticalDistance: {
		[kToPrimitive]: () => 0x89a18fc4,
		[kPropertyId]: 0x89a18fc4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum number of points to generate on power line Bezier curve
	 */
	MinimumNumberOfCurvePoints: 0x89a1e8fb,
	/**
	 * 100 meters of terrain corresponds to this fraction of texture in farthest
	 * zoom
	 */
	TerrainTexTilingFactor: {
		[kToPrimitive]: () => 0x89a312c0,
		[kPropertyId]: 0x89a312c0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Width of the coarse grid (in terrain cells) where we assign the same
	 * texture family member
	 */
	TextureRandomizationGridSize: {
		[kToPrimitive]: () => 0x89a312c2,
		[kPropertyId]: 0x89a312c2,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * How long in seconds an emergency vehicle will remain idle when repathing
	 * or handling event
	 */
	EmergencyVehicleIdleTime: {
		[kToPrimitive]: () => 0x89aec88b,
		[kPropertyId]: 0x89aec88b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max distance in cells an emergency vehicle can stop from its dispatch
	 * destination
	 */
	EmergencyVehicleMaxCellDistance: {
		[kToPrimitive]: () => 0x89aec88c,
		[kPropertyId]: 0x89aec88c,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How many times an emergency vehicle will try to repath to its destination
	 */
	EmergencyVehicleRepathAttempts: {
		[kToPrimitive]: () => 0x89aec88d,
		[kPropertyId]: 0x89aec88d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Default speed for emergency vehicles, in kilometers per hour
	 */
	EmergencyVehicleKPH: 0x89aec88e,
	/**
	 * Cost/application at different zoom levels
	 */
	BrushCost: {
		[kToPrimitive]: () => 0x8a020101,
		[kPropertyId]: 0x8a020101,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Cost/application at different zoom levels
	 */
	BrushWiggleAmount: {
		[kToPrimitive]: () => 0x8a020102,
		[kPropertyId]: 0x8a020102,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Sound Id
	 */
	BrushActiveSound: 0x8a020103,
	/**
	 * Sound Id
	 */
	BrushReleaseOneShot: 0x8a020104,
	/**
	 * Component1: Texture id
	 */
	Comp1TextureId: 0x8a020200,
	/**
	 * Component1: should be aligned with the mouse movement direction
	 */
	Comp1AlignedWithMouseMoveDirection: {
		[kToPrimitive]: () => 0x8a020201,
		[kPropertyId]: 0x8a020201,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Component1: zoom specific widths
	 */
	Comp1Width: {
		[kToPrimitive]: () => 0x8a020202,
		[kPropertyId]: 0x8a020202,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component1: zoom specific brush strengths
	 */
	Comp1Strength: {
		[kToPrimitive]: () => 0x8a020203,
		[kPropertyId]: 0x8a020203,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component1: Base texture value (Raise/lower if value is more/less than
	 * this)
	 */
	Comp1BaseTextureVal: {
		[kToPrimitive]: () => 0x8a020204,
		[kPropertyId]: 0x8a020204,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Component1: Operation id
	 */
	Comp1OperationId: 0x8a020205,
	/**
	 * Component1: Decal texture id for paint brush
	 */
	Comp1DecalTextureId: 0x8a020206,
	/**
	 * Component1: Max rotation of decal texture (degrees)
	 */
	Comp1MaxDecalRotation: {
		[kToPrimitive]: () => 0x8a020207,
		[kPropertyId]: 0x8a020207,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Component1: Max # of effects/decals placed in a cell during a scrubbing
	 * session
	 */
	Comp1MaxPlacementsPerCell: 0x8a020208,
	/**
	 * Component1: (group id, instance id) of the effect to place
	 */
	Comp1IDOfEffectToPlace: {
		[kToPrimitive]: () => 0x8a020209,
		[kPropertyId]: 0x8a020209,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Component2: Texture id
	 */
	Comp2TextureId: 0x8a020300,
	/**
	 * Component2: should be aligned with the mouse movement direction
	 */
	Comp2AlignedWithMouseMoveDirection: {
		[kToPrimitive]: () => 0x8a020301,
		[kPropertyId]: 0x8a020301,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Component2: zoom specific widths
	 */
	Comp2Width: {
		[kToPrimitive]: () => 0x8a020302,
		[kPropertyId]: 0x8a020302,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component2: zoom specific brush strengths
	 */
	Comp2Strength: {
		[kToPrimitive]: () => 0x8a020303,
		[kPropertyId]: 0x8a020303,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component2: Base texture value (Raise/lower if value is more/less than
	 * this)
	 */
	Comp2BaseTextureVal: {
		[kToPrimitive]: () => 0x8a020304,
		[kPropertyId]: 0x8a020304,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Component2: Operation id
	 */
	Comp2OperationId: 0x8a020305,
	/**
	 * Component2: Decal texture id for paint brush
	 */
	Comp2DecalTextureId: 0x8a020306,
	/**
	 * Component2: Max rotation of decal texture (degrees)
	 */
	Comp2MaxDecalRotation: {
		[kToPrimitive]: () => 0x8a020307,
		[kPropertyId]: 0x8a020307,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Component2: Max # of effects/decals placed in a cell during a scrubbing
	 * session
	 */
	Comp2MaxPlacementsPerCell: 0x8a020308,
	/**
	 * Component2: (group id, instance id) of the effect to place
	 */
	Comp2IDOfEffectToPlace: {
		[kToPrimitive]: () => 0x8a020309,
		[kPropertyId]: 0x8a020309,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Component3: Texture id
	 */
	Comp3TextureId: 0x8a020400,
	/**
	 * Component3: should be aligned with the mouse movement direction
	 */
	Comp3AlignedWithMouseMoveDirection: {
		[kToPrimitive]: () => 0x8a020401,
		[kPropertyId]: 0x8a020401,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Component3: zoom specific widths
	 */
	Comp3Width: {
		[kToPrimitive]: () => 0x8a020402,
		[kPropertyId]: 0x8a020402,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component3: zoom specific brush strengths
	 */
	Comp3Strength: {
		[kToPrimitive]: () => 0x8a020403,
		[kPropertyId]: 0x8a020403,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component3: Base texture value (Raise/lower if value is more/less than
	 * this)
	 */
	Comp3BaseTextureVal: {
		[kToPrimitive]: () => 0x8a020404,
		[kPropertyId]: 0x8a020404,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Component3: Operation id
	 */
	Comp3OperationId: 0x8a020405,
	/**
	 * Component3: Decal texture id for paint brush
	 */
	Comp3DecalTextureId: 0x8a020406,
	/**
	 * Component3: Max rotation of decal texture (degrees)
	 */
	Comp3MaxDecalRotation: {
		[kToPrimitive]: () => 0x8a020407,
		[kPropertyId]: 0x8a020407,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Component3: Max # of effects/decals placed in a cell during a scrubbing
	 * session
	 */
	Comp3MaxPlacementsPerCell: 0x8a020408,
	/**
	 * Component3: (group id, instance id) of the effect to place
	 */
	Comp3IDOfEffectToPlace: {
		[kToPrimitive]: () => 0x8a020409,
		[kPropertyId]: 0x8a020409,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Component4: Texture id
	 */
	Comp4TextureId: 0x8a020500,
	/**
	 * Component4: should be aligned with the mouse movement direction
	 */
	Comp4AlignedWithMouseMoveDirection: {
		[kToPrimitive]: () => 0x8a020501,
		[kPropertyId]: 0x8a020501,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Component4: zoom specific widths
	 */
	Comp4Width: {
		[kToPrimitive]: () => 0x8a020502,
		[kPropertyId]: 0x8a020502,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component4: zoom specific brush strengths
	 */
	Comp4Strength: {
		[kToPrimitive]: () => 0x8a020503,
		[kPropertyId]: 0x8a020503,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Component4: Base texture value (Raise/lower if value is more/less than
	 * this)
	 */
	Comp4BaseTextureVal: {
		[kToPrimitive]: () => 0x8a020504,
		[kPropertyId]: 0x8a020504,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Component4: Operation id
	 */
	Comp4OperationId: 0x8a020505,
	/**
	 * Component4: Decal texture id for paint brush
	 */
	Comp4DecalTextureId: 0x8a020506,
	/**
	 * Component4: Max rotation of decal texture (degrees)
	 */
	Comp4MaxDecalRotation: {
		[kToPrimitive]: () => 0x8a020507,
		[kPropertyId]: 0x8a020507,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Component4: Max # of effects/decals placed in a cell during a scrubbing
	 * session
	 */
	Comp4MaxPlacementsPerCell: 0x8a020508,
	/**
	 * Component4: (group id, instance id) of the effect to place
	 */
	Comp4IDOfEffectToPlace: {
		[kToPrimitive]: () => 0x8a020509,
		[kPropertyId]: 0x8a020509,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Freight traffic that can arrive at this building.
	 */
	FreightReceivingCapacity: 0x8a0b4103,
	CrimeJoblessIndicatorSmoothingFactor: {
		[kToPrimitive]: () => 0x8a0cbaa3,
		[kPropertyId]: 0x8a0cbaa3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	CrimeR$EQBaseCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa4,
		[kPropertyId]: 0x8a0cbaa4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeR$$EQBaseCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa5,
		[kPropertyId]: 0x8a0cbaa5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeR$$$EQBaseCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa6,
		[kPropertyId]: 0x8a0cbaa6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeR$JoblessRatioCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa7,
		[kPropertyId]: 0x8a0cbaa7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeR$$JoblessRatioCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa8,
		[kPropertyId]: 0x8a0cbaa8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeR$$$JoblessRatioCriminalityCurve: {
		[kToPrimitive]: () => 0x8a0cbaa9,
		[kPropertyId]: 0x8a0cbaa9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimeCriminalityCrimesCurve: {
		[kToPrimitive]: () => 0x8a0cbaaa,
		[kPropertyId]: 0x8a0cbaaa,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	CrimePoliceProtectionCrimeAttenuation: {
		[kToPrimitive]: () => 0x8a0cbaab,
		[kPropertyId]: 0x8a0cbaab,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Example: 0.5 means values get halved every month
	 */
	CrimeCrimeGridDecayFactor: {
		[kToPrimitive]: () => 0x8a0cbaac,
		[kPropertyId]: 0x8a0cbaac,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Fraction (0 to 1.0) of unjailed criminals that will commit crimes next
	 * month
	 */
	CrimeCriminalGridDecayFactor: {
		[kToPrimitive]: () => 0x8a0cbaad,
		[kPropertyId]: 0x8a0cbaad,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The reported damage amount (in simoleons) if the occupant gets destroyed
	 * by a disaster.
	 */
	Worth: {
		[kToPrimitive]: () => 0x8a1c3e72,
		[kPropertyId]: 0x8a1c3e72,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Converts the current age degradation of the plant to a multiplier for
	 * production level
	 */
	AgeToOutputLevelResponseCurve: {
		[kToPrimitive]: () => 0x8a1e07ee,
		[kPropertyId]: 0x8a1e07ee,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Likelihood per month that a distressed pipe will burst
	 */
	PipeBurstProbability: {
		[kToPrimitive]: () => 0x8a235c56,
		[kPropertyId]: 0x8a235c56,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * This is the in game readable description for this item.
	 */
	ItemDescription: {
		[kToPrimitive]: () => 0x8a2602a9,
		[kPropertyId]: 0x8a2602a9,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Resource instance ID of Menu Icon for this item
	 */
	ItemIcon: 0x8a2602b8,
	/**
	 * Controls position in menu.  Items with lower numbers appear on or near
	 * the top of the menu, items with higher numbers are placed lower on the
	 * menu.
	 */
	ItemOrder: 0x8a2602b9,
	/**
	 * If needed: which sub menu this item belongs to
	 */
	ItemSubmenu: 0x8a2602ba,
	/**
	 * If needed: the button id this item corresponds to
	 */
	ItemButtonID: 0x8a2602bb,
	/**
	 * List of instance IDs for exemplars containing the properties for each
	 * distinct airport/seaport type
	 */
	PortTypeExemplarIDs: 0x8a270fc3,
	/**
	 * Cost to create a bridge tile of network using this tool
	 */
	SimoleanCostPerBridgeTile: 0x8a2d49ea,
	/**
	 * Cost to create a tunnel tile of network using this tool
	 */
	SimoleanCostPerTunnelTile: 0x8a2d49f0,
	/**
	 * Brush belongs to god mode, miscellaneous category
	 */
	CategoryGodMisc: 0x8a3143b7,
	/**
	 * Interest applied to principal once and added to total
	 */
	BudgetBondInterestRate: {
		[kToPrimitive]: () => 0x8a3fb98d,
		[kPropertyId]: 0x8a3fb98d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Priority scalar
	 */
	AudioLayerWeight: {
		[kToPrimitive]: () => 0x8a3fc5dd,
		[kPropertyId]: 0x8a3fc5dd,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum amount of water pollution that can be added to/subtracted from
	 * each cell per month.
	 */
	WaterPollutionDelta: 0x8a40620b,
	/**
	 * Resource key of the name of what this exemplar represents
	 */
	UserVisibleNameKey: {
		[kToPrimitive]: () => 0x8a416a99,
		[kPropertyId]: 0x8a416a99,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Min/max length in cars, including engine, of commuter trains
	 */
	CommuteTrainLength: {
		[kToPrimitive]: () => 0x8a441c9c,
		[kPropertyId]: 0x8a441c9c,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Min deal amount for garbage deal
	 */
	NDb_MinDealAmountGarbage: {
		[kToPrimitive]: () => 0x8a46933d,
		[kPropertyId]: 0x8a46933d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier applied to a building tax value for each level of difference
	 * in wealth level
	 */
	BudgetWaningWealthPropertyTaxMultiplier: {
		[kToPrimitive]: () => 0x8a480df7,
		[kPropertyId]: 0x8a480df7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage (0.0 - 1.0) of skid that will be applied to vehicle turns.  0
	 * = clamp to paths
	 */
	VehicleSkid: {
		[kToPrimitive]: () => 0x8a4efa75,
		[kPropertyId]: 0x8a4efa75,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max number of buses to cross a tile per second
	 */
	MaxBusesPerSecond: {
		[kToPrimitive]: () => 0x8a511dd1,
		[kPropertyId]: 0x8a511dd1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Layer Position Mode
	 */
	AudioLayerPositionMode: 0x8a552758,
	/**
	 * Present if this prop is a ground-based model suitable for demolish fx,
	 * shadows, and collision avoidance.
	 */
	IsGroundModel: {
		[kToPrimitive]: () => 0x8a5e5db8,
		[kPropertyId]: 0x8a5e5db8,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry1: {
		[kToPrimitive]: () => 0x8a5e7b50,
		[kPropertyId]: 0x8a5e7b50,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry2: {
		[kToPrimitive]: () => 0x8a5e7b51,
		[kPropertyId]: 0x8a5e7b51,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry3: {
		[kToPrimitive]: () => 0x8a5e7b52,
		[kPropertyId]: 0x8a5e7b52,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry4: {
		[kToPrimitive]: () => 0x8a5e7b53,
		[kPropertyId]: 0x8a5e7b53,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry5: {
		[kToPrimitive]: () => 0x8a5e7b54,
		[kPropertyId]: 0x8a5e7b54,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry6: {
		[kToPrimitive]: () => 0x8a5e7b55,
		[kPropertyId]: 0x8a5e7b55,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry7: {
		[kToPrimitive]: () => 0x8a5e7b56,
		[kPropertyId]: 0x8a5e7b56,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry8: {
		[kToPrimitive]: () => 0x8a5e7b57,
		[kPropertyId]: 0x8a5e7b57,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry9: {
		[kToPrimitive]: () => 0x8a5e7b58,
		[kPropertyId]: 0x8a5e7b58,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry10: {
		[kToPrimitive]: () => 0x8a5e7b59,
		[kPropertyId]: 0x8a5e7b59,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry11: {
		[kToPrimitive]: () => 0x8a5e7b5a,
		[kPropertyId]: 0x8a5e7b5a,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry12: {
		[kToPrimitive]: () => 0x8a5e7b5b,
		[kPropertyId]: 0x8a5e7b5b,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry13: {
		[kToPrimitive]: () => 0x8a5e7b5c,
		[kPropertyId]: 0x8a5e7b5c,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry14: {
		[kToPrimitive]: () => 0x8a5e7b5d,
		[kPropertyId]: 0x8a5e7b5d,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry15: {
		[kToPrimitive]: () => 0x8a5e7b5e,
		[kPropertyId]: 0x8a5e7b5e,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry16: {
		[kToPrimitive]: () => 0x8a5e7b5f,
		[kPropertyId]: 0x8a5e7b5f,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry17: {
		[kToPrimitive]: () => 0x8a5e7b60,
		[kPropertyId]: 0x8a5e7b60,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry18: {
		[kToPrimitive]: () => 0x8a5e7b61,
		[kPropertyId]: 0x8a5e7b61,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry19: {
		[kToPrimitive]: () => 0x8a5e7b62,
		[kPropertyId]: 0x8a5e7b62,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry20: {
		[kToPrimitive]: () => 0x8a5e7b63,
		[kPropertyId]: 0x8a5e7b63,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Music playlist entry values (Title, Filename, on/off)
	 */
	AudioMusicPlaylistEntry21: {
		[kToPrimitive]: () => 0x8a5e7b64,
		[kPropertyId]: 0x8a5e7b64,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * (PurposeId, funding)The occupant needs to be funded by at least this much
	 * for the specified purpose, for it to animate
	 */
	MinForPurposeFundingPercentageToAnimate: {
		[kToPrimitive]: () => 0x8a5f88e3,
		[kPropertyId]: 0x8a5f88e3,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * For each wealth type ($-$$$), modifies percentage of travelers using each
	 * of the three travel strategies
	 */
	TravelStrategyModifier: {
		[kToPrimitive]: () => 0x8a612fee,
		[kPropertyId]: 0x8a612fee,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * The average salary for each of the three wealth levels and four education
	 * levels (12 total)
	 */
	AverageSalaryForDemographic: {
		[kToPrimitive]: () => 0x8a63f2a1,
		[kPropertyId]: 0x8a63f2a1,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on air pollution for each zone
	 * type
	 */
	AirEffectByZoneType: {
		[kToPrimitive]: () => 0x8a67e373,
		[kPropertyId]: 0x8a67e373,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on water pollution for each zone
	 * type
	 */
	WaterEffectByZoneType: {
		[kToPrimitive]: () => 0x8a67e374,
		[kPropertyId]: 0x8a67e374,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on garbage for each zone type
	 */
	GarbageEffectByZoneType: {
		[kToPrimitive]: () => 0x8a67e376,
		[kPropertyId]: 0x8a67e376,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on air pollution generated by
	 * traffic
	 */
	TrafficAirPollutionEffect: {
		[kToPrimitive]: () => 0x8a67e378,
		[kPropertyId]: 0x8a67e378,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Layer Density Mode
	 */
	AudioLayerDensityMode: 0x8a70b1a2,
	/**
	 * Maintenance cost for each pipe occupant
	 */
	MonthlyCostPerPipe: {
		[kToPrimitive]: () => 0x8a84778f,
		[kPropertyId]: 0x8a84778f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The school's capacity is divided by this number to determine the number
	 * of teachers on staff
	 */
	SchoolCapacityToStaffDivisor: 0x8a891421,
	/**
	 * The hospital's capacity is divided by this number to determine the number
	 * of doctors on staff
	 */
	HospitalCapacityToStaffDivisor: 0x8a89142a,
	/**
	 * Float value for displaying monthly cost in the catalog - not simulated
	 */
	CatalogMonthlyCostFloat: {
		[kToPrimitive]: () => 0x8a94eee0,
		[kPropertyId]: 0x8a94eee0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Layer position smoothing delta limit
	 */
	AudioLayerPositionSmoothDelta: 0x8aa039b7,
	/**
	 * Which crime simulator incident this prop represents, or 0 if it's a
	 * generic crime prop.
	 */
	CrimeIncidentID: 0x8aa864d5,
	/**
	 * If after suspension period the deal's at default during this number of
	 * days it will get killed without being re-suspended.
	 */
	NDd_UnsuspensionPeriod: {
		[kToPrimitive]: () => 0x8b58c59e,
		[kPropertyId]: 0x8b58c59e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If true, automaton will be ghosted in the earned vehicle catalog view
	 * until an advisor condition is satisfied
	 */
	ConditionalAutomaton: {
		[kToPrimitive]: () => 0x8bbd735e,
		[kPropertyId]: 0x8bbd735e,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Indicate the location of the end of a runway. Must come in pairs.
	 */
	RunwayEndNumber: {
		[kToPrimitive]: () => 0x8bfb1072,
		[kPropertyId]: 0x8bfb1072,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How much garbage can be delivered to the landfill each month
	 */
	GarbageTransportVersusLandfillTiles: {
		[kToPrimitive]: () => 0x8c19c3e9,
		[kPropertyId]: 0x8c19c3e9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Volume for AEMS system at each zoom level
	 */
	AudioAEMSZoomVolumes: {
		[kToPrimitive]: () => 0x8c376d4f,
		[kPropertyId]: 0x8c376d4f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Income per traveller from a ferry trip
	 */
	FerryFare: {
		[kToPrimitive]: () => 0x8c3caef5,
		[kPropertyId]: 0x8c3caef5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How many travellers it takes to yield a bus automata
	 */
	TravellersPerBus: 0x8c3e8185,
	/**
	 * Types of occupants
	 */
	OccupantTypes: {
		[kToPrimitive]: () => 0x8cb3511f,
		[kPropertyId]: 0x8cb3511f,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		R$: 0x00001010,
		R$$: 0x00001020,
		R$$$: 0x00001030,
		CS$: 0x00003110,
		CS$$: 0x00003120,
		CS$$$: 0x00003130,
		CO$$: 0x00003320,
		CO$$$: 0x00003330,
		IR: 0x00004100,
		ID: 0x00004200,
		IM: 0x00004300,
		IH: 0x00004400,
	},
	/**
	 * mnWeeksForCompleteTemperatureSimulation
	 */
	MnWeeksForCompleteTemperatureSimulation: {
		[kToPrimitive]: () => 0xa7607d70,
		[kPropertyId]: 0xa7607d70,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * mnWeeksForCompleteMoistureSimulation
	 */
	MnWeeksForCompleteMoistureSimulation: {
		[kToPrimitive]: () => 0xa7607d71,
		[kPropertyId]: 0xa7607d71,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * mnSimulationSpreadWritingRadius
	 */
	MnSimulationSpreadWritingRadius: {
		[kToPrimitive]: () => 0xa7607d72,
		[kPropertyId]: 0xa7607d72,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientTemperature
	 */
	MfYearlyAmbientTemperature: {
		[kToPrimitive]: () => 0xa7607d73,
		[kPropertyId]: 0xa7607d73,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientTemperatureVariation
	 */
	MfYearlyAmbientTemperatureVariation: {
		[kToPrimitive]: () => 0xa7607d74,
		[kPropertyId]: 0xa7607d74,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientTemperatureVariationFactor
	 */
	MfYearlyAmbientTemperatureVariationFactor: {
		[kToPrimitive]: () => 0xa7607d75,
		[kPropertyId]: 0xa7607d75,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mnSeaModerationRadius
	 */
	MnSeaModerationRadius: {
		[kToPrimitive]: () => 0xa7607d76,
		[kPropertyId]: 0xa7607d76,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * mfSeaModerationFactor
	 */
	MfSeaModerationFactor: {
		[kToPrimitive]: () => 0xa7607d77,
		[kPropertyId]: 0xa7607d77,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfAltitudeTemperatureFactor
	 */
	MfAltitudeTemperatureFactor: {
		[kToPrimitive]: () => 0xa7607d78,
		[kPropertyId]: 0xa7607d78,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfWindChillTemperatureFactor
	 */
	MfWindChillTemperatureFactor: {
		[kToPrimitive]: () => 0xa7607d79,
		[kPropertyId]: 0xa7607d79,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientMoisture
	 */
	MfYearlyAmbientMoisture: {
		[kToPrimitive]: () => 0xa7607d7a,
		[kPropertyId]: 0xa7607d7a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientMoistureVariation
	 */
	MfYearlyAmbientMoistureVariation: {
		[kToPrimitive]: () => 0xa7607d7b,
		[kPropertyId]: 0xa7607d7b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientMoistureVariationFactor
	 */
	MfYearlyAmbientMoistureVariationFactor: {
		[kToPrimitive]: () => 0xa7607d7c,
		[kPropertyId]: 0xa7607d7c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Wind effect on hill moisture (H20 fractional units per m/s of
	 * perpendicular wind penetration)
	 */
	MfMoistureHillFactor: {
		[kToPrimitive]: () => 0xa7607d7d,
		[kPropertyId]: 0xa7607d7d,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Moisture boost for areas detected as valleys (0-1)
	 */
	MfValleyMoistureBoost: {
		[kToPrimitive]: () => 0xa7607d7e,
		[kPropertyId]: 0xa7607d7e,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum concavity required to detect area as valley (linear height
	 * deviation in meters)
	 */
	MfMoistureValleySlopeThreshold: {
		[kToPrimitive]: () => 0xa7607d7f,
		[kPropertyId]: 0xa7607d7f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Amplitude of plasma-based noise in moisture map (map creation only)
	 */
	MMoistureVariationScale: 0xa7607d80,
	/**
	 * Amplitude of high-freq. dithering noise in moisture map (map creation
	 * only)
	 */
	MMoistureDitherScale: 0xa7607d81,
	/**
	 * mfYearlyAmbientWindSpeed
	 */
	MfYearlyAmbientWindSpeed: {
		[kToPrimitive]: () => 0xa7607d86,
		[kPropertyId]: 0xa7607d86,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientWindDirection[0]
	 */
	MfYearlyAmbientWindDirection0: {
		[kToPrimitive]: () => 0xa7607d87,
		[kPropertyId]: 0xa7607d87,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * mfYearlyAmbientWindDirection[1]
	 */
	MfYearlyAmbientWindDirection1: {
		[kToPrimitive]: () => 0xa7607d88,
		[kPropertyId]: 0xa7607d88,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Angular window for periodic variation of ambient wind direction (0-90
	 * degrees)
	 */
	MfWindPerturbationRange: {
		[kToPrimitive]: () => 0xa7607d89,
		[kPropertyId]: 0xa7607d89,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Amount of trash burned per month
	 */
	IncineratorMonthlyCapacity: 0xa8ebcf0c,
	/**
	 * kSC4FloraFamilyProperty
	 */
	kSC4FloraFamilyProperty: {
		[kToPrimitive]: () => 0xa8f149c5,
		[kPropertyId]: 0xa8f149c5,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinace has on water use
	 */
	WaterUseReduction: {
		[kToPrimitive]: () => 0xa8f4eb0c,
		[kPropertyId]: 0xa8f4eb0c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When right-click scrolling, this is the number of pixels away from the
	 * anchor at which the scrolling speed maxes out.
	 */
	IntelliScrollOuterRadiusPixels: 0xca383ca3,
	/**
	 * Number of cells surrounding buildings and zones that will also be powered
	 */
	PowerRadiationRadius: 0xa911e2f1,
	/**
	 * Cost of maintaining each cell of wire connected to this power pole
	 */
	PowerLineMonthlyUpkeep: {
		[kToPrimitive]: () => 0xa9132ef9,
		[kPropertyId]: 0xa9132ef9,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When a cell has this much air pollution, it's considered polluted
	 */
	AirPollutionThreshold: 0xa91351a6,
	/**
	 * Multiplier to tweak the relative weighting of the R$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_R$: {
		[kToPrimitive]: () => 0xa9188ef5,
		[kPropertyId]: 0xa9188ef5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Initial and Maximum allowed funding percentage for health department
	 */
	HealthInitMaxAllowedFunding: {
		[kToPrimitive]: () => 0xa9189479,
		[kPropertyId]: 0xa9189479,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum duration of a School strike, in months
	 */
	SchoolStrikeDuration: 0xa91894bc,
	/**
	 * Multiplier to tweak the relative weighting of the CS$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_Cs$: {
		[kToPrimitive]: () => 0xa918c929,
		[kPropertyId]: 0xa918c929,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the IDirty occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_IDirty: {
		[kToPrimitive]: () => 0xa918c942,
		[kPropertyId]: 0xa918c942,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200) by which this ordinance affects coverage
	 * radius of schools
	 */
	SchoolCoverageRadiusEffect: {
		[kToPrimitive]: () => 0xa91b3af4,
		[kPropertyId]: 0xa91b3af4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps % of coverage distance from a school to EQ boost %
	 */
	SchoolEffectivenessVsDistanceEffect: {
		[kToPrimitive]: () => 0xa91b3afa,
		[kPropertyId]: 0xa91b3afa,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min quad widths (meters) in different zooms
	 */
	ShimmerMinQuadWidth: {
		[kToPrimitive]: () => 0xa91cbe00,
		[kPropertyId]: 0xa91cbe00,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max quad widths (meters) in different zooms
	 */
	ShimmerMaxQuadWidth: {
		[kToPrimitive]: () => 0xa91cbe01,
		[kPropertyId]: 0xa91cbe01,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of shimmer quads to have if all of a 256x256 happenned to be water
	 */
	ShimmerQuadDensity: {
		[kToPrimitive]: () => 0xa91cbe02,
		[kPropertyId]: 0xa91cbe02,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maximum allowed funding percentage for roads
	 */
	MaxRoadsFundingPercent: {
		[kToPrimitive]: () => 0xa92356ae,
		[kPropertyId]: 0xa92356ae,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum allowed funding percentage for mass transit
	 */
	MaxMassTransitFundingPercent: {
		[kToPrimitive]: () => 0xa92356af,
		[kPropertyId]: 0xa92356af,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Additional cost to travel on a damaged road tile
	 */
	DamagedRoadExtraStepCost: {
		[kToPrimitive]: () => 0xa92356b0,
		[kPropertyId]: 0xa92356b0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Income gained for each tile: walk, car, bus, rail, freight truck, freight
	 * train, subway, lt rl
	 */
	IncomePerTileByTravelType: {
		[kToPrimitive]: () => 0xa92356b1,
		[kPropertyId]: 0xa92356b1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percent chance an RCI trip will allow use of mass transit
	 */
	MassTransitUsageChance: {
		[kToPrimitive]: () => 0xa92356b2,
		[kPropertyId]: 0xa92356b2,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Level at which traffic volume becomes uncomfortable to sims (rd, rl, hwy,
	 * st, x, x, ave, sub, lr)
	 */
	NetworkTrafficCapacity: {
		[kToPrimitive]: () => 0xa92356b3,
		[kPropertyId]: 0xa92356b3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Order: walk, car, bus, train, subway, lt rl
	 */
	TravelTypeGeneratesTraffic: {
		[kToPrimitive]: () => 0xa92356b4,
		[kPropertyId]: 0xa92356b4,
		[kPropertyType]: [Boolean],
		[kInspect]: inspector,
	},
	/**
	 * Order: walk, car, bus, train, subway, lt rl
	 */
	TravelTypeCanReachDestination: {
		[kToPrimitive]: () => 0xa92356b5,
		[kPropertyId]: 0xa92356b5,
		[kPropertyType]: [Boolean],
		[kInspect]: inspector,
	},
	/**
	 * How far a trip can jump from its starting zone to a road/rail/etc
	 */
	MaximumDistanceFromOriginToNetwork: 0xa92356b8,
	/**
	 * Maps speed multiplier as a function of congestion
	 */
	CongestionVsSpeed: {
		[kToPrimitive]: () => 0xa92356b9,
		[kPropertyId]: 0xa92356b9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum time for a commute trip in minutes
	 */
	CommuteTripMaxTime: {
		[kToPrimitive]: () => 0xa92356ba,
		[kPropertyId]: 0xa92356ba,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Diminishing effect of an intersection or turn on capacity
	 */
	IntersectionAndTurnCapacityEffect: {
		[kToPrimitive]: () => 0xa92356bb,
		[kPropertyId]: 0xa92356bb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Starting overhead cost in time for each travel type
	 */
	TripStartingCostByTravelType: {
		[kToPrimitive]: () => 0xa92356bc,
		[kPropertyId]: 0xa92356bc,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Multiplies building capacity to determine number of jobs there
	 */
	JobScalingConstant: {
		[kToPrimitive]: () => 0xa92356bd,
		[kPropertyId]: 0xa92356bd,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Amount of background (non-trip) traffic volume generated per population
	 * point for R, C, and I zones
	 */
	PopulationBackgroundTraffic: {
		[kToPrimitive]: () => 0xa92356be,
		[kPropertyId]: 0xa92356be,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Order: walk, car, bus, train, freight truck, freight train, subway, lt rl
	 */
	TravelTypeAffectedByTraffic: {
		[kToPrimitive]: () => 0xa92356bf,
		[kPropertyId]: 0xa92356bf,
		[kPropertyType]: [Boolean],
		[kInspect]: inspector,
	},
	/**
	 * Maps Average age of a tract to the % HQ boost the hospital gives the
	 * tract
	 */
	HospitalEffectivenessVsAverageAge: {
		[kToPrimitive]: () => 0xa92ae3bd,
		[kPropertyId]: 0xa92ae3bd,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * The EQ boost the school gives at it's origin.
	 */
	SchoolEQBoost: {
		[kToPrimitive]: () => 0xa92ae446,
		[kPropertyId]: 0xa92ae446,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Variable length list of type IDs for this school
	 */
	SchoolTypeIDList: 0xa92d8e40,
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects all EQ values
	 */
	SchoolEQBoostEffect: {
		[kToPrimitive]: () => 0xa92d9d7a,
		[kPropertyId]: 0xa92d9d7a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps wealth level to HQ boost %
	 */
	HospitalEffectivenessVsWealth: {
		[kToPrimitive]: () => 0xa92d9fcd,
		[kPropertyId]: 0xa92d9fcd,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps amount of water pollution in a tract to the rate at which the HQ in
	 * that tract decays
	 */
	WaterPollutionToHQDecayCurve: {
		[kToPrimitive]: () => 0xa941b028,
		[kPropertyId]: 0xa941b028,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Default depth of underground network trench floor below terrain
	 */
	UndergroundTrenchFloorDepth: {
		[kToPrimitive]: () => 0xa96e5641,
		[kPropertyId]: 0xa96e5641,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Uint32: The class ID of the prop occupant to create. If not present, then
	 * 'kGZCLSID_cSC4PropOccupant' is used.
	 */
	PropOccupantClassID: 0xa977a86b,
	/**
	 * RGBA color for watered terrain cells in pipe view
	 */
	WateredTerrainColor: {
		[kToPrimitive]: () => 0xa97f42ce,
		[kPropertyId]: 0xa97f42ce,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the IHighTech occupant
	 * type's taxes
	 */
	BudgetTaxRateOccWeight_IHighTech: {
		[kToPrimitive]: () => 0xa9a36e47,
		[kPropertyId]: 0xa9a36e47,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Which zone types will generate occupant trips
	 */
	OccupantTripZoneFilter: {
		[kToPrimitive]: () => 0xa9af1e54,
		[kPropertyId]: 0xa9af1e54,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Which zone purpose types will generate occupant trips
	 */
	OccupantTripPurposeFilter: {
		[kToPrimitive]: () => 0xa9af1e55,
		[kPropertyId]: 0xa9af1e55,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Ticks to next fire stage by stage
	 */
	StageTime: {
		[kToPrimitive]: () => 0xa9b6ecd3,
		[kPropertyId]: 0xa9b6ecd3,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Ticks between spread attempts per stage
	 */
	SpreadTime: {
		[kToPrimitive]: () => 0xa9b6ecd4,
		[kPropertyId]: 0xa9b6ecd4,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * In meters beyond occupant/lot boundaries
	 */
	SpreadRadius: {
		[kToPrimitive]: () => 0xa9b6ecd5,
		[kPropertyId]: 0xa9b6ecd5,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Wind effect on spread direction is directly scaled by this
	 */
	WindScalar: {
		[kToPrimitive]: () => 0xa9b6ecd6,
		[kPropertyId]: 0xa9b6ecd6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of top fires per unit area
	 */
	FiresAreaTop: {
		[kToPrimitive]: () => 0xa9b6ecd7,
		[kPropertyId]: 0xa9b6ecd7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Number of side fires per unit area
	 */
	FiresAreaSide: {
		[kToPrimitive]: () => 0xa9b6ecd8,
		[kPropertyId]: 0xa9b6ecd8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * The rate at which a fire declines as a function of protection
	 */
	ExtinguishRateVsProtection: {
		[kToPrimitive]: () => 0xa9b6ecd9,
		[kPropertyId]: 0xa9b6ecd9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps Flammability(0-255) to percent chance(0-100) of fire starting when
	 * ignited
	 */
	PercentFireStartVsFlammability: {
		[kToPrimitive]: () => 0xa9b6ecda,
		[kPropertyId]: 0xa9b6ecda,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How far from water (in cells) does the beach extend
	 */
	MaxBeachWidth: {
		[kToPrimitive]: () => 0xa9c283d0,
		[kPropertyId]: 0xa9c283d0,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How high above the sea level(meters), does the beach extend
	 */
	MaxBeachAltitude: {
		[kToPrimitive]: () => 0xa9c283d1,
		[kPropertyId]: 0xa9c283d1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Offsets (in meters) of fire team from center of engine and director from
	 * front of engine
	 */
	FireCrewOffsets: {
		[kToPrimitive]: () => 0xa9d6cc17,
		[kPropertyId]: 0xa9d6cc17,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min Percentage (0.0-1.0) of fire team efficiency that will give the
	 * super, normal, and incompetent animations
	 */
	FireCrewCompetencePct: {
		[kToPrimitive]: () => 0xa9d6cc18,
		[kPropertyId]: 0xa9d6cc18,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Speed of scrolling when arrow key is held down.
	 */
	KeyboardScrollSpeed: {
		[kToPrimitive]: () => 0xa9e581fb,
		[kPropertyId]: 0xa9e581fb,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The Max slope this lot will develop on
	 */
	NetworkLotConfigPropertyMaxSlopeAllowed: {
		[kToPrimitive]: () => 0xaa120972,
		[kPropertyId]: 0xaa120972,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * The Min slope this lot will develop on
	 */
	NetworkLotConfigPropertyMinSlopeAllowed: {
		[kToPrimitive]: () => 0xaa120973,
		[kPropertyId]: 0xaa120973,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	CrimeName: {
		[kToPrimitive]: () => 0xaa12fcb0,
		[kPropertyId]: 0xaa12fcb0,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * type, group, and instance ID
	 */
	IconResourceKey: {
		[kToPrimitive]: () => 0xaa12fcb1,
		[kPropertyId]: 0xaa12fcb1,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * The crime grid tract value will be increased by this amount
	 */
	CrimeGridValue: {
		[kToPrimitive]: () => 0xaa12fcb5,
		[kPropertyId]: 0xaa12fcb5,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If set to non-zero value, this will trigger a fire
	 */
	TriggerFire: {
		[kToPrimitive]: () => 0xaa12fcb6,
		[kPropertyId]: 0xaa12fcb6,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Lot conditions compatible with crime
	 */
	LotConditionFilter: {
		[kToPrimitive]: () => 0xaa12fcb7,
		[kPropertyId]: 0xaa12fcb7,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Relative occurance weight of this crime, only has meaning relative to
	 * values for other crimes.
	 */
	RelativeOccurrance: {
		[kToPrimitive]: () => 0xaa12fcb8,
		[kPropertyId]: 0xaa12fcb8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Water pumps will not function if water pollution higher than this level
	 */
	MaxAcceptablePumpedWaterPollutionLevel: 0xaa161f81,
	/**
	 * This is an optional property. If defined and less than 0, the building is
	 * a "health hazard" (in a way other than the standard pollution types) and
	 * will depress HQ in an area defined by the radius and strength. If the
	 * number is  greater than 0 then it will benefit health in the area.
	 */
	HealthEffectStrength: {
		[kToPrimitive]: () => 0xaa19f6ea,
		[kPropertyId]: 0xaa19f6ea,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * List of groups this occupant belongs to.
	 */
	OccupantGroups: {
		[kToPrimitive]: () => 0xaa1dd396,
		[kPropertyId]: 0xaa1dd396,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		BuildingResidential: 0x00001000,
		BuildingCommercial: 0x00001001,
		BuildingIndustrial: 0x00001002,
		BuildingTransportation: 0x00001003,
		BuildingUtility: 0x00001004,
		BuildingCivic: 0x00001005,
		BuildingPark: 0x00001006,
		BuildingScriptingUse: 0x00001009,
		BuildingFauna_generate: 0x0000100a,
		BuildingCommercialFleaMarket: 0x00001100,
		BuildingCommercialMiddleClassMall: 0x00001101,
		BuildingCommercialFashionCentre: 0x00001102,
		BuildingCommercialDrivein: 0x00001103,
		BuildingCommercialMultiplex: 0x00001104,
		BuildingCommercialDinnerTheater: 0x00001105,
		BuildingCommercialFleaBagMotel: 0x00001106,
		BuildingCommercialFamilyCourt: 0x00001107,
		BuildingCommercialLuxurySpa: 0x00001108,
		BuildingCommercialGreasePit: 0x00001109,
		BuildingCommercialServiceStation: 0x0000110a,
		BuildingCommercialCarCarCentre: 0x0000110b,
		BuildingCommercialUsedCarCheap: 0x0000110c,
		BuildingCommercialCarDealership: 0x0000110d,
		BuildingCommercialLuxuryAutoCentr: 0x0000110e,
		BuildingCommercialTacoStand: 0x0000110f,
		BuildingCommercialFamilyDiner: 0x00001110,
		BuildingCommercialChezFancy: 0x00001111,
		BuildingCommercialCinema: 0x00001112,
		BuildingCommercialMaxisSimTheatre: 0x00001113,
		BuildingCommercialFamilyInn: 0x00001114,
		BuildingCommercialRitzy: 0x00001115,
		BuildingCommercialSimcys: 0x00001116,
		BuildingCommercialSims4thAve: 0x00001117,
		BuildingR$: 0x00011010,
		BuildingR$$: 0x00011020,
		BuildingR$$$: 0x00011030,
		BuildingCO$$: 0x00013320,
		BuildingCO$$$: 0x00013330,
		BuildingCS$: 0x00013110,
		BuildingCS$$: 0x00013120,
		BuildingCS$$$: 0x00013130,
		BuildingIA: 0x00014100,
		BuildingID: 0x00014200,
		BuildingIM: 0x00014300,
		BuildingIHT: 0x00014400,
		BuildingCommercialCar: 0x00021000,
		BuildingCommercialFood: 0x00021001,
		BuildingCommercialShop: 0x00021002,
		BuildingCommercialMovie: 0x00021003,
		BuildingCommercialHotel: 0x00021004,
		BuildingLargeCommercial: 0x00031000,
		BuildingRail: 0x00001300,
		BuildingBus: 0x00001301,
		BuildingSubway: 0x00001302,
		BuildingElTrain: 0x00001303,
		BuildingFerry: 0x00001304,
		BuildingPassengerRail: 0x00001305,
		BuildingFreightRail: 0x00001306,
		BuildingMonoRail: 0x00001307,
		BuildingCarFerry: 0x00001308,
		BuildingPassengerFerry: 0x00001309,
		BuildingMiscTransit: 0x0000130a,
		BuildingTollBooth: 0x0000130b,
		BuildingPower: 0x00001400,
		BuildingWater: 0x00001401,
		BuildingLandfill: 0x00001402,
		BuildingNuclear: 0x00001403,
		BuildingRecycle: 0x00001404,
		BuildingToxicDump: 0x00001405,
		BuildingLandfillZone: 0x00001406,
		BuildingPolice: 0x00001500,
		BuildingJail: 0x00001501,
		BuildingFire: 0x00001502,
		BuildingSchool: 0x00001503,
		BuildingCollege: 0x00001504,
		BuildingLibrary: 0x00001505,
		BuildingMuseum: 0x00001506,
		BuildingHealth: 0x00001507,
		BuildingAirport: 0x00001508,
		BuildingSeaport: 0x00001509,
		BuildingLandmark: 0x0000150a,
		BuildingReward: 0x0000150b,
		BuildingLandmarkQueue: 0x0000150c,
		BuildingPoliceBig: 0x0000150d,
		BuildingPoliceSm: 0x0000150e,
		BuildingSchoolsK6: 0x0000150f,
		BuildingSchoolsHS: 0x00001510,
		BuildingCourthouse: 0x00001511,
		BuildingClinic: 0x00001512,
		BuildingHospital: 0x00001513,
		BuildingSchoolsPrivate: 0x00001514,
		BuildingDeluxePoliceStation: 0x00001515,
		BuildingPoliceKiosk: 0x00001516,
		BuildingLandingStrip: 0x00001517,
		BuildingDeluxeFireStation: 0x00001518,
		BuildingWaterTransit: 0x00001519,
		BuildingLargeHealth: 0x0000151a,
		BuildingSchoolOther: 0x0000151b,
		BuildingHealthOther: 0x0000151c,
		BuildingCemetary: 0x00001700,
		BuildingPetCemetary: 0x00001701,
		BuildingZoo: 0x00001702,
		BuildingVIP: 0x00001900,
		BuildingTourist: 0x00001901,
		BuildingCountryClub: 0x00001902,
		BuildingTaxi_Maker: 0x00001903,
		BuildingAmbulanceMaker: 0x00001904,
		BuildingDMV: 0x00001905,
		BuildingStadium: 0x00001906,
		BuildingWorship: 0x00001907,
		BuildingNiteClub: 0x00001908,
		BuildingOpera: 0x00001909,
		BuildingTVStation: 0x00001910,
		BuildingTVMagnet: 0x00001911,
		BuildingFarmland: 0x00001912,
		BuildingBizLawyerAttack: 0x00001913,
		BuildingArmyBase: 0x00001914,
		BuildingArmyMissileRange: 0x00001915,
		BuildingArmyTank: 0x00001916,
		BuildingApeEscape: 0x00001917,
		BuildingMaxis: 0x00001918,
		BuildingDogMagnet: 0x00001919,
		BuildingYIMBY: 0x00001920,
		BuildingConventionCrowd: 0x00001921,
		BuildingKidCrowd: 0x00001922,
		BuildingSimCrowdDayR10Small: 0x00001923,
		BuildingSimCrowdDayR70Lg: 0x00001924,
		BuildingStateFair: 0x00001925,
		BuildingBusStop: 0x00001926,
		BuildingSimCrowdStand: 0x00001927,
		BuildingNIMBY: 0x00001928,
		BuildingCrowdBiz: 0x00001929,
		BuildingCrowdWhiteCoat: 0x00001930,
		BuildingArmy_Ped: 0x00001931,
		BuildingArmy_JumpinJacks: 0x00001932,
		BuildingZombieBldg: 0x00001933,
		BuildingMowerBldg: 0x00001934,
		BuildingLandmarkOgle: 0x00001935,
		BuildingBurningDudeMaker: 0x00001936,
		BuildingCrowdStandReturn: 0x00001937,
		BuildingMayorHouse: 0x00001938,
		BuildingIcecreamSpawner: 0x00001939,
		BuildingCasino: 0x00001940,
		BuildingMarina: 0x00001941,
		BuildingStrikableFire: 0x00001a00,
		BuildingStrikablePolice: 0x00001a01,
		BuildingStrikableHealth: 0x00001a02,
		BuildingStrikableEducation: 0x00001a03,
		BuildingStrikableTransit: 0x00001a04,
		StyleChicago: 0x00002000,
		StyleNewYork: 0x00002001,
		StyleHouston: 0x00002002,
		StyleEuro: 0x00002003,
		IndustryAnchor: 0x00003000,
		IndustryMechanical: 0x00003001,
		IndustryOut: 0x00003002,
		Automaton: 0x00004000,
		AutomataPedestrian: 0x00004001,
		AutomataVehicle: 0x00004002,
		AutomataAircraft: 0x00004003,
		AutomataWatercraft: 0x00004004,
		AutomataTrain: 0x00004005,
		AutomataChild: 0x00004100,
		AutomataConstructionSim: 0x00004101,
		AutomataCrimeSim: 0x00004102,
		AutomataFirefighter: 0x00004103,
		AutomataSimFireCrew: 0x00004104,
		AutomataPoliceMultipleWalkingStrikeSim: 0x00004105,
		AutomataProtestor: 0x00004106,
		AutomataSim: 0x00004107,
		AutomataPoliceMultipleStandingStrikeSim: 0x00004108,
		AutomataFiremenMultipleWalkingStrikeSim: 0x00004109,
		AutomataFiremanMultipleStandingStrikeSim: 0x0000410a,
		AutomataRiotingStandingSim: 0x0000410b,
		AutomataRiotingWalkingSim: 0x0000410c,
		AutomataPolice: 0x0000410d,
		AutomataFauna: 0x0000410e,
		AutomataRiotPolice: 0x0000410f,
		AutomataRiotPoliceMultipleWalkingSim: 0x00004110,
		AutomataRiotPoliceMultipleStandingSim: 0x00004111,
		AutomataPrisonerJailInhabitants: 0x00004112,
		AutomataEducationMultipleStandingStrikeSim: 0x00004113,
		AutomataEducationMultipleWalkingStrikeSim: 0x00004114,
		AutomataMedicalMultipleStandingStrikeSim: 0x00004115,
		AutomataMedicalMultipleWalkingStrikeSim: 0x00004116,
		AutomataTransitMultipleStandingStrikeSim: 0x00004117,
		AutomataTransitMultipleWalkingStrikeSim: 0x00004118,
		AutomataArsonist: 0x00004119,
		AutomataBusinessPerson: 0x00004120,
		AutomataChimp: 0x00004121,
		AutomataDog: 0x00004122,
		AutomataLlama: 0x00004123,
		AutomataEducationWorker: 0x00004124,
		AutomataMedicalWorker: 0x00004125,
		AutomataTransitWorker: 0x00004126,
		AutomataChimpExperiment: 0x00004127,
		AutomataFauna_wild: 0x00004128,
		AutomataArmyJoggers: 0x00004129,
		AutomataChainGang: 0x00004130,
		AutomataArmyJumpJacks: 0x00004131,
		AutomataArmyRunInPlace: 0x00004132,
		AutomataFaunaDeer: 0x00004133,
		AutomataFaunaBear: 0x00004134,
		AutomataFaunaElephant: 0x00004135,
		AutomataFaunaGiraffe: 0x00004136,
		AutomataFaunaHorse: 0x00004137,
		AutomataFaunaLion: 0x00004138,
		AutomataFaunaMoose: 0x00004139,
		AutomataFaunaPolarBear: 0x00004140,
		AutomataFaunaRhino: 0x00004141,
		AutomataJailPrisonerCopMagnet: 0x00004142,
		AutomataArmySims: 0x00004143,
		AutomataTVReporter_Ped: 0x00004144,
		AutomataZombie: 0x00004145,
		AutomataMowerDude: 0x00004146,
		AutomataFlamingStuntman: 0x00004147,
		AutomataCarjackingSims: 0x00004148,
		AutomataMySimWalkMale: 0x00004149,
		AutomataMySimWalkFemale: 0x0000414a,
		AutomataBus: 0x00004200,
		AutomataCommuteTrain: 0x00004201,
		AutomataFireEngine: 0x00004202,
		AutomataFreightTrain: 0x00004203,
		AutomataFreightTruck: 0x00004204,
		AutomataGarbageTruck: 0x00004205,
		AutomataMovingVan: 0x00004206,
		AutomataPoliceVehicle: 0x00004207,
		AutomataSubway: 0x00004208,
		AutomataMySimVehicle: 0x00004209,
		AutomataSoccer_Moms: 0x0000420a,
		AutomataCivilian_Cars: 0x0000420b,
		AutomataTaxi_Cars: 0x0000420c,
		AutomataRich_Cars: 0x0000420d,
		AutomataCheap_Cars: 0x0000420e,
		AutomataSchool_Bus: 0x0000420f,
		AutomataLimo: 0x00004210,
		AutomataAmbulance: 0x00004211,
		AutomataToxicCarrier: 0x00004212,
		AutomataHearse: 0x00004213,
		AutomataRecycleTruck: 0x00004214,
		AutomataCommuteTrainEngine: 0x00004215,
		AutomataFreightTrainEngine: 0x00004216,
		AutomataSubwayEngine: 0x00004217,
		AutomataTVReporter: 0x00004218,
		AutomataFarmVehicles: 0x00004219,
		AutomataFreightTrainCaboose: 0x0000421a,
		AutomataU_HaulLeader: 0x0000421b,
		AutomataU_HaulTrailer: 0x0000421c,
		AutomataSubwayTunneler: 0x0000421d,
		AutomataArmyTruck: 0x0000421e,
		AutomataMissileTruck: 0x0000421f,
		AutomataArmyTankMaybe: 0x00004220,
		AutomataArmyTruckLeader: 0x00004221,
		AutomataSemiTruck: 0x00004222,
		AutomataSemiTrailer: 0x00004223,
		AutomataCCDumptruck: 0x00004224,
		AutomataCCGrader: 0x00004225,
		AutomataGetawayVan: 0x00004226,
		AutomataCrimeVehicle: 0x00004227,
		AutomataPatrolCar: 0x00004228,
		AutomataCarjackedVehicle: 0x00004229,
		AutomataIceCreamTruck: 0x0000422a,
		AutomataMayorLimo: 0x0000422b,
		AutomataElTrainEngine: 0x0000422c,
		AutomataElTrain: 0x0000422d,
		AutomataMonorailEngine: 0x0000422e,
		AutomataMonorail: 0x0000422f,
		AutomataSteamTrain: 0x00004230,
		AutomataPoliceVan: 0x00004231,
		AutomataCementMixer: 0x00004232,
		AutomataStandardFreightEngine: 0x00004233,
		AutomataExpensiveSportsCar: 0x00004234,
		AutomataTrainTrackChecker: 0x00004235,
		AutomataTrainCarSpill: 0x00004236,
		AutomataHelicopter: 0x00004300,
		AutomataPoliceHelicopter: 0x00004301,
		AutomataPlanes: 0x00004302,
		AutomataFirePlanes: 0x00004303,
		AutomataNewsHelicopter: 0x00004304,
		AutomataMedicalHelicopter: 0x00004305,
		AutomataCropDuster: 0x00004306,
		AutomataAttackHelicopter: 0x00004307,
		AutomataUFO: 0x00004308,
		AutomataStuntPlane: 0x00004311,
		AutomataFighterPlane: 0x00004312,
		AutomataSkyDiver: 0x00004313,
		AutomataFerryBoat: 0x00004400,
		AutomataSpeedBoat: 0x00004401,
		AutomataPassengerOnlyFerryBoat: 0x00004402,
		AutomataYacht: 0x00004406,
		AutomataSailCat: 0x00004407,
		AutomataMotorboat: 0x00004408,
		AutomataOffshore: 0x00004409,
		AutomataCargo: 0x0000440a,
		AutomataFishingboat: 0x0000440c,
		AutomataLuxsailboat: 0x0000440d,
		AutomataSailboat: 0x0000440e,
		AutomataTug: 0x00004410,
		AutomataCruiseship: 0x00004411,
		AutomataWatercraftSmall: 0x00004412,
		AutomataWatercraftMedium: 0x00004413,
		AutomataWatercraftLarge: 0x00004414,
		AutomataMetalWhale: 0x00004415,
		PropZot: 0x00005001,
		PropStoplight: 0x00005002,
		PropRRCrossing: 0x00005003,
		PropFlora: 0x00005004,
		PropFireOccupant: 0x00005005,
		PropToxicOccupant: 0x00005006,
		PropConstructionOccupant: 0x00005007,
		AutomataBMWCars: 0x00047000,
		AutomataFordCars: 0x00047001,
		AutomataHondaCars: 0x00047002,
		AutomataMercedesCars: 0x00047003,
		AutomataVWCars: 0x00047004,
		MikeSeithBMWDealer: 0x0004d000,
		MikeSeithFordDealer: 0x0004d001,
		MikeSeithHondaDealer: 0x0004d002,
		MikeSeithMercedesDealer: 0x0004d003,
		MikeSeithVWDealer: 0x0004d004,
		CSXCSXLots: 0xb5c00000,
		CSXRewards: 0xb5c00001,
		CSXFields: 0xb5c00002,
		CSXFarms: 0xb5c00003,
		CSXResidential: 0xb5c00004,
		CSXCommercial: 0xb5c00005,
		CSXIndustrial: 0xb5c00006,
		CSXCivics: 0xb5c00007,
		BTEGascookerLots: 0xb5c0000a,
		BTEMarketChain: 0xb5c0000b,
		BTELiquorChain: 0xb5c0000c,
		BTETechnologyChain: 0xb5c0000d,
		CSXParks: 0xb5c0000e,
		BTEIndustrialChain: 0xb5c0000f,
		CSXCommercialFarms: 0xb5c00010,
		BTETourismChain: 0xb5c00011,
		BTEPetronasTriggerMansion: 0xb5c00012,
		BTEPipelines: 0xb5c00013,
		BTEWoodlandsMenuTrigger: 0xb5c00014,
		BTENatureConservation: 0xb5c00015,
		CSXMega8x8Industrials: 0xb5c00016,
		CSXMining: 0xb5c00017,
		CSXTimberIndustry: 0xb5c00018,
		BTEJRJLots: 0xb5c00019,
		BTEJRJCanals: 0xb5c00020,
		SGSainsburyLocal: 0xb5c00102,
		SGFuddruckers: 0xb5c00110,
		SGRubyTuesday: 0xb5c00111,
		SGCaptJacksSeafood: 0xb5c00112,
		SGHomes: 0xb5c00150,
		SGShops: 0xb5c00151,
		SGOffices: 0xb5c00152,
		SGGrocery: 0xb5c00153,
		SGHotels: 0xb5c00154,
		SGRestaurants: 0xb5c00156,
		SGEntertainment: 0xb5c00157,
		SGUtility: 0xb5c00158,
		SGUnDefined: 0xb5c00159,
		SGIndustrial: 0xb5c0015a,
		SGMagicalFruitBeanFarms: 0xb5c00160,
		SGSallysCornFields: 0xb5c00161,
		SGShanonnsFlowerFields: 0xb5c00162,
		SGGoobersPeanuts: 0xb5c00163,
		SGHollandTulips: 0xb5c00164,
		SGAmberWavesHeat: 0xb5c00165,
		SGRiceFarms: 0xb5c00166,
		SGMelonysMelonFarms: 0xb5c00167,
		SGSugarCanePlantation: 0xb5c00168,
		SGPirateRumDestillery: 0xb5c00169,
		SGCattleFarm: 0xb5c0016a,
		SGDennysRestaurant: 0xb5c00175,
		SGKellysEscort: 0xb5c00176,
		SGPropsSwimmingPools: 0xb5c0017a,
		SGPropsPlayGyms: 0xb5c0017b,
		SGNIMBY: 0xb5c00180,
		SGWaterway: 0xb5c00185,
		SGMassTransit: 0xb5c00186,
		SGSGGeneral: 0xb5c001ff,
		DWDWLots: 0xb5c00200,
		DWIHTPharmSet: 0xb5c00201,
		DWElRailSet: 0xb5c00202,
		DWArtDecoHotels: 0xb5c00203,
		DWSmallAussieShops: 0xb5c00204,
		DWServos: 0xb5c00205,
		DWRaisedParks: 0xb5c00206,
		DWUndefined: 0xb5c00207,
		JBSGeneral: 0xb5c003a0,
		JBSSmallTownUSA: 0xb5c003a1,
		JBSSHURProject: 0xb5c003a2,
		BLSIndoorNurseryFarms: 0xb5c00400,
		BLSOutdoorNurseryFarms: 0xb5c00401,
		BLSLimeTreeFields: 0xb5c00402,
		BLSLemonTreeFields: 0xb5c00403,
		BLSFlowerFarms: 0xb5c004a0,
		BLSResidential: 0xb5c004a5,
		BLSTheDeadParrot: 0xb5c004a6,
		BLSCommGeneral: 0xb5c004b0,
		BLSCommAlcohol: 0xb5c004b1,
		BLSCommHerbs: 0xb5c004b2,
		BLSCommFlowers: 0xb5c004b3,
		BLSCommFood: 0xb5c004b4,
		BLSIndustrial: 0xb5c004c0,
		BLSEquine: 0xb5c004d0,
		BLSCasaDeSoleil: 0xb5c004e0,
		BLSAgaveFarms: 0xb5c004e1,
		BLSTapasBars: 0xb5c004e2,
		BLSDonQuixotePark: 0xb5c004e3,
		BLSPavillionPark: 0xb5c004e4,
		BLSMinervaPark: 0xb5c004e5,
		BLSFardenIndependencia: 0xb5c004e6,
		BLSSeaplaneBase: 0xb5c004e7,
		BLSBullRanch: 0xb5c004e8,
		BLSFarms: 0xb5c004fa,
		BLSBananaFarms: 0xb5c004fb,
		CPEarly19thCenturyAmericanBuildings: 0xb5c009a1,
		CPLate19thCenturyAmericanBuildings: 0xb5c009a2,
		CPEarly20thCenturyAmericanBuildings: 0xb5c009a3,
		CPLate20thCenturyAmericanBuildings: 0xb5c009a4,
		CP21stCenturyBuildings: 0xb5c009a5,
		CPTimberRelatedBusinessindustry: 0xb5c009b0,
		CPOutdoorRecreationRelatedBusinessindustry: 0xb5c009b1,
		CPGrainRelatedBusinessindustry: 0xb5c009b2,
		CPMaritimeRelatedBusinessindustry: 0xb5c009b3,
		CPGamblingRelatedBusinessindustry: 0xb5c009b4,
		CPConstructionRelatedBusinessindustry: 0xb5c009b5,
		CPLogBuildings: 0xb5c009c1,
		CPCycledoggLots: 0xb5c009cd,
		CPRCILotsContainingLargeConiferTrees: 0xb5c009d0,
		CPRCILotsContainingSeasonalTrees: 0xb5c009d1,
		CPMedievalBuildings: 0xb5c009e1,
		CPPre19thCenturyFrenchRCI: 0xb5c009e2,
		CPPre19thCenturyUKRCI: 0xb5c009e3,
		BTECommPubsOrBars: 0xb5c00a01,
		BTECommFinancial: 0xb5c00a02,
		BTECommTourism: 0xb5c00a03,
		BTECommOffices: 0xb5c00a04,
		BTECommW2W: 0xb5c00a05,
		BTECommRestaurants: 0xb5c00a06,
		BTECommGrocers: 0xb5c00a07,
		BTECommRetailers: 0xb5c00a08,
		BTECommPetroleum: 0xb5c00a09,
		BTECommEntertainment: 0xb5c00a0a,
		BTECommFleaMarkets: 0xb5c00a0b,
		BTECommAutoDealers: 0xb5c00a0c,
		BTECommPostalServices: 0xb5c00a0d,
		BTECommDiagonals: 0xb5c00a0e,
		CAMCS$CAMeLot: 0xb5c00aa8,
		CAMCS$Stage9: 0xb5c00aa9,
		CAMCS$Stage10: 0xb5c00aaa,
		CAMCS$Stage11: 0xb5c00aab,
		CAMCS$Stage12: 0xb5c00aac,
		CAMCS$Stage13: 0xb5c00aad,
		CAMCS$Stage14: 0xb5c00aae,
		CAMCS$Stage15: 0xb5c00aaf,
		CAMCS$$CAMeLot: 0xb5c00ab0,
		CAMCS$$Stage9: 0xb5c00ab1,
		CAMCS$$Stage10: 0xb5c00ab2,
		CAMCS$$Stage11: 0xb5c00ab3,
		CAMCS$$Stage12: 0xb5c00ab4,
		CAMCS$$Stage13: 0xb5c00ab5,
		CAMCS$$Stage14: 0xb5c00ab6,
		CAMCS$$Stage15: 0xb5c00ab7,
		CAMCS$$$CAMeLot: 0xb5c00ab8,
		CAMCS$$$Stage9: 0xb5c00ab9,
		CAMCS$$$Stage10: 0xb5c00aba,
		CAMCS$$$Stage11: 0xb5c00abb,
		CAMCS$$$Stage12: 0xb5c00abc,
		CAMCS$$$Stage13: 0xb5c00abd,
		CAMCS$$$Stage14: 0xb5c00abe,
		CAMCS$$$Stage15: 0xb5c00abf,
		CAMCO$$CAMeLot: 0xb5c00ac0,
		CAMCO$$Stage9: 0xb5c00ac1,
		CAMCO$$Stage10: 0xb5c00ac2,
		CAMCO$$Stage11: 0xb5c00ac3,
		CAMCO$$Stage12: 0xb5c00ac4,
		CAMCO$$Stage13: 0xb5c00ac5,
		CAMCO$$Stage14: 0xb5c00ac6,
		CAMCO$$Stage15: 0xb5c00ac7,
		CAMCO$$$CAMeLot: 0xb5c00ac8,
		CAMCO$$$Stage9: 0xb5c00ac9,
		CAMCO$$$Stage10: 0xb5c00aca,
		CAMCO$$$Stage11: 0xb5c00acb,
		CAMCO$$$Stage12: 0xb5c00acc,
		CAMCO$$$Stage13: 0xb5c00acd,
		CAMCO$$$Stage14: 0xb5c00ace,
		CAMCO$$$Stage15: 0xb5c00acf,
		BTEResComplexes: 0xb5c00b01,
		BTEResHighWealth: 0xb5c00b02,
		BTEResMidWealth: 0xb5c00b03,
		BTEResLowWealth: 0xb5c00b04,
		BTEResW2W: 0xb5c00b05,
		CAMR$CAMeLot: 0xb5c00ba8,
		CAMR$Stage9: 0xb5c00ba9,
		CAMR$Stage10: 0xb5c00baa,
		CAMR$Stage11: 0xb5c00bab,
		CAMR$Stage12: 0xb5c00bac,
		CAMR$Stage13: 0xb5c00bad,
		CAMR$Stage14: 0xb5c00bae,
		CAMR$Stage15: 0xb5c00baf,
		CAMR$$CAMeLot: 0xb5c00bb0,
		CAMR$$Stage9: 0xb5c00bb1,
		CAMR$$Stage10: 0xb5c00bb2,
		CAMR$$Stage11: 0xb5c00bb3,
		CAMR$$Stage12: 0xb5c00bb4,
		CAMR$$Stage13: 0xb5c00bb5,
		CAMR$$Stage14: 0xb5c00bb6,
		CAMR$$Stage15: 0xb5c00bb7,
		CAMR$$$CAMeLot: 0xb5c00bb8,
		CAMR$$$Stage9: 0xb5c00bb9,
		CAMR$$$Stage10: 0xb5c00bba,
		CAMR$$$Stage11: 0xb5c00bbb,
		CAMR$$$Stage12: 0xb5c00bbc,
		CAMR$$$Stage13: 0xb5c00bbd,
		CAMR$$$Stage14: 0xb5c00bbe,
		CAMR$$$Stage15: 0xb5c00bbf,
		BTEFieldGrain: 0xb5c00c01,
		BTEFieldFruit: 0xb5c00c02,
		BTEField: 0xb5c00c06,
		BTEFieldTimber: 0xb5c00c07,
		BTEFieldGM: 0xb5c00c08,
		BTEFieldOrganic: 0xb5c00c09,
		BTEFieldHerbs: 0xb5c00c0a,
		BTEFieldTextiles: 0xb5c00c0b,
		BTEFieldNuts: 0xb5c00c0c,
		BTEFieldTobacco: 0xb5c00c0d,
		BTEFieldAlcohol: 0xb5c00c0e,
		BTEFieldBeer: 0xb5c00c0f,
		BTEFieldVegetables: 0xb5c00c10,
		BTEFieldNursery: 0xb5c00c11,
		BTEFieldVineyards: 0xb5c00c12,
		BTEFieldNature: 0xb5c00c13,
		BTEFieldMedicinal: 0xb5c00c14,
		BTEFieldGeneralUse: 0xb5c00c15,
		BTEFarmStage1: 0xb5c00c21,
		BTEFarmStage2: 0xb5c00c22,
		BTEFarmStage3: 0xb5c00c23,
		CAMFarmStage4: 0xb5c00c24,
		CAMFarmStage5: 0xb5c00c25,
		CAMFarmStage6: 0xb5c00c26,
		CAMFarmStage7: 0xb5c00c27,
		BTEFarmMeat: 0xb5c00c30,
		BTEFarmDairy: 0xb5c00c31,
		BTEFarmFish: 0xb5c00c32,
		BTEFarmPoutry: 0xb5c00c33,
		BTEFarmTimber: 0xb5c00c34,
		BTEFarmVegetables: 0xb5c00c35,
		BTEFarmFruit: 0xb5c00c36,
		BTEFarmWine: 0xb5c00c37,
		BTEFarmNursery: 0xb5c00c38,
		BTEFarmHerbs: 0xb5c00c39,
		BTEFarmGrain: 0xb5c00c3a,
		BTEFarmTobacco: 0xb5c00c3b,
		BTEFarmBeer: 0xb5c00c3c,
		BTEFarmAlcohol: 0xb5c00c3d,
		BTEFarmMedicinal: 0xb5c00c3e,
		BTEFarmTextiles: 0xb5c00c3f,
		BTEFarmEquine: 0xb5c00c40,
		BTEFarmGeneralUse: 0xb5c00c45,
		BTEFarmGenModified: 0xb5c00c50,
		BTEFarmOrganic: 0xb5c00c51,
		BTEFarmHomestead: 0xb5c00c52,
		BTEFarmCommercial: 0xb5c00c53,
		BTEIRCAPRelief100: 0xb5c00cc0,
		BTEIRCAPRelief200: 0xb5c00cc1,
		BTEIRCAPRelief400: 0xb5c00cc2,
		BTEIRCAPRelief800: 0xb5c00cc3,
		BTEIRCAPRelief1600: 0xb5c00cc4,
		BTEIRCAPRelief3200: 0xb5c00cc5,
		BTEIRCAPRelief6400: 0xb5c00cc6,
		BTEIRCAPRelief12800: 0xb5c00cc7,
		BTEIRCAPRelief25600: 0xb5c00cc8,
		BTEIRCAPRelief51200: 0xb5c00cc9,
		BTEIRCAPRelief102400: 0xb5c00cca,
		BTEIRCAPRelief204800: 0xb5c00ccb,
		BTEIRCAPRelief409600: 0xb5c00ccc,
		BTEIRCAPRelief819200: 0xb5c00ccd,
		BTEIRCAPRelief1638400: 0xb5c00cce,
		BTEIRCAPRelief3276800: 0xb5c00ccf,
		BTENDEXBuilding: 0xb5c00d01,
		BTESOMYBuilding: 0xb5c00d02,
		BTECivic: 0xb5c00dd0,
		BTEParks: 0xb5c00dd1,
		BTEBSCLandmark: 0xb5c00dd2,
		BTENDEXLandmark: 0xb5c00dd3,
		BTEAdultStore: 0xb5c00dd4,
		BTENIMBYBuilding: 0xb5c00dd5,
		BTEWaterfront: 0xb5c00dd6,
		BTEPEGProductions: 0xb5c00dd7,
		BTEInlandWaterways: 0xb5c00dd8,
		BTEMilitary: 0xb5c00dd9,
		BTESecurity: 0xb5c00dda,
		BTEHealth: 0xb5c00ddb,
		BTEEducation: 0xb5c00ddc,
		BTECulture: 0xb5c00ddd,
		BTEW2WGeneral: 0xb5c00dde,
		BTEReligious: 0xb5c00ddf,
		BTETransitPed: 0xb5c00df0,
		BTETransitCar: 0xb5c00df1,
		BTETransitBus: 0xb5c00df2,
		BTETransitPassenerRail: 0xb5c00df3,
		BTETransitFreightRail: 0xb5c00df4,
		BTETransitSubway: 0xb5c00df5,
		BTETransitElRail: 0xb5c00df6,
		BTETransitMonorail: 0xb5c00df7,
		BTEUtilityWater: 0xb5c00ef0,
		BTEIndDirty: 0xb5c00e01,
		BTEIndManufacturing: 0xb5c00e02,
		BTEIndHiTech: 0xb5c00e03,
		BTEIndWarehouses: 0xb5c00e10,
		BTEIndBakedGoods: 0xb5c00e11,
		BTEIndClothing: 0xb5c00e12,
		BTEIndAutomotive: 0xb5c00e13,
		BTEIndRecreational: 0xb5c00e14,
		BTEIndConstruction: 0xb5c00e15,
		BTEIndMining: 0xb5c00e16,
		BTEIndMilitary: 0xb5c00e17,
		BTEIndElectrical: 0xb5c00e18,
		BTEIndEngineering: 0xb5c00e19,
		CAMIDCAMeLot: 0xb5c00ea8,
		CAMIDStage4: 0xb5c00ea9,
		CAMIDStage5: 0xb5c00eaa,
		CAMIDStage6: 0xb5c00eab,
		CAMIDStage7: 0xb5c00eac,
		CAMIDStage8: 0xb5c00ead,
		CAMIDStage9: 0xb5c00eae,
		CAMIDStage10: 0xb5c00eaf,
		CAMIMCAMeLot: 0xb5c00eb0,
		CAMIMStage4: 0xb5c00eb1,
		CAMIMStage5: 0xb5c00eb2,
		CAMIMStage6: 0xb5c00eb3,
		CAMIMStage7: 0xb5c00eb4,
		CAMIMStage8: 0xb5c00eb5,
		CAMIMStage9: 0xb5c00eb6,
		CAMIMStage10: 0xb5c00eb7,
		CAMIHTCAMeLot: 0xb5c00eb8,
		CAMIHTStage4: 0xb5c00eb9,
		CAMIHTStage5: 0xb5c00eba,
		CAMIHTStage6: 0xb5c00ebb,
		CAMIHTStage7: 0xb5c00ebc,
		CAMIHTStage8: 0xb5c00ebd,
		CAMIHTStage9: 0xb5c00ebe,
		CAMIHTStage10: 0xb5c00ebf,
		BTEUtilityPower: 0xb5c00ef1,
		BTEUtilityGarbage: 0xb5c00ef2,
		SFBTLargeLotSeries: 0xb5c00f00,
		SFBTR$LargeLotLowDensity: 0xb5c00f01,
		SFBTR$LargeLotMediumDensity: 0xb5c00f02,
		SFBTR$LargeLotHighDensity: 0xb5c00f03,
		SFBTR$$LargeLotLowDensity: 0xb5c00f04,
		SFBTR$$LargeLotMediumDensity: 0xb5c00f05,
		SFBTR$$LargeLotHighDensity: 0xb5c00f06,
		SFBTR$$$LargeLotLowDensity: 0xb5c00f07,
		SFBTR$$$LargeLotMediumDensity: 0xb5c00f08,
		SFBTR$$$LargeLotHighDensity: 0xb5c00f09,
		SFBTHamburgW2W: 0xb5c00f0a,
		BTESFBTBuilding: 0xb5c00f5f,
	},
	/**
	 * GUID of the sound to play when the occupant is clicked on with query tool
	 */
	SFXQuerySound: 0xaa1dd397,
	/**
	 * Cost per unit of garbage sent to landfill, incinerator or w2e
	 */
	GarbageServiceCostPerUnitOfGarbage: {
		[kToPrimitive]: () => 0xaa1f8ab7,
		[kPropertyId]: 0xaa1f8ab7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Which type of Industrial (Anchor/Out/Mech)
	 */
	IndustrialBuildingType: {
		[kToPrimitive]: () => 0xaa230baf,
		[kPropertyId]: 0xaa230baf,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * UI effect in active state
	 */
	UIActiveEffectID: {
		[kToPrimitive]: () => 0xaa2ed800,
		[kPropertyId]: 0xaa2ed800,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * UI effect in idle state
	 */
	UIIdleEffectID: {
		[kToPrimitive]: () => 0xaa2ed801,
		[kPropertyId]: 0xaa2ed801,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Icon effect in active state
	 */
	UIActiveIconID: {
		[kToPrimitive]: () => 0xaa2ed802,
		[kPropertyId]: 0xaa2ed802,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Icon effect in idle state
	 */
	UIIdleIconID: {
		[kToPrimitive]: () => 0xaa2ed803,
		[kPropertyId]: 0xaa2ed803,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Hardware cursor ID for active state
	 */
	UIActiveCursorId: 0xaa2ed804,
	/**
	 * Hardware cursor ID for idle state
	 */
	UIIdleCursorId: 0xaa2ed805,
	/**
	 * Bitfield describing which zoom levels loop is active for
	 */
	AudioZoomLoopEnable: {
		[kToPrimitive]: () => 0xaa3fbdde,
		[kPropertyId]: 0xaa3fbdde,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Freshness Volume
	 */
	AudioFreshVolume: 0xaa3fc48e,
	/**
	 * Min term a deal can be had before renewal.
	 */
	NDd_MinDealTermYears: {
		[kToPrimitive]: () => 0xaa46934b,
		[kPropertyId]: 0xaa46934b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplying Factor to the Response curve so response curve shape
	 * preserves
	 */
	VolcanoLavaScaleIntensityOfProduction: {
		[kToPrimitive]: () => 0xaa4bc72a,
		[kPropertyId]: 0xaa4bc72a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Type of the graph to be shown (line, bar, etc.)
	 */
	GraphType: 0xaa4c0d1b,
	/**
	 * Amount of pollution generated by the building, for each type (air, water,
	 * garbage, and radiation). This value represents the amount of pollution at
	 * the outer edge of the circular area of effect. The default value is zero.
	 * This can be negative for buildings that decrease pollution.
	 */
	PollutionAtOuterEdgeOfCircle: {
		[kToPrimitive]: () => 0xaa5832f3,
		[kPropertyId]: 0xaa5832f3,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * Automaton should not be lit by the lighting manager
	 */
	IgnoreLighting: {
		[kToPrimitive]: () => 0xaa5a9633,
		[kPropertyId]: 0xaa5a9633,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * This value get added globally to mayor rating
	 */
	MayorRating: {
		[kToPrimitive]: () => 0xaa5b8407,
		[kPropertyId]: 0xaa5b8407,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Intensity of spewed radiation (at center of area) when nuclear power
	 * plant explodes.
	 */
	RadiationSpewIntensity: {
		[kToPrimitive]: () => 0xaa5c04c5,
		[kPropertyId]: 0xaa5c04c5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Radius of the area in which radiation is spread when nuclear power plant
	 * explodes (in cells).
	 */
	RadiationSpewRadius: {
		[kToPrimitive]: () => 0xaa5c04c8,
		[kPropertyId]: 0xaa5c04c8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Resource key of string to be displayed in the landmark's query dialog
	 */
	LandmarkHomageKey: {
		[kToPrimitive]: () => 0xaa5c23fa,
		[kPropertyId]: 0xaa5c23fa,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Response curve for the Goofy Stat field in query dialogs
	 */
	GoofyStatResponseCurve: {
		[kToPrimitive]: () => 0xaa60e745,
		[kPropertyId]: 0xaa60e745,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Converts a funding level (percentage) into a decay rate (negative
	 * numbers) or repair rate (positive numbers)
	 */
	FundingPercentageToPowerPoleDecayrepair: {
		[kToPrimitive]: () => 0xaa713782,
		[kPropertyId]: 0xaa713782,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * What kind of crane to use
	 */
	CraneHints: {
		[kToPrimitive]: () => 0xaa83558f,
		[kPropertyId]: 0xaa83558f,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		NoCrane: 0x00000000,
		OuterCrane: 0x00000001,
		InnerCrane: 0x00000002,
		OuterThenInnerCrane: 0x00000003,
	},
	/**
	 * GUID of the sound to play when the occupant approaches an intersection
	 */
	SFXIntersectionSound: 0xaa87817a,
	/**
	 * GUID of the sound to play when the occupant is clicked on with query tool
	 * and is decayed.
	 */
	SFXQuerySoundDecayed: 0xaa905ab9,
	/**
	 * Max concurrent playing one-shots
	 */
	AudioMaxConcurrentOneShots: 0xaabaa0d3,
	/**
	 * Color table for regional transport map: street, rail, road, 1way road,
	 * avenue, monorail, elrail, highway, elhighway, airport, seaport, park, rail
	 * station, default zone.
	 */
	DVRegionalTransportColorTable: {
		[kToPrimitive]: () => 0xab9ec143,
		[kPropertyId]: 0xab9ec143,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Indicate what kind of helicopter should appear on this helipad
	 */
	HelipadType: {
		[kToPrimitive]: () => 0xabb90e58,
		[kPropertyId]: 0xabb90e58,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		Police: 0x00000001,
		Hospital: 0x00000002,
		News: 0x00000003,
		Military: 0x00000004,
		UFO: 0x00000005,
	},
	/**
	 * This property prevents water automata from crossing under the bridge
	 * tile.
	 */
	BridgeObstruction: {
		[kToPrimitive]: () => 0xabe1b5a3,
		[kPropertyId]: 0xabe1b5a3,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Model type, group, and instance for shadow model
	 */
	ShadowModelKey: {
		[kToPrimitive]: () => 0xac2bc81c,
		[kPropertyId]: 0xac2bc81c,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * How many people are represented by one unit in the coverage map
	 */
	HospitalCapacityChunkSize: {
		[kToPrimitive]: () => 0xac43826d,
		[kPropertyId]: 0xac43826d,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * How much can terrain be raised during network placement [0.0 - 100000.0]
	 */
	MaxTerrainHtIncrease: {
		[kToPrimitive]: () => 0xc7b36ca4,
		[kPropertyId]: 0xc7b36ca4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * How much can terrain be lowered during network placement [0.0 - 100000.0]
	 */
	MaxTerrainHtDecrease: {
		[kToPrimitive]: () => 0xc7b36ca5,
		[kPropertyId]: 0xc7b36ca5,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Range: [0.0 - 100000.0]
	 */
	MaxNetworkHtAdjustment: {
		[kToPrimitive]: () => 0xc804dd86,
		[kPropertyId]: 0xc804dd86,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min terrain slope to trigger tunnel placement
	 */
	MinTerrainSlopeForTunnelStart: {
		[kToPrimitive]: () => 0xc804dd87,
		[kPropertyId]: 0xc804dd87,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum slope of tunnel (in degrees)
	 */
	MaxTunnelSlope: {
		[kToPrimitive]: () => 0xc804dd88,
		[kPropertyId]: 0xc804dd88,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum amount (in meters) by which a network vertex is allowed to move
	 * beyond reference plane
	 */
	MaxDisplacementBeyondRefPlane: {
		[kToPrimitive]: () => 0xc804dd89,
		[kPropertyId]: 0xc804dd89,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Use freehand mode of placement (i.e., anchor points freeze)
	 */
	UseFreehandMode: {
		[kToPrimitive]: () => 0xc804dd90,
		[kPropertyId]: 0xc804dd90,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * [deprecated] Number of frame updates between the freezing of successive
	 * anchor points
	 */
	NumFramesBetweenAnchorPtFreeze: 0xc804dd91,
	/**
	 * Min number of cells between successive anchor points in different zooms
	 */
	NumCellsBetweenAnchorPtFreeze: {
		[kToPrimitive]: () => 0xc804dd92,
		[kPropertyId]: 0xc804dd92,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * How far away from the terrain is the network allowed to be [0.0 -
	 * 100000.0]
	 */
	MaxDistFromTerrain: {
		[kToPrimitive]: () => 0xc804dd93,
		[kPropertyId]: 0xc804dd93,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max height of the retaining walls [0.0 - 100000.0]
	 */
	MaxRetainingWallHt: {
		[kToPrimitive]: () => 0xc804dd94,
		[kPropertyId]: 0xc804dd94,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max height of the supporting pylons [Reating wall ht - 100000.0]
	 */
	MaxPylonHt: {
		[kToPrimitive]: () => 0xc804dd95,
		[kPropertyId]: 0xc804dd95,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max allowed terrain height diff between the two ends of land bridges
	 */
	MaxHtDiffBetweenLandBridgeEnds: {
		[kToPrimitive]: () => 0xc804dd96,
		[kPropertyId]: 0xc804dd96,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Smoothen only those tiles that are connected to the segment being placed
	 */
	SmoothenOnlyConnectedTiles: {
		[kToPrimitive]: () => 0xc804dd97,
		[kPropertyId]: 0xc804dd97,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Number of times we attempt expanding the smoothing region before giving
	 * up
	 */
	NumSmoothingProgressionSteps: 0xc804dd98,
	/**
	 * How much (in cells) does the smoothing region expand in each smoothing
	 * progression step
	 */
	DistAddedPerSmoothingProgressionStep: 0xc804dd99,
	/**
	 * If an existing network moves by less than this, we do not attempt to fix
	 * it (for efficiency)
	 */
	NetworkHtChangeThatRequiresFixing: {
		[kToPrimitive]: () => 0xc804dd9a,
		[kPropertyId]: 0xc804dd9a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Time in milliseconds between the freezing of successive anchor points
	 */
	TimeBetweenAnchorPtFreeze: 0xc804dd9b,
	/**
	 * Amount of water treated per month
	 */
	WaterTreatmentMonthlyCapacity: 0xc8ebd131,
	/**
	 * Amount of water consumed by this building per month.
	 */
	WaterConsumed: 0xc8ed2d84,
	/**
	 * Cost to produce one unit of electricity, not including infrastructure
	 * maintenance
	 */
	PowerPlantEnergyConversionCost: {
		[kToPrimitive]: () => 0xc910b4ce,
		[kPropertyId]: 0xc910b4ce,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Size of a texture in meters. Defaults to standard city cell size.
	 */
	kSC4FoundationPropertySideTextureSize: {
		[kToPrimitive]: () => 0xc911eda0,
		[kPropertyId]: 0xc911eda0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Size of a texture in meters. Defaults to standard city cell size.
	 */
	kSC4FoundationPropertyTopTextureSize: {
		[kToPrimitive]: () => 0xc911eda1,
		[kPropertyId]: 0xc911eda1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum acceptable percentage for School department funding
	 */
	OBSSchoolMinAcceptableFunding: {
		[kToPrimitive]: () => 0xc91894a8,
		[kPropertyId]: 0xc91894a8,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to % chance
	 * of a School strike
	 */
	SchoolStrikeResponseCurve: {
		[kToPrimitive]: () => 0xc91894cb,
		[kPropertyId]: 0xc91894cb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps average age to EQ boost %
	 */
	SchoolEffectivenessVsAverageAgeEffect: {
		[kToPrimitive]: () => 0xc91b3b02,
		[kPropertyId]: 0xc91b3b02,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
		10: 0x0000000a,
		20: 0x00000014,
		30: 0x0000001e,
		40: 0x00000028,
		50: 0x00000032,
		60: 0x0000003c,
		70: 0x00000046,
		80: 0x00000050,
		90: 0x0000005a,
		100: 0x00000064,
	},
	/**
	 * Amount of monthly HQ boost from this building.  HQ can range between 0
	 * and 200 and is automatically reduced by 3 each month, so to have a net
	 * positive effect this number should be greater than 3.
	 */
	HospitalHQBoost: {
		[kToPrimitive]: () => 0xc9299659,
		[kPropertyId]: 0xc9299659,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps Average age of a tract to the % EQ boost the school gives the tract
	 */
	SchoolEffectivenessVsAverageAge: {
		[kToPrimitive]: () => 0xc9299662,
		[kPropertyId]: 0xc9299662,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Amount by which EQ decays each month
	 */
	EQDecay: {
		[kToPrimitive]: () => 0xc929c433,
		[kPropertyId]: 0xc929c433,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Average age assigned to new Low Wealth residents
	 */
	LowWealthAverageAge: {
		[kToPrimitive]: () => 0xc929c652,
		[kPropertyId]: 0xc929c652,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * EQ assigned to new Low Wealth residents
	 */
	LowWealthEQ: {
		[kToPrimitive]: () => 0xc929cc58,
		[kPropertyId]: 0xc929cc58,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * HQ assigned to new Low Wealth residents
	 */
	LowWealthHQ: {
		[kToPrimitive]: () => 0xc929cc8d,
		[kPropertyId]: 0xc929cc8d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Maps wealth level to EQ boost %
	 */
	SchoolEffectivenessVsWealth: {
		[kToPrimitive]: () => 0xc92d7ec0,
		[kPropertyId]: 0xc92d7ec0,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects the rate at
	 * which HQ decays
	 */
	HealthQuotientDecayEffect: {
		[kToPrimitive]: () => 0xc92d9c7a,
		[kPropertyId]: 0xc92d9c7a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps amount of garbage pollution in a tract to the rate at which the HQ
	 * in that tract decays
	 */
	GarbagePollutionToHQDecayCurve: {
		[kToPrimitive]: () => 0xc941b02e,
		[kPropertyId]: 0xc941b02e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Which automata layers this model can appear in
	 */
	LayerFilter: {
		[kToPrimitive]: () => 0xc973c9aa,
		[kPropertyId]: 0xc973c9aa,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If present, indicates an effect by string name. If not present, then
	 * 'kExemplarPropertyID_ExemplarName' is used.
	 */
	VisualEffectName: {
		[kToPrimitive]: () => 0xc98204b8,
		[kPropertyId]: 0xc98204b8,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	VisualEffectName1: {
		[kToPrimitive]: () => 0xc98204b9,
		[kPropertyId]: 0xc98204b9,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * kPropertyID_LotConfigNetworkTileId
	 */
	KPropertyID_LotConfigNetworkTileId: 0xc9a5a1be,
	/**
	 * flammability multiplier during summer
	 */
	FlammabilityMultiplierSummer: {
		[kToPrimitive]: () => 0xc9b40128,
		[kPropertyId]: 0xc9b40128,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound played when building is plopped
	 */
	SFXDefaultPlopSound: 0xc9b93a56,
	/**
	 * How often (0.0-1.0) a moving van will be created in response to a new
	 * residence
	 */
	MovingVanFrequency: {
		[kToPrimitive]: () => 0xc9c18eae,
		[kPropertyId]: 0xc9c18eae,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Magnitude of a repulsor or attractor at which peds will break their paths
	 * to get away from or closer to it
	 */
	AttractionThreshold: {
		[kToPrimitive]: () => 0xc9da95d4,
		[kPropertyId]: 0xc9da95d4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Days between sweeps for burnt stumps (may be fractional)
	 */
	FloraBurntSweepInterval: {
		[kToPrimitive]: () => 0xc9dbdd00,
		[kPropertyId]: 0xc9dbdd00,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of burnt stumps removed per sweep (may be fractional)
	 */
	FloraBurntSweepSize: {
		[kToPrimitive]: () => 0xc9dbdd01,
		[kPropertyId]: 0xc9dbdd01,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Meters from sea level over which to distribute the 16 elevation rows
	 */
	FloraElevationScaleRange: {
		[kToPrimitive]: () => 0xc9dbdd02,
		[kPropertyId]: 0xc9dbdd02,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Type/Group/Instance for additional model (e.g. flashing lights on emerg.
	 * vehicles)
	 */
	AuxiliaryModel2Key: {
		[kToPrimitive]: () => 0xc9e69af6,
		[kPropertyId]: 0xc9e69af6,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maximum angle (in degrees) of network grade that will change the speed of
	 * a vehicle
	 */
	GradeMaxAngle: {
		[kToPrimitive]: () => 0xc9ee640a,
		[kPropertyId]: 0xc9ee640a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percentage that will be added to/subtracted from a vehicle's speed when
	 * driving up/down a grade at max angle
	 */
	GradeSpeedMultiplier: {
		[kToPrimitive]: () => 0xc9ee640b,
		[kPropertyId]: 0xc9ee640b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max distance between fire and crew for the crew to aim its water stream
	 * at it
	 */
	FireCrewMaxStreamDist: {
		[kToPrimitive]: () => 0xc9ee640c,
		[kPropertyId]: 0xc9ee640c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of tiles around emergency vehicles on which traffic will be
	 * removed
	 */
	EmergencyVehicleClearRadius: {
		[kToPrimitive]: () => 0xc9ee640d,
		[kPropertyId]: 0xc9ee640d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * When average age reaches life expectancy in a tract, the tract's average
	 * age is set to this value
	 */
	AverageAgeResetValue: {
		[kToPrimitive]: () => 0xca027307,
		[kPropertyId]: 0xca027307,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * When average age reaches life expectancy in a tract, the tract's EQ is
	 * multiplied by this value
	 */
	EQResetPercent: {
		[kToPrimitive]: () => 0xca027325,
		[kPropertyId]: 0xca027325,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When average age reaches life expectancy in a tract, the tract's HQ is
	 * multiplied by this value
	 */
	HQResetPercent: {
		[kToPrimitive]: () => 0xca027328,
		[kPropertyId]: 0xca027328,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * GUID of sound played when building is around and in good working order.
	 */
	SFXAmbienceGoodSound: {
		[kToPrimitive]: () => 0xca19d7ca,
		[kPropertyId]: 0xca19d7ca,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		CoalPowerPlant: 0x2a4c43bd,
		HydrogenPowerPlant: 0x4a4c42d4,
		NaturalGasPowerPlant: 0x6a4c467c,
		NuclearPowerPlant: 0xca4c440f,
		OilPowerPlant: 0x69dc1c2e,
		SolarPowerPlant: 0x6a4c4406,
		WindPowerPlant: 0x2a4c445c,
		WasteToEnergyPlant: 0xaa4c4467,
		WaterPump: 0xea5b166e,
		WaterPurificationPlant: 0x8a55b1a2,
	},
	/**
	 * Number of growth stages (i.e. number of lots) for this particular airport
	 * type
	 */
	NumGrowthStages: 0xca271780,
	/**
	 * List of template IDs for each growth stage
	 */
	LotStageTemplateIDs: 0xca271781,
	/**
	 * List of demand thresholds for each growth stage. What this value refers
	 * to is zone type specific.
	 */
	ObsoleteDemandThresholdsList: {
		[kToPrimitive]: () => 0xca271782,
		[kPropertyId]: 0xca271782,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * List of budget requirements for each growth stage - in Simoleans (tm)
	 */
	BudgetRequirementsList: {
		[kToPrimitive]: () => 0xca271783,
		[kPropertyId]: 0xca271783,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * List of trip capacities for each growth stage for airport or seaport
	 */
	TripCapacityList: 0xca271784,
	/**
	 * Efficiency value under which the lot begins to distress
	 */
	EfficiencyDistressThreshold: {
		[kToPrimitive]: () => 0xca480830,
		[kPropertyId]: 0xca480830,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * List of costs in Simoleans (tm) associated with each growth stage
	 */
	StageUpgradeCost: {
		[kToPrimitive]: () => 0xca271786,
		[kPropertyId]: 0xca271786,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Port Size identifier. 1=small, 2=medium, 3=large
	 */
	PortSize: {
		[kToPrimitive]: () => 0xca271787,
		[kPropertyId]: 0xca271787,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Width of the port lot (in North rotation)
	 */
	PortWidth: {
		[kToPrimitive]: () => 0xca271788,
		[kPropertyId]: 0xca271788,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Height of the port lot (in North rotation)
	 */
	PortHeight: {
		[kToPrimitive]: () => 0xca271789,
		[kPropertyId]: 0xca271789,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Optional list of vertex altitude values corresponding to each cell in the
	 * lot for airport or seaport
	 */
	HeightMap: {
		[kToPrimitive]: () => 0xca271800,
		[kPropertyId]: 0xca271800,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Distance above ground or sea for microphone position
	 */
	AudioZoomDistances: {
		[kToPrimitive]: () => 0xca359f17,
		[kPropertyId]: 0xca359f17,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * When right-click scrolling, this is the number of pixels away from the
	 * anchor that the user must move before scrolling begins.
	 */
	IntelliScrollInnerRadiusPixels: 0xe90f5de4,
	/**
	 * Horizontal scroll hull edge in pixels.
	 */
	HullHorizontal: 0xca383ca5,
	/**
	 * Vertical scroll hull edge in pixels.
	 */
	HullVertical: 0xca383ca6,
	/**
	 * # of pixels per speed increase (higher is slower).
	 */
	ScrollGradient: {
		[kToPrimitive]: () => 0xca383ca7,
		[kPropertyId]: 0xca383ca7,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Auto gen region: water erosion steps.
	 */
	WaterErosionIterations: 0xca383ca8,
	/**
	 * Auto gen region: water erosion flow steps.
	 */
	FlowStepsForWaterErosion: 0xca383ca9,
	/**
	 * Auto gen region: wind erosion steps.
	 */
	SmoothingStepsForWindErosion: 0xca383caa,
	/**
	 * Color of regional grid, in 0xRRGGBB form.
	 */
	RegionUIGridColor: 0xca383cab,
	/**
	 * Color of regional highlight, in 0xRRGGBB form.
	 */
	RegionUIHighlight: 0xca383cac,
	/**
	 * Height map fill value for new cities in plains regions (0-255).
	 */
	RegionUIPlainsMapLevel: {
		[kToPrimitive]: () => 0xca383cad,
		[kPropertyId]: 0xca383cad,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Height map fill value for new cities in water regions (0-255).
	 */
	RegionUIWaterMapLevel: {
		[kToPrimitive]: () => 0xca383cae,
		[kPropertyId]: 0xca383cae,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Range of opacity values for clouds (min,max; 0-255).
	 */
	RegionUICloudOpacityRange: {
		[kToPrimitive]: () => 0xca383cb1,
		[kPropertyId]: 0xca383cb1,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Density to freshness play percentage curve
	 */
	AudioDensity2FreshPlayCurve: {
		[kToPrimitive]: () => 0xca4132e9,
		[kPropertyId]: 0xca4132e9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Resource key of the string resource of the description
	 */
	ItemDescriptionKey: {
		[kToPrimitive]: () => 0xca416ab5,
		[kPropertyId]: 0xca416ab5,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Resource key of ordinance description
	 */
	DescriptionKey: {
		[kToPrimitive]: () => 0xca416b2a,
		[kPropertyId]: 0xca416b2a,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * My sim default name resource key
	 */
	MySimNameResKey: {
		[kToPrimitive]: () => 0xca416b3f,
		[kPropertyId]: 0xca416b3f,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Min term required for the neighbor to be able to sustain sell deal cost
	 */
	NDa_MinTermToSustainSellDealCostMonths: {
		[kToPrimitive]: () => 0xca46931f,
		[kPropertyId]: 0xca46931f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max deal profit factor (1 + NDc_MinDealProfitFactor)
	 */
	NDc_MaxDealProfitFactor: {
		[kToPrimitive]: () => 0xca469346,
		[kPropertyId]: 0xca469346,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps city population to a multiplier (0.0-1.0) for freight truck density
	 */
	FreightTruckDensityCurve: {
		[kToPrimitive]: () => 0xca51189a,
		[kPropertyId]: 0xca51189a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max number of commute trains to cross a tile per second
	 */
	MaxCommuteTrainsPerSecond: {
		[kToPrimitive]: () => 0xca511de6,
		[kPropertyId]: 0xca511de6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max number of freight trucks to cross a tile per second
	 */
	MaxFreightTrucksPerSecond: {
		[kToPrimitive]: () => 0xca511df2,
		[kPropertyId]: 0xca511df2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Speed in KPH at which vehicles will draw motion blur effect.
	 */
	VehicleBlurSpeedKPH: 0xca5545ea,
	/**
	 * Mayor Rating effect. Magnitude (-100 to +100), radius (in cells).
	 */
	MayorRatingEffect: {
		[kToPrimitive]: () => 0xca5b9305,
		[kPropertyId]: 0xca5b9305,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * Maps the budget percent (0-100%) to a multiplier on the time cost of
	 * using a transit switch.
	 */
	TransitSwitchEntryCostVsBudget: {
		[kToPrimitive]: () => 0xca5f7821,
		[kPropertyId]: 0xca5f7821,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Converts a funding level (percentage) into a decay rate (negative
	 * numbers) or repair rate (positive numbers)
	 */
	FundingPercentageToPipeDecayrepair: {
		[kToPrimitive]: () => 0xca7138c4,
		[kPropertyId]: 0xca7138c4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Simulator MONTH (1-12) and DAY (1-31) to start this prop's date interval
	 */
	SimulatorDateStart: {
		[kToPrimitive]: () => 0xca7515cc,
		[kPropertyId]: 0xca7515cc,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Multiply the trip length map values (0-255, 255 = Max Commute Time) by
	 * this value to get a time in minutes for display purposes
	 */
	TripLengthToMinutesDisplayMultiplier: {
		[kToPrimitive]: () => 0xca76013b,
		[kPropertyId]: 0xca76013b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Specifies the camera zoom level to use on disaster go to
	 */
	GoToZoomLevel: {
		[kToPrimitive]: () => 0xca821b8c,
		[kPropertyId]: 0xca821b8c,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Present in the Medical Clinic and Hospital. It is not used within the exe
	 * file though.
	 */
	UnusedMedicalProperty: {
		[kToPrimitive]: () => 0xca9b4ca8,
		[kPropertyId]: 0xca9b4ca8,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * If present, the occupant will respond to hover queries but not to
	 * click-queries
	 */
	HoverQueryOnly: {
		[kToPrimitive]: () => 0xcaa9ab92,
		[kPropertyId]: 0xcaa9ab92,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Min value of desirability for subjective factors
	 * (pollution,garbage,school,hospital,crime,traffic,triplength).
	 */
	SubjectiveFactorThresholdMinValue: {
		[kToPrimitive]: () => 0xcab1ce3a,
		[kPropertyId]: 0xcab1ce3a,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * Max value of desirability for subjective factors
	 * (pollution,garbage,school,hospital,crime,traffic,triplength).
	 */
	SubjectiveFactorThresholdMaxValue: {
		[kToPrimitive]: () => 0xcab1ce3c,
		[kPropertyId]: 0xcab1ce3c,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * Starting overhead cost in time for each travel type for car preferred
	 * trips
	 */
	TripStartingCostByTravelTypeForCarPref: {
		[kToPrimitive]: () => 0xcad64136,
		[kPropertyId]: 0xcad64136,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maximum number of simultaneous riot instances
	 */
	RiotMaxInstances: 0xcadb6b3e,
	/**
	 * a% (0.0-1.0) chance of adding/removing automaton from tile when actual
	 * auto count is b% (0.0-1.0) lower/higher than desired.
	 */
	SpawnRecallForStreets: {
		[kToPrimitive]: () => 0xcba5895b,
		[kPropertyId]: 0xcba5895b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * a% (0.0-1.0) chance of adding/removing automaton from tile when actual
	 * auto count is b% (0.0-1.0) lower/higher than desired.
	 */
	SpawnRecallForRoads: {
		[kToPrimitive]: () => 0xcba5895c,
		[kPropertyId]: 0xcba5895c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * a% (0.0-1.0) chance of adding/removing automaton from tile when actual
	 * auto count is b% (0.0-1.0) lower/higher than desired.
	 */
	SpawnRecallForAvenues: {
		[kToPrimitive]: () => 0xcba5895d,
		[kPropertyId]: 0xcba5895d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * a% (0.0-1.0) chance of adding/removing automaton from tile when actual
	 * auto count is b% (0.0-1.0) lower/higher than desired.
	 */
	SpawnRecallForHighway: {
		[kToPrimitive]: () => 0xcba5895e,
		[kPropertyId]: 0xcba5895e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * a% (0.0-1.0) chance of adding/removing automaton from tile when actual
	 * auto count is b% (0.0-1.0) lower/higher than desired.
	 */
	SpawnRecallForRail: {
		[kToPrimitive]: () => 0xcba5895f,
		[kPropertyId]: 0xcba5895f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Response curve of congestion vs. expected automata per second on a tile
	 */
	CongestionToCPSForStreets: {
		[kToPrimitive]: () => 0xcba58a5b,
		[kPropertyId]: 0xcba58a5b,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Response curve of congestion vs. expected automata per second on a tile
	 */
	CongestionToCPSForRoads: {
		[kToPrimitive]: () => 0xcba58a5c,
		[kPropertyId]: 0xcba58a5c,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Response curve of congestion vs. expected automata per second on a tile
	 */
	CongestionToCPSForAvenues: {
		[kToPrimitive]: () => 0xcba58a5d,
		[kPropertyId]: 0xcba58a5d,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Response curve of congestion vs. expected automata per second on a tile
	 */
	CongestionToCPSForHighway: {
		[kToPrimitive]: () => 0xcba58a5e,
		[kPropertyId]: 0xcba58a5e,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Response curve of congestion vs. expected automata per second on a tile
	 */
	CongestionToCPSForRail: {
		[kToPrimitive]: () => 0xcba58a5f,
		[kPropertyId]: 0xcba58a5f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Refers to an .abk file with player-drive sounds
	 */
	SoundBankID: 0xcbbba52f,
	/**
	 * Max volume for AEMS systems
	 */
	AudioAEMSMaxVolume: {
		[kToPrimitive]: () => 0xcbfb03fa,
		[kPropertyId]: 0xcbfb03fa,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Master FX level
	 */
	AudioAEMSMasterFxLevel: {
		[kToPrimitive]: () => 0xcbfb03ff,
		[kPropertyId]: 0xcbfb03ff,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Number of police helicopters this station can send.
	 */
	PoliceStationTotalCopterDispatches: {
		[kToPrimitive]: () => 0xcc0b0705,
		[kPropertyId]: 0xcc0b0705,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Desired # of vehicles per second that will be generated on roads during
	 * player-drive
	 */
	PlayerdriveVehiclesPerSecond: {
		[kToPrimitive]: () => 0xcc101142,
		[kPropertyId]: 0xcc101142,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Index (1,2,3,etc.) of auxiliary model to load automatically on Init
	 */
	AutoloadAuxiliaryModels: 0xcc21420d,
	/**
	 * kPropertyID_FlipsAllowed
	 */
	KPropertyID_FlipsAllowed: {
		[kToPrimitive]: () => 0xcc3e4755,
		[kPropertyId]: 0xcc3e4755,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If assigned to an occupant, this property denotes it as a prop. Must use
	 * a valid prop ID as a property value. See SC4PropOccupant.h
	 */
	PropType: 0xe82b68eb,
	/**
	 * If property is present (regardless of value), then the model can be
	 * rotated and contains 'full geometry'.
	 */
	kSC4BuildingModelRotationProperty: {
		[kToPrimitive]: () => 0xe83a081d,
		[kPropertyId]: 0xe83a081d,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * How often the Crime simulator updates, in days
	 */
	CrimeUpdatePeriod: 0xe8ec2720,
	/**
	 * Crime Police Factor
	 */
	CrimePoliceFactor: {
		[kToPrimitive]: () => 0xe8ec2721,
		[kPropertyId]: 0xe8ec2721,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on water pollution
	 */
	WaterEffect: {
		[kToPrimitive]: () => 0xe8f79c8b,
		[kPropertyId]: 0xe8f79c8b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Effect (multiplier) this ordinance has on garbage
	 */
	GarbageEffect: {
		[kToPrimitive]: () => 0xe8f79c90,
		[kPropertyId]: 0xe8f79c90,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * kMaxCellAltitudeDeltaForFlatnessProperty
	 */
	KMaxCellAltitudeDeltaForFlatnessProperty: {
		[kToPrimitive]: () => 0xe900ea24,
		[kPropertyId]: 0xe900ea24,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * kMaxSlopeForFlatnessProperty
	 */
	KMaxSlopeForFlatnessProperty: {
		[kToPrimitive]: () => 0xe900ea25,
		[kPropertyId]: 0xe900ea25,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * kDefaultLotFoundationTypeProperty
	 */
	KDefaultLotFoundationTypeProperty: 0xe900ea26,
	/**
	 * kShouldAttemptLotLevellingProperty
	 */
	KShouldAttemptLotLevellingProperty: 0xe900ea27,
	/**
	 * kShouldAttemptInternalLotLevellingProperty
	 */
	KShouldAttemptInternalLotLevellingProperty: 0xe900ea28,
	/**
	 * kLotAutoLevelInternalAltitudeDeltaProperty
	 */
	KLotAutoLevelInternalAltitudeDeltaProperty: {
		[kToPrimitive]: () => 0xe900ea29,
		[kPropertyId]: 0xe900ea29,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * MaxAreaSlopeAllowedForLevellingProperty
	 */
	MaxAreaSlopeAllowedForLevellingProperty: {
		[kToPrimitive]: () => 0xe900ea2a,
		[kPropertyId]: 0xe900ea2a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Update interval in milliseconds for toggling building lights.
	 */
	LotDeveloperNightUpdateInterval: 0xe900ea2b,
	/**
	 * Number of buildings to toggle lights on per update interval (integer).
	 */
	LotDeveloperNightUpdateCount: 0xe900ea2c,
	/**
	 * Paired entries indicating this building allows a travelling Sim to switch
	 * between transit types
	 */
	TransitSwitchPoint: {
		[kToPrimitive]: () => 0xe90e25a1,
		[kPropertyId]: 0xe90e25a1,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
		Walk: 0x00000000,
		DriveCar: 0x00000001,
		RideBus: 0x00000002,
		RideTrain: 0x00000003,
		FreightTruck: 0x00000004,
		FreightTrain: 0x00000005,
		RideSubway: 0x00000006,
		RideElTrain: 0x00000007,
		RideMonorail: 0x00000008,
		South: 0x00000010,
		East: 0x00000020,
		SouthEast: 0x00000030,
		North: 0x00000040,
		NorthSouth: 0x00000050,
		NorthEast: 0x00000060,
		NorthSouthEast: 0x00000070,
		West: 0x00000080,
		WestSouth: 0x00000090,
		WestEast: 0x000000a0,
		WestEastSouth: 0x000000b0,
		WestNorth: 0x000000c0,
		WestNorthSouth: 0x000000d0,
		WestNorthEast: 0x000000e0,
		AllSides: 0x000000f0,
		OutsidetoInside: 0x00000081,
		InsidetoOutside: 0x00000082,
	},
	/**
	 * Cost in travel time to enter this transit switch. Once inside, travel
	 * time inside the building is zero.
	 */
	TransitSwitchEntryCost: {
		[kToPrimitive]: () => 0xe90e25a2,
		[kPropertyId]: 0xe90e25a2,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When traffic density rises above this capacity, it costs trips extra
	 * travel time.
	 */
	TransitSwitchTrafficCapacity: {
		[kToPrimitive]: () => 0xe90e25a3,
		[kPropertyId]: 0xe90e25a3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum allowed funding percentage for utilities
	 */
	PowerMaxAllowedFunding: {
		[kToPrimitive]: () => 0xe911e2d1,
		[kPropertyId]: 0xe911e2d1,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maximum allowed percentage for power plant production
	 */
	PowerPlantMaxProductionRatio: {
		[kToPrimitive]: () => 0xe911e2fc,
		[kPropertyId]: 0xe911e2fc,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Minimum acceptable percentage for Health department funding
	 */
	OBSHealthMinAcceptableFunding: {
		[kToPrimitive]: () => 0xe918946f,
		[kPropertyId]: 0xe918946f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Efficiency of School buildings will drop to this % during a strike
	 */
	SchoolStrikeEfficiency: {
		[kToPrimitive]: () => 0xe91894b3,
		[kPropertyId]: 0xe91894b3,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier to tweak the relative weighting of the R$$ occupant type's
	 * taxes
	 */
	BudgetTaxRateOccWeight_R$$: {
		[kToPrimitive]: () => 0xe918c920,
		[kPropertyId]: 0xe918c920,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Base value in simoleons of this building.
	 */
	BuildingValue: {
		[kToPrimitive]: () => 0xe91a0b5f,
		[kPropertyId]: 0xe91a0b5f,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Percentage (from 0 to 200%) by which this ordinance affects all HQ values
	 */
	HealthQuotientBoostEffect: {
		[kToPrimitive]: () => 0xe91b3aee,
		[kPropertyId]: 0xe91b3aee,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Maps distance from a covered tract to a % of that tract's population that
	 * is actually served.
	 */
	SchoolPopulationVsDistance: {
		[kToPrimitive]: () => 0xe921a936,
		[kPropertyId]: 0xe921a936,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps average age of a tract to addional HQ boost %
	 */
	HealthEffectivenessVsAverageAgeEffect: {
		[kToPrimitive]: () => 0xe92d9db4,
		[kPropertyId]: 0xe92d9db4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * kZM_mZoneMinCellSize
	 */
	KZM_mZoneMinCellSize: {
		[kToPrimitive]: () => 0xe94825b2,
		[kPropertyId]: 0xe94825b2,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * kZM_mZoneMaxCellSize
	 */
	KZM_mZoneMaxCellSize: {
		[kToPrimitive]: () => 0xe94825b3,
		[kPropertyId]: 0xe94825b3,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * kZM_mZoneCreationCostArray
	 */
	KZM_mZoneCreationCostArray: {
		[kToPrimitive]: () => 0xe94825b4,
		[kPropertyId]: 0xe94825b4,
		[kPropertyType]: [Sint64],
		[kInspect]: inspector,
	},
	/**
	 * kZM_mZoneDestructionCostArray
	 */
	KZM_mZoneDestructionCostArray: {
		[kToPrimitive]: () => 0xe94825b5,
		[kPropertyId]: 0xe94825b5,
		[kPropertyType]: [Sint64],
		[kInspect]: inspector,
	},
	/**
	 * kZM_mZoneTextureResourceInstanceArray
	 */
	KZM_mZoneTextureResourceInstanceArray: {
		[kToPrimitive]: () => 0xe94825b6,
		[kPropertyId]: 0xe94825b6,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Replaces drag color alpha after zone placement
	 */
	ZoneDisplayAlpha: {
		[kToPrimitive]: () => 0xe94825b7,
		[kPropertyId]: 0xe94825b7,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * RGBA color to blend with black and white texture NRRRCCCIIIMASSLP
	 */
	ZoneDragColor: {
		[kToPrimitive]: () => 0xe94825b8,
		[kPropertyId]: 0xe94825b8,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Meters per cell must be less than this value NRRRCCCIIIMASSLP
	 */
	ZoneMaxSlope: {
		[kToPrimitive]: () => 0xe94825b9,
		[kPropertyId]: 0xe94825b9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Id of the network texture for which it is OK to have pylon/retaining wall
	 */
	NetworkTextureId: 0xe974eaa1,
	/**
	 * Pairs of cell vertices connected by retaining walls / side flaps
	 */
	ConnectedVerts: {
		[kToPrimitive]: () => 0xe974eaa2,
		[kPropertyId]: 0xe974eaa2,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * (x,z) corresponding to the 4 corners of the pylon w.r.t cell center
	 */
	PylonCornerXZs: {
		[kToPrimitive]: () => 0xe974eaa3,
		[kPropertyId]: 0xe974eaa3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Model resource id(s) for tunnel piece(s)
	 */
	TunnelResourceIds: 0xe974eaa4,
	/**
	 * Tunnel model rotations
	 */
	TunnelModelRotations: 0xe974eaa5,
	/**
	 * Tunnel piece model heights
	 */
	TunnelModelHeights: {
		[kToPrimitive]: () => 0xe974eaa6,
		[kPropertyId]: 0xe974eaa6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Pylon model exemplar instance used by some networks (can be single
	 * instance or one per zoom)
	 */
	SpecialPylonModelId: 0xe974eaa7,
	/**
	 * RGBA color for watered buildings in pipe view
	 */
	WateredBuildingColor: {
		[kToPrimitive]: () => 0xe97f42b0,
		[kPropertyId]: 0xe97f42b0,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * If present, then there are no building-style models for this building and
	 * if there are any, they should be ignored.
	 */
	kSC4BuildingNoModelProperty: {
		[kToPrimitive]: () => 0xe9822d62,
		[kPropertyId]: 0xe9822d62,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * The Max slope this lot will develop on
	 */
	LotConfigPropertyMaxSlopeAllowed: {
		[kToPrimitive]: () => 0xe99b068c,
		[kPropertyId]: 0xe99b068c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * If non-zero, buildings on the lot will construct, otherwise they will be
	 * fully constructed when plopped
	 */
	LotConfigPropertyDoConstruction: {
		[kToPrimitive]: () => 0xe99b068d,
		[kPropertyId]: 0xe99b068d,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Max horizontal distance from the center of the line at which the control
	 * points are placed
	 */
	PowerLineControlMaxHorizDistance: {
		[kToPrimitive]: () => 0xe9a18d3f,
		[kPropertyId]: 0xe9a18d3f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Percent of line length at which to place control points, vertically
	 */
	PowerLineControlVertical: {
		[kToPrimitive]: () => 0xe9a1e8d4,
		[kPropertyId]: 0xe9a1e8d4,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * What wealth level this prop will answer. Choices are None, Low Wealth,
	 * Medium Wealth and High Wealth.
	 */
	PropWealth: {
		[kToPrimitive]: () => 0xe9a316eb,
		[kPropertyId]: 0xe9a316eb,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
		None: 0x00000000,
		LowWealth: 0x00000001,
		MediumWealth: 0x00000002,
		HighWealth: 0x00000003,
	},
	/**
	 * Array of scaling factors for the width of the power lines, one per zoom
	 * level.
	 */
	PowerLineScalingFactor: {
		[kToPrimitive]: () => 0xe9ac43e7,
		[kPropertyId]: 0xe9ac43e7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Group(s) of vehicle automata that will be created when this building is
	 * constructed or plopped.
	 */
	ResponseVehicleType: 0xe9aee3da,
	/**
	 * How many of each type will be created when building is constructed or
	 * plopped.
	 */
	ResponseVehicleCount: {
		[kToPrimitive]: () => 0xe9aee3db,
		[kPropertyId]: 0xe9aee3db,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Group(s) of pedestrian automata that will be created when this building
	 * is constructed or plopped.
	 */
	ResponsePedestrianType: 0xe9aee3dc,
	/**
	 * How many of each type (in Response Pedestrian Type property) will be
	 * created when building is constructed or plopped.
	 */
	ResponsePedestrianCount: {
		[kToPrimitive]: () => 0xe9aee3dd,
		[kPropertyId]: 0xe9aee3dd,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * If set, occupant is never chosen based on user action or normal
	 * simulation.
	 */
	SpecialCaseOnly: {
		[kToPrimitive]: () => 0xe9d117c3,
		[kPropertyId]: 0xe9d117c3,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * If set to true, specifies that the prop should be treated as self-lit
	 */
	Selfilluminated: {
		[kToPrimitive]: () => 0xe9f0fa86,
		[kPropertyId]: 0xe9f0fa86,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraParkEffect: {
		[kToPrimitive]: () => 0xea023270,
		[kPropertyId]: 0xea023270,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraPollutionEffectAir: {
		[kToPrimitive]: () => 0xea023271,
		[kPropertyId]: 0xea023271,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraPollutionEffectWater: {
		[kToPrimitive]: () => 0xea023272,
		[kPropertyId]: 0xea023272,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraPollutionEffectGarbage: {
		[kToPrimitive]: () => 0xea023273,
		[kPropertyId]: 0xea023273,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraPollutionEffectRadiation: {
		[kToPrimitive]: () => 0xea023274,
		[kPropertyId]: 0xea023274,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraSchoolEffect: {
		[kToPrimitive]: () => 0xea023275,
		[kPropertyId]: 0xea023275,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraHospitalEffect: {
		[kToPrimitive]: () => 0xea023276,
		[kPropertyId]: 0xea023276,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraCrimeEffect: {
		[kToPrimitive]: () => 0xea023277,
		[kPropertyId]: 0xea023277,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraTripLength: {
		[kToPrimitive]: () => 0xea023278,
		[kPropertyId]: 0xea023278,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps grid data to aura effect
	 */
	AuraTraffic: {
		[kToPrimitive]: () => 0xea023279,
		[kPropertyId]: 0xea023279,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * (1.0 means no decay, 0.0 means full decay (no smoothing)
	 */
	AuraLongTermDecayFactor: {
		[kToPrimitive]: () => 0xea02327a,
		[kPropertyId]: 0xea02327a,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * (1.0 means no decay, 0.0 means full decay (no smoothing)
	 */
	AuraShortTermDecayFactor: {
		[kToPrimitive]: () => 0xea02327b,
		[kPropertyId]: 0xea02327b,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Base aura for R$,Cs$,Id occupancy
	 */
	AuraBaseAuraLow: {
		[kToPrimitive]: () => 0xea02327c,
		[kPropertyId]: 0xea02327c,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Base aura for R$$,Cs$$,Co$$,Ir,Im occupancy
	 */
	AuraBaseAuraMed: {
		[kToPrimitive]: () => 0xea02327d,
		[kPropertyId]: 0xea02327d,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Base aura for R$$$,Cs$$$,Co$$$ occupancy
	 */
	AuraBaseAuraHigh: {
		[kToPrimitive]: () => 0xea02327e,
		[kPropertyId]: 0xea02327e,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Maps tax rate change (in percent) to aura effect
	 */
	AuraTaxRateChangeEffect: {
		[kToPrimitive]: () => 0xea02327f,
		[kPropertyId]: 0xea02327f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Maps (value_type-wealth_type) to aura effect
	 */
	AuraValueWealthEffect: {
		[kToPrimitive]: () => 0xea023280,
		[kPropertyId]: 0xea023280,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * magnitude and radius in meters of transient aura effect
	 */
	AuraTransientEffectFire: {
		[kToPrimitive]: () => 0xea023290,
		[kPropertyId]: 0xea023290,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * magnitude and radius in meters of transient aura effect
	 */
	AuraTransientEffectFlora: {
		[kToPrimitive]: () => 0xea023291,
		[kPropertyId]: 0xea023291,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * magnitude and radius in meters of transient aura effect
	 */
	AuraTransientEffectCivicPlop: {
		[kToPrimitive]: () => 0xea023292,
		[kPropertyId]: 0xea023292,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * magnitude and radius in meters of transient aura effect
	 */
	AuraTransientEffectNetworkPlop: {
		[kToPrimitive]: () => 0xea023293,
		[kPropertyId]: 0xea023293,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * hotspot settings: threshold value (0-255), radius (in tracts), minimum
	 * weight
	 */
	AuraHotspotSettings: {
		[kToPrimitive]: () => 0xea0232a0,
		[kPropertyId]: 0xea0232a0,
		[kPropertyType]: [Sint32],
		[kInspect]: inspector,
	},
	/**
	 * maps hotspot weight (# of cells above threshold) to monthly fire
	 * probability (in percent 0-100)
	 */
	AuraHotspotRiotProbability: {
		[kToPrimitive]: () => 0xea0232a1,
		[kPropertyId]: 0xea0232a1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * If present, specifies a GZCLSID (class id) for the model class to use.
	 * Otherwise, just use the default kGZCLSID_cS3DModelInstance.
	 */
	kSC4BuildingModelClassProperty: 0xea123cef,
	/**
	 * How fast this building's condition decays over time. The "life
	 * expectancy" of the plant in months can be calculated roughly as the
	 * reciprocal of this number. Thus, a plant with a 50-year lifespan will have
	 * a base decay rate of 1.0 / (50 * 12) and 0.00333 = 25 years.
	 */
	AgeDegradationRate: {
		[kToPrimitive]: () => 0xea1cf220,
		[kPropertyId]: 0xea1cf220,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When a building's "Age Degradation" exceeds this level, the plant will
	 * begin to exhibit various kinds of "soft" failures (visual distress,
	 * sounds, frequent outages, etc.). This will typically be a number near 1.0.
	 */
	SoftFailureThreshold: {
		[kToPrimitive]: () => 0xea1cf221,
		[kPropertyId]: 0xea1cf221,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * When a building's "Age Degradation" exceeds this level, the plant will
	 * either become abandoned or will have a chance to undergo violent
	 * catastrophic failure (i.e., blow up). This will typically be 1.0 or
	 * higher.
	 */
	HardFailureThreshold: {
		[kToPrimitive]: () => 0xea1cf222,
		[kPropertyId]: 0xea1cf222,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to produce one unit of water, not including infrastructure
	 * maintenance.
	 */
	WaterBuildingPumpingCost: {
		[kToPrimitive]: () => 0xea1e3c53,
		[kPropertyId]: 0xea1e3c53,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * For ploppable buildings: Resource instance ID of lot exemplar for this
	 * building
	 */
	LotResourceKey: 0xea260589,
	/**
	 * Specify ID for bitmap in Select-A-My-Sim dialog.
	 */
	MySimBitmapID: 0xea296f8d,
	/**
	 * Specifies default name for My Sim.
	 */
	MySimDefaultName: {
		[kToPrimitive]: () => 0xea296f8f,
		[kPropertyId]: 0xea296f8f,
		[kPropertyType]: String,
		[kInspect]: inspector,
	},
	/**
	 * Specify default zodiac sign for My Sim.
	 */
	MySimZodiacSign: {
		[kToPrimitive]: () => 0xea296f90,
		[kPropertyId]: 0xea296f90,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * Specify My Sim gender (true=male, false=female)
	 */
	MySimIsMale: {
		[kToPrimitive]: () => 0xea296f91,
		[kPropertyId]: 0xea296f91,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * For ploppable buildings: No more than one building within the specified
	 * group can be built in a single city.
	 */
	CityExclusionGroup: 0xea2e078b,
	/**
	 * If true, building will appear ghosted in the menu until triggered by a
	 * script condition
	 */
	ConditionalBuilding: {
		[kToPrimitive]: () => 0xea3209f8,
		[kPropertyId]: 0xea3209f8,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * If true, building will not draw shadows
	 */
	NoShadows: {
		[kToPrimitive]: () => 0xea3209f9,
		[kPropertyId]: 0xea3209f9,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Brush belongs to god mode, valley category
	 */
	CategoryGodValley: 0xea33d694,
	/**
	 * If this property is present, then the given flora is a water flora and
	 * its elevation preference table entries are interpreted as depth below sea
	 * level instead of altitude above sea level
	 */
	KPropertyID_WaterFlora: {
		[kToPrimitive]: () => 0xea346888,
		[kPropertyId]: 0xea346888,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Color progression to use for terrain.
	 */
	MiniMapTerrainRamp: {
		[kToPrimitive]: () => 0xea3573af,
		[kPropertyId]: 0xea3573af,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Freshness score key without the class id
	 */
	AudioFreshScoreKey: {
		[kToPrimitive]: () => 0xea3fbdd7,
		[kPropertyId]: 0xea3fbdd7,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Loop Volume
	 */
	AudioLoopVolume: 0xea3fc42a,
	/**
	 * Total number of stages
	 */
	RiotNumStages: 0xea400620,
	/**
	 * Number of seconds per stage
	 */
	RiotSecondsBetweenStages: 0xea400621,
	/**
	 * Stage at which second controller gets added
	 */
	RiotController2Stage: 0xea400622,
	/**
	 * Array of number of new leaders to spawn at each stage
	 */
	RiotSpawnArray: {
		[kToPrimitive]: () => 0xea400623,
		[kPropertyId]: 0xea400623,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * Maps Police Protection value (0-255) to Riot Suppression( 0=none, 1=riot
	 * progression halted, 2+=riot regresses
	 */
	RiotProtectionvsSuppression: {
		[kToPrimitive]: () => 0xea400624,
		[kPropertyId]: 0xea400624,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max funding percentage for the water department
	 */
	WaterDepartmentMaxFunding: {
		[kToPrimitive]: () => 0xea4025a9,
		[kPropertyId]: 0xea4025a9,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Min/max length in cars, including engine, of freight trains
	 */
	FreightTrainLength: {
		[kToPrimitive]: () => 0xea441c97,
		[kPropertyId]: 0xea441c97,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Min deal amount for power deal
	 */
	NDb_MinDealAmountPower: {
		[kToPrimitive]: () => 0xea46932c,
		[kPropertyId]: 0xea46932c,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Max term a deal can be had before renewal.
	 */
	NDd_MaxDealTermYears: {
		[kToPrimitive]: () => 0xea46934f,
		[kPropertyId]: 0xea46934f,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Amount of horz dist to camera to pull to camera
	 */
	AudioZoomDistanceCameraPull: {
		[kToPrimitive]: () => 0xea4a7c55,
		[kPropertyId]: 0xea4a7c55,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * buyer_demand * NDa_MaxOverDemandFactorForBuyer is the maximum amount the
	 * buyer can buy.
	 */
	NDa_MaxOverDemandFactorForBuyer: {
		[kToPrimitive]: () => 0xea4ad2ff,
		[kPropertyId]: 0xea4ad2ff,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Budget level below which new buy deals become prohibited.
	 */
	NDa_MinBudgetForBuyDeals: {
		[kToPrimitive]: () => 0xea4ae9ef,
		[kPropertyId]: 0xea4ae9ef,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Overrides the automatic minimum Y value.
	 */
	GraphMinimumYValue: {
		[kToPrimitive]: () => 0xea4aedc6,
		[kPropertyId]: 0xea4aedc6,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Production Rate for the Flow of VolcanoLava (Input Time in Fraction from
	 * [0, 1])
	 */
	VolcanoLavaCurveProductionRate: {
		[kToPrimitive]: () => 0xea4bc6e4,
		[kPropertyId]: 0xea4bc6e4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max number of freight trains to cross a tile per second
	 */
	MaxFreightTrainsPerSecond: {
		[kToPrimitive]: () => 0xea511de0,
		[kPropertyId]: 0xea511de0,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Set this to true if the occupant requires power to animate
	 */
	RequiresPowerToAnimate: {
		[kToPrimitive]: () => 0xea5393ed,
		[kPropertyId]: 0xea5393ed,
		[kPropertyType]: Boolean,
		[kInspect]: inspector,
	},
	/**
	 * Maps difference between actual % funding and % ideal funding to %
	 * coverage
	 */
	SchoolFundingToCoverageCurve: {
		[kToPrimitive]: () => 0xea53b30f,
		[kPropertyId]: 0xea53b30f,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 1-10 age group
	 */
	AvgAgeTo1_10AgeGroup: {
		[kToPrimitive]: () => 0xea540621,
		[kPropertyId]: 0xea540621,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 11-20 age group
	 */
	AvgAgeTo11_20AgeGroup: {
		[kToPrimitive]: () => 0xea540622,
		[kPropertyId]: 0xea540622,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 21-30 age group
	 */
	AvgAgeTo21_30AgeGroup: {
		[kToPrimitive]: () => 0xea540623,
		[kPropertyId]: 0xea540623,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 31-40 age group
	 */
	AvgAgeTo31_40AgeGroup: {
		[kToPrimitive]: () => 0xea540624,
		[kPropertyId]: 0xea540624,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 41-50 age group
	 */
	AvgAgeTo41_50AgeGroup: {
		[kToPrimitive]: () => 0xea540625,
		[kPropertyId]: 0xea540625,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 51-60 age group
	 */
	AvgAgeTo51_60AgeGroup: {
		[kToPrimitive]: () => 0xea540626,
		[kPropertyId]: 0xea540626,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 61-70 age group
	 */
	AvgAgeTo61_70AgeGroup: {
		[kToPrimitive]: () => 0xea540627,
		[kPropertyId]: 0xea540627,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 71-80 age group
	 */
	AvgAgeTo71_80AgeGroup: {
		[kToPrimitive]: () => 0xea540628,
		[kPropertyId]: 0xea540628,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * How average age translates to the distribution of population into the
	 * 81-90 age group
	 */
	AvgAgeTo81_90AgeGroup: {
		[kToPrimitive]: () => 0xea540629,
		[kPropertyId]: 0xea540629,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * GUID(s) of department ID for this budget item.
	 */
	BudgetItemDepartment: {
		[kToPrimitive]: () => 0xea54d283,
		[kPropertyId]: 0xea54d283,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		MassTransit: 0xc921ceeb,
		HealthStaff: 0x09188f42,
		HealthCoverage: 0xaa538cb3,
		EducationStaff: 0x09188f4c,
		EducationCoverage: 0x4a538cc6,
		FireDepartment: 0x28f55a9f,
		PoliceDepartment: 0xa2963983,
		Jails: 0xa2963984,
		WaterDepartment: 0xaa4014b4,
		PowerDepartment: 0x8910bc8a,
		SanitationDepartment: 0x6a42a8f5,
		Landmarks: 0x8a416368,
		GovernmentBuildings: 0xea59717a,
		Airports: 0x6a4119f0,
		BusinessDeals: 0x2a5a723f,
		Seaports: 0x4a4155ab,
		ParkAndRec: 0x8a4260a6,
		Roads: 0xc921ceea,
	},
	/**
	 * GUID(s) of line item ID for this budget item.
	 */
	BudgetItemLine: 0xea54d284,
	/**
	 * GUID(s) of purpose ID for this budget item.
	 */
	BudgetItemPurpose: {
		[kToPrimitive]: () => 0xea54d285,
		[kPropertyId]: 0xea54d285,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		MassTransitSwitch: 0xca550301,
		HospitalStaff: 0xca565486,
		HospitalCoverage: 0xea56549e,
		SchoolStaff: 0xea5654b6,
		SchoolCoverage: 0x4a5654ba,
		PoliceProtection: 0x0a567baa,
		Jail: 0xea56768a,
		FireProtection: 0xea567bc3,
		WaterProduction: 0xca58c9d5,
		Sanitation: 0xca58edc7,
		PowerProduction: 0xca58e540,
		LandmarkEffect: 0xaa59670c,
		BusinessDealIncome: 0x4a5a495e,
		ParkEffect: 0xca639989,
		TollBoothMaintenance: 0x0c3bf549,
	},
	/**
	 * Monthly cost(s) in Simoleans for this budget item.
	 */
	BudgetItemCost: {
		[kToPrimitive]: () => 0xea54d286,
		[kPropertyId]: 0xea54d286,
		[kPropertyType]: Sint64,
		[kInspect]: inspector,
	},
	/**
	 * Maps REAL jail capacity to jailbreak chance
	 */
	JailJailbreakResponseCurve: {
		[kToPrimitive]: () => 0xea614f63,
		[kPropertyId]: 0xea614f63,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Min/max percentage (0.0-100.0) of jail capacity that will escape during
	 * jailbreaks
	 */
	JailJailbreakEscapeePercentage: {
		[kToPrimitive]: () => 0xea614f64,
		[kPropertyId]: 0xea614f64,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Stop any jailbreak in progress when REAL jail capacity percentage goes
	 * below this value
	 */
	JailEndJailbreakCapacity: {
		[kToPrimitive]: () => 0xea614f65,
		[kPropertyId]: 0xea614f65,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	NoHighlight: {
		[kToPrimitive]: () => 0xea639fb1,
		[kPropertyId]: 0xea639fb1,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	GeneralOK: {
		[kToPrimitive]: () => 0xea639fb2,
		[kPropertyId]: 0xea639fb2,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	GeneralNotOK: {
		[kToPrimitive]: () => 0xea639fb3,
		[kPropertyId]: 0xea639fb3,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	CreateOK: {
		[kToPrimitive]: () => 0xea639fb4,
		[kPropertyId]: 0xea639fb4,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	CreateNotOK: {
		[kToPrimitive]: () => 0xea639fb5,
		[kPropertyId]: 0xea639fb5,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	DestroyOK: {
		[kToPrimitive]: () => 0xea639fb6,
		[kPropertyId]: 0xea639fb6,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	DestroyNotOK: {
		[kToPrimitive]: () => 0xea639fb7,
		[kPropertyId]: 0xea639fb7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	QueryOK: {
		[kToPrimitive]: () => 0xea639fb8,
		[kPropertyId]: 0xea639fb8,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * -
	 */
	QueryNotOK: {
		[kToPrimitive]: () => 0xea639fb9,
		[kPropertyId]: 0xea639fb9,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Max time in raw trip length that the mass transit preferred strategy will
	 * go using mass transit
	 */
	MaxMassTransitStrategyTripLength: {
		[kToPrimitive]: () => 0xea7b5f06,
		[kPropertyId]: 0xea7b5f06,
		[kPropertyType]: Float,
		[kInspect]: inspector,
	},
	/**
	 * Cost to demolish a tile of network using this tool
	 */
	SimoleanCostPerTileToDemolish: 0xea86e3b5,
	/**
	 * Starting overhead cost in time for each travel type for mass transit
	 * preferred trips
	 */
	TripStartingCostByTravelTypeForMassTransit: {
		[kToPrimitive]: () => 0xea8c3cdb,
		[kPropertyId]: 0xea8c3cdb,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * For static (one-shot) sims: How many times automaton will loop through
	 * its animation before fading out
	 */
	AnimLoopCountRange: {
		[kToPrimitive]: () => 0xea958845,
		[kPropertyId]: 0xea958845,
		[kPropertyType]: [Uint8],
		[kInspect]: inspector,
	},
	/**
	 * Effect type
	 */
	AudioAEMSMasterFxType: 0xebfb0404,
	/**
	 * Maximum number of city-situation-indicators that will be visible
	 */
	MaxCSIs: {
		[kToPrimitive]: () => 0xebfb4a0a,
		[kPropertyId]: 0xebfb4a0a,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * 0 = $, 1 = $$, 2 = $$$
	 */
	MySimWealthLevel: 0xebfc5e26,
	/**
	 * Resource ID of the icon to be used in the choose vehicle dialog
	 */
	MySimIconImage: 0xebfc5e5e,
	/**
	 * Relative sort ordering in the catalog
	 */
	MySimSortOrder: {
		[kToPrimitive]: () => 0xebfc5fba,
		[kPropertyId]: 0xebfc5fba,
		[kPropertyType]: Sint32,
		[kInspect]: inspector,
	},
	/**
	 * Multiplier for tax revenue by difficulty type
	 */
	BudgetDifficultyTaxMultiplier: {
		[kToPrimitive]: () => 0xebff69e7,
		[kPropertyId]: 0xebff69e7,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Cost per second, desirability radius meters, desirability magnitude
	 */
	MayorLimoMoneyProperties: {
		[kToPrimitive]: () => 0xec15654a,
		[kPropertyId]: 0xec15654a,
		[kPropertyType]: [Float],
		[kInspect]: inspector,
	},
	/**
	 * Type/Group/Instance for additional model
	 */
	AuxiliaryModel3Key: {
		[kToPrimitive]: () => 0xec214180,
		[kPropertyId]: 0xec214180,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * kPropertyID_RotationsAllowed
	 */
	KPropertyID_RotationsAllowed: {
		[kToPrimitive]: () => 0xec3bd470,
		[kPropertyId]: 0xec3bd470,
		[kPropertyType]: Uint8,
		[kInspect]: inspector,
	},
	/**
	 * How many people are represented by one unit in the coverage map
	 */
	SchoolCapacityChunkSize: {
		[kToPrimitive]: () => 0xec43826b,
		[kPropertyId]: 0xec43826b,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
	/**
	 * The parent Button ID that opens the submenu this item belongs to
	 */
	ItemSubmenuParentId: {
		[kToPrimitive]: () => 0x8a2602ca,
		[kPropertyId]: 0x8a2602ca,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		Flora: 0x4a22ea06,
		Residential: 0x29920899,
		Commercial: 0xa998af42,
		Industrial: 0xc998af00,
		Road: 0x6999bf56,
		Highway: 0x00000031,
		Rail: 0x00000029,
		MiscTransit: 0x299237bf,
		Airport: 0xe99234b3,
		WaterTransit: 0xa99234a6,
		Power: 0x00000035,
		Water: 0x00000039,
		Garbage: 0x00000040,
		Police: 0x00000037,
		Fire: 0x00000038,
		Education: 0x00000042,
		Health: 0x89dd5405,
		Landmark: 0x09930709,
		Reward: 0x00000034,
		Park: 0x00000003,
	},
	/**
	 * Required for submenu functionality, but usually should not need to be
	 * changed
	 */
	ItemButtonClass: {
		[kToPrimitive]: () => 0x8a2602cc,
		[kPropertyId]: 0x8a2602cc,
		[kPropertyType]: Uint32,
		[kInspect]: inspector,
		SubmenuButton: 0x00000001,
		NetworkItemInSubmenu: 0x00000002,
		FloraItemInSubmenu: 0x00000004,
	},
	/**
	 * A list of Exemplar files this patch applies to (format: Group ID 1,
	 * Instance ID 1, Group ID 2, Instance ID 2, ...). The list must contain an
	 * even number of IDs
	 */
	ExemplarPatchTargets: {
		[kToPrimitive]: () => 0x0062e78a,
		[kPropertyId]: 0x0062e78a,
		[kPropertyType]: [Uint32],
		[kInspect]: inspector,
	},
} as const;
export default ExemplarProperty;

// IMPORTANT! We want to generate as much static type information as possible 
// because TypeScript is noticeably slower due to the massive amount of types it 
// has to recalculate all the time. That's why we dump as much information as 
// possible about the types!
type StringKeys_00 =
	| 'ExemplarType'
	| 'ExemplarInterfaceID'
	| 'ExemplarClassID'
	| 'CustomLot'
	| 'ExemplarID'
	| 'ResManRegisteredGroups'
	| 'kSC4FloraCursorProperty'
	| 'MnRandomSeedingCellsPerMonth'
	| 'ShadowTextureID'
	| 'MaxWaterPollutionValueForUI'
	| 'GarbagePollutionThreshold'
	| 'WaterPollutionThreshold'
	| 'GarbageDecompostionAmount'
	| 'MaxCellsBetweenPowerPoles'
	| 'ParticleCount'
	| 'K24HourClockNightBeginProperty'
	| 'K24HourClockNightEndProperty'
	| 'SFXAlarmSoundId'
	| 'BudgetBondPaybackMonths'
	| 'AudioORFilters'
	| 'VolcanoLavaOrificeRadius'
	| 'SFXAmbienceDecayedSound'
	| 'SimsPerTrainCar'
	| 'SimulatorDateInterval'
	| 'SFXQuerySoundAbandoned'
	| 'SFXDemolitionSound'
	| 'AudioMaxPlayingOneShots'
	| 'AppearanceZoomsFlag'
	| 'MicroSecsPerTimeSlice'
	| 'SleepMicroSecsAfterTimeSlice'
	| 'ProcessCellsMaxTimeSliceMicroSecs'
	| 'PowerGenerated'
	| 'PowerPlantType'
	| 'PowerConsumed'
	| 'BuildingpropFamily'
	| 'ID'
	| 'YearAvailable'
	| 'AdvisorID'
	| 'UtilityStrikeDuration'
	| 'RadiationPollutionThreshold'
	| 'HospitalTypeIDList'
	| 'FieldLots'
	| 'FloraClusterType'
	| 'CategoryMayorMisc'
	| 'AudioANDFilters'
	| 'AudioNOTFilters'
	| 'AudioAmbienceExemplarIds'
	| 'QueryExemplarGUID'
	| 'SFXAlarmAmbienceSound'
	| 'CrimeType'
	| 'LotDeveloperCostToDemolishDestroyedTile'
	| 'RiotMaxLeaders'
	| 'MySimWalkGender'
	| 'FinalGroupId'
	| 'ExemplarCategory'
	| 'CapsDemand'
	| 'Sums'
	| 'LandValueDesirabilityIDs'
	| 'ConstructionTypeSelectionBias'
	| 'LotDeveloperStayNewTime'
	| 'TractDeveloperAvailableStyles'
	| 'NumEndPieces'
	| 'EndPieceExemplars'
	| 'RepeatPieceExemplar'
	| 'SupportInterval'
	| 'NumSupportPieces'
	| 'SupportPieceExemplars'
	| 'MinSpan'
	| 'EndSupportInterval'
	| 'MinPylons'
	| 'MaxPylons'
	| 'WireMainTexId'
	| 'WireTileTexId'
	| 'BridgeWidth'
	| 'MaxSpan'
	| 'CableStayedWireTexture'
	| 'CableStayedWireCount'
	| 'NumInitialErosionPasses'
	| 'NumHydraulicIterationsPerInitialErosionPass'
	| 'NumWindIterationsPerInitialErosionPass'
	| 'MinCellsInUsefulFlatArea'
	| 'AutoFlatAreaEdgeSmootheningRadius'
	| 'MinShoreCliffSize'
	| 'MaxShoreCliffSize'
	| 'NumWaterErosionIterationsPerInvocation'
	| 'NumSmoothingIterationsAfterWaterErosion'
	| 'EdgeReconcilliationSmoothingIterations'
	| 'WasteToEnergyMonthlyCapacity'
	| 'GarbageCapacity'
	| 'MaxGarbageValueForUI'
	| 'MaxAirPollutionValueForUI'
	| 'RippleMinShoreSizeForPlacement'
	| 'RippleMicroSecsPerFrame'
	| 'RippleTerrainUpdateAreaThreshold'
	| 'RippleAlphaIncrementSteps'
	| 'MaxVehicles'
	| 'MaxPeds'
	| 'MaxAircraft'
	| 'MaxWatercraft'
	| 'RequesterSatisfaction'
	| 'QuakeMicroSecsBetweenShakeEffects'
	| 'ManagerID'
	| 'DataViewViewLevel'
	| 'DataViewDataSource'
	| 'DataViewQuantizeLots'
	| 'DataViewHighlightMode'
	| 'DataViewCustomView'
	| 'DataViewMaximumScale'
	| 'DataViewDemandType'
	| 'DataViewCoverageCircleColor'
	| 'DataViewHighlightColor'
	| 'DataViewLegendsHeader'
	| 'DemandDaysOfTaxPenalty'
	| 'NationDemandIDList'
	| 'ConstructionCrewLeadVehicleInstance'
	| 'ConstructionCrewFollowVehicleInstance'
	| 'ConstructionCrewVehiclePathType'
	| 'SimoleanCostPerTile'
	| 'SFXActivateSound'
	| 'PowerPolePlacementCost'
	| 'DesirabilityEffectIDs'
	| 'MaxGarbageOnValve'
	| 'LandfillTileCapacity'
	| 'LandfillTotalMaxGarbageMonthly'
	| 'LandfillMonthlyMaxGarbagePerLandfill'
	| 'LandfillMonthlyMaxGarbageDecayedPerLandfill'
	| 'SimulatorDateDuration'
	| 'AudioMinMusicVolumeLevel'
	| 'AudioMinSoundVolumeLevel'
	| 'AudioMaxMusicVolumeLevel'
	| 'AudioMaxSoundVolumeLevel'
	| 'AudioMusicVolAdjustment'
	| 'AudioMusicFadeoutTimeMs'
	| 'AudioMaxPlayingSounds'
	| 'AudioLayerVolumeSmoothDelta'
	| 'CatalogCapacity'
	| 'MaximumCatalogCapacity'
	| 'MaximumPlopCost'
	| 'AltCatalogCapacity'
	| 'MaximumAltCatalogCapacity'
	| 'MtnCloudsMaxParticles'
	| 'PoliceMaxStrikeDuration'
	| 'PoliceArrestThreshold'
	| 'RecyclingCenterPopulationServed'
	| 'WaterPipeEffectRadius'
	| 'FreshWaterPumpReach'
	| 'SaltWaterPumpReach'
	| 'FreshWaterDistanceLoss'
	| 'HospitalPatientCapacity'
	| 'MaxWaves'
	| 'LavaAnimationFrameDuration'
	| 'LavaScorchDecalLifeTime'
	| 'TextureUpdateIntervalForTerrainBrushes'
	| 'CategoryGodMountain'
	| 'SFXOccupantInstanceSound'
	| 'AudioLoopId'
	| 'AudioFreshSPL'
	| 'GlobalEffectTrigger'
	| 'AirPollutionDelta'
	| 'HardFailureType'
	| 'GraphPlotDataSource1'
	| 'GraphPlotDataSource2'
	| 'GraphPlotCombineOp'
	| 'GraphPlotLabelKey'
	| 'GraphPlotSeries'
	| 'Obliterate_ClusterWindowWidth'
	| 'TrendBarDataSource'
	| 'ModelIsPrelit'
	| 'PluginPackID'
	| 'DataViewTravelTypes'
	| 'SFXActiveSound'
	| 'PlayerdriveVehicleMaxCount'
	| 'MnMonthsBetweenCellCoverage'
	| 'DemandSourceIndex'
	| 'RecyclingCenterPercentReduction'
	| 'WaterProduced'
	| 'LotConfigPropertyFamily'
	| 'LotConfigPropertyFenceDefinition'
	| 'LotConfigPropertyRetainingWallTypes'
	| 'BuildingFoundation'
	| 'MaxRadiationPollutionValueForUI'
	| 'HealthStrikeDuration'
	| 'SchoolStudentCapacity'
	| 'VolcanicAshLifeTime'
	| 'MinimumNumberOfCurvePoints'
	| 'EmergencyVehicleKPH'
	| 'BrushActiveSound'
	| 'BrushReleaseOneShot'
	| 'Comp1TextureId'
	| 'Comp1OperationId'
	| 'Comp1DecalTextureId'
	| 'Comp1MaxPlacementsPerCell'
	| 'Comp2TextureId'
	| 'Comp2OperationId'
	| 'Comp2DecalTextureId'
	| 'Comp2MaxPlacementsPerCell'
	| 'Comp3TextureId'
	| 'Comp3OperationId'
	| 'Comp3DecalTextureId'
	| 'Comp3MaxPlacementsPerCell'
	| 'Comp4TextureId'
	| 'Comp4OperationId'
	| 'Comp4DecalTextureId'
	| 'Comp4MaxPlacementsPerCell'
	| 'FreightReceivingCapacity'
	| 'ItemIcon'
	| 'ItemOrder'
	| 'ItemSubmenu'
	| 'ItemButtonID'
	| 'PortTypeExemplarIDs'
	| 'SimoleanCostPerBridgeTile'
	| 'SimoleanCostPerTunnelTile'
	| 'CategoryGodMisc'
	| 'WaterPollutionDelta'
	| 'AudioLayerPositionMode'
	| 'AudioLayerDensityMode'
	| 'SchoolCapacityToStaffDivisor'
	| 'HospitalCapacityToStaffDivisor'
	| 'AudioLayerPositionSmoothDelta'
	| 'CrimeIncidentID'
	| 'TravellersPerBus'
	| 'OccupantTypes'
	| 'MMoistureVariationScale'
	| 'MMoistureDitherScale'
	| 'IncineratorMonthlyCapacity'
	| 'IntelliScrollOuterRadiusPixels'
	| 'PowerRadiationRadius'
	| 'AirPollutionThreshold'
	| 'SchoolStrikeDuration'
	| 'MaximumDistanceFromOriginToNetwork'
	| 'SchoolTypeIDList'
	| 'PropOccupantClassID'
	| 'MaxAcceptablePumpedWaterPollutionLevel'
	| 'OccupantGroups'
	| 'SFXQuerySound'
	| 'UIActiveCursorId'
	| 'UIIdleCursorId'
	| 'AudioFreshVolume'
	| 'GraphType'
	| 'SFXIntersectionSound'
	| 'SFXQuerySoundDecayed'
	| 'AudioMaxConcurrentOneShots'
	| 'NumFramesBetweenAnchorPtFreeze'
	| 'NumSmoothingProgressionSteps'
	| 'DistAddedPerSmoothingProgressionStep'
	| 'TimeBetweenAnchorPtFreeze'
	| 'WaterTreatmentMonthlyCapacity'
	| 'WaterConsumed'
	| 'KPropertyID_LotConfigNetworkTileId'
	| 'SFXDefaultPlopSound'
	| 'SFXAmbienceGoodSound'
	| 'NumGrowthStages'
	| 'LotStageTemplateIDs'
	| 'TripCapacityList'
	| 'IntelliScrollInnerRadiusPixels'
	| 'HullHorizontal'
	| 'HullVertical'
	| 'WaterErosionIterations'
	| 'FlowStepsForWaterErosion'
	| 'SmoothingStepsForWindErosion'
	| 'RegionUIGridColor'
	| 'RegionUIHighlight'
	| 'VehicleBlurSpeedKPH'
	| 'RiotMaxInstances'
	| 'SoundBankID'
	| 'AutoloadAuxiliaryModels'
	| 'PropType'
	| 'CrimeUpdatePeriod'
	| 'KDefaultLotFoundationTypeProperty'
	| 'KShouldAttemptLotLevellingProperty'
	| 'KShouldAttemptInternalLotLevellingProperty'
	| 'LotDeveloperNightUpdateInterval'
	| 'LotDeveloperNightUpdateCount'
	| 'NetworkTextureId'
	| 'TunnelResourceIds'
	| 'TunnelModelRotations'
	| 'SpecialPylonModelId'
	| 'ResponseVehicleType'
	| 'ResponsePedestrianType'
	| 'kSC4BuildingModelClassProperty'
	| 'LotResourceKey'
	| 'MySimBitmapID'
	| 'CityExclusionGroup'
	| 'CategoryGodValley'
	| 'AudioLoopVolume'
	| 'RiotNumStages'
	| 'RiotSecondsBetweenStages'
	| 'RiotController2Stage'
	| 'BudgetItemDepartment'
	| 'BudgetItemLine'
	| 'BudgetItemPurpose'
	| 'SimoleanCostPerTileToDemolish'
	| 'AudioAEMSMasterFxType'
	| 'MySimWealthLevel'
	| 'MySimIconImage'
	| 'ItemSubmenuParentId'
	| 'ItemButtonClass';

type StringKeys_01 =
	| 'ExemplarName'
	| 'NameStringNonlocalizable'
	| 'DescriptionStringNonlocalizable'
	| 'EffectName'
	| 'DataViewCoverageEffect'
	| 'AutomatonDisplayName'
	| 'ItemName'
	| 'ItemDescription'
	| 'CrimeName'
	| 'VisualEffectName'
	| 'VisualEffectName1'
	| 'MySimDefaultName';

type StringKeys_02 =
	| 'MaxNetworkSlopeChange'
	| 'ShadowSize'
	| 'ShadowStrength'
	| 'ShadowThreshold'
	| 'SunDirection'
	| 'SunPitch'
	| 'HillShadowStrength'
	| 'HillShadowWarp'
	| 'HillShadowFadeDistance'
	| 'FireStationRadius'
	| 'AirEffect'
	| 'PowerReductionEffect'
	| 'UtilityStrikeEfficiency'
	| 'GarbageUIScalingFactor'
	| 'HospitalCoverageRadius'
	| 'HQDecay'
	| 'HealthCapacityEffect'
	| 'UndergroundIntersectionHeight'
	| 'MinimumPowerLineHeight'
	| 'ParticleLife'
	| 'WindFactor'
	| 'TerrainFactor'
	| 'MaxParticleRate'
	| 'ParticleFOV'
	| 'FloatAltitude'
	| 'MaxOpacity'
	| 'FadeinTime'
	| 'FadeoutTime'
	| 'TextureBlendStrength'
	| 'PowerPoleDemolitionCost'
	| 'AudioOccupantGroupRadius'
	| 'VolcanoLavaTotalLavaTimeInSecs'
	| 'AudioCellGroupRadius'
	| 'PowerLinePlacementCost'
	| 'AudioVolumeDecayLimit'
	| 'MOperationQuantaForOccupiedCell'
	| 'MOperationQuantaForEmptyCell'
	| 'MOperationQuantaBeforeTimerCall'
	| 'RailDamageAccidentFactor'
	| 'TransitSwitchFare'
	| 'FillingDegree'
	| 'DemandSatisfiedFloat'
	| 'DemandCreatedFloat'
	| 'MaxSlopeOnNetworkSide'
	| 'MonthlyChance'
	| 'MonthlyIncomeFactor'
	| 'FlammabilityEffect'
	| 'PowerMinAcceptableFunding'
	| 'MonthlyTrafficDensityReduction'
	| 'TextureFloor'
	| 'TerrainShadowAmount'
	| 'FloraTerrainShadowAmount'
	| 'ModelTerrainShadowAmount'
	| 'AutomataTerrainShadowAmount'
	| 'AtmosphericScattering'
	| 'LightingUpdateDelta'
	| 'NightThreshold'
	| 'FireProtectionSimMaxAllowedFunding'
	| 'FireProtectionSimStrikeEfficiencyMultiplier'
	| 'FireProtectionSimMinFundingToEndStrikes'
	| 'FireStationDispatchRadius'
	| 'kSC4RetainingWallPropertyWallTextureSize'
	| 'WaterDepthForMaxAlpha'
	| 'WaterDepthToColorGradientFactor'
	| 'CityEdgeBrightnessKludgeFactor'
	| 'FlammabilityMultiplierAbandonment'
	| 'FlammabilityMultiplierNoWater'
	| 'FlammabilityRandomFireProbability'
	| 'FloraClusterMaxRadius'
	| 'FloraClusterMaxHeight'
	| 'AudioZoomScaleFactor'
	| 'AudioListenerRolloffFactor'
	| 'CurveSpeedMultiplier'
	| 'CommercialDemandEffect'
	| 'IndustrialDemandEffect'
	| 'DemandEffectCs$'
	| 'DemandEffectCs$$'
	| 'DemandEffectCs$$$'
	| 'DemandEffectCo$$'
	| 'DemandEffectCo$$$'
	| 'DemandEffectIR'
	| 'DemandEffectID'
	| 'DemandEffectIM'
	| 'DemandEffectIHT'
	| 'AudioVolumeAttackLimit'
	| 'MaximumHQBoost'
	| 'LandValueDesirabilityFactors'
	| 'ConstructionResourcesPerResident'
	| 'TractDeveloperOverbuild'
	| 'TractDeveloperRedevelopSizeThreshold'
	| 'TractDeveloperOccupancyVariation'
	| 'MinClearance'
	| 'EndPieceSpanLocations'
	| 'ColumnTopPosForSupportPieces'
	| 'ColumnTopPosForEndPieces'
	| 'MinHold'
	| 'MinEndHold'
	| 'PylonsHeight'
	| 'CeilingHeight'
	| 'CableStayedWireThickness'
	| 'CableStayedSpanAnchors'
	| 'WireTilingUnit'
	| 'BridgeHeightBias'
	| 'SuspensionWireBase'
	| 'SuspensionWireInside'
	| 'SupportColumnBase'
	| 'MinAltitudeAboveWater'
	| 'MaxAltitudeAboveWater'
	| 'MinEndIntervalFraction'
	| 'SeaLevel'
	| 'MaxTerrainHeight'
	| 'MinTerrainHeight'
	| 'ImageImportScaleFactor'
	| 'DefaultTerrainHeight'
	| 'TemperatureRangeFactor'
	| 'WaterProximityRangeFactor'
	| 'MaxHtChangeToFlattenFactor'
	| 'MaxTerraceAltitudeFactor'
	| 'MinTerraceAltitudeFactor'
	| 'MinShoreCliffCandidateHt'
	| 'MinShoreCliffHt'
	| 'MaxShoreCliffHt'
	| 'MaxNormalYForCliff'
	| 'MinSeaLevel'
	| 'MaxSeaLevel'
	| 'SeaRaiseLowerAmount'
	| 'TerrainRaiseLowerAmount'
	| 'EdgeReconcilliationHtDifferenceThreshold'
	| 'PoliceStationRadius'
	| 'PoliceStationDispatchRadius'
	| 'UtilityMinFundingToEndStrike'
	| 'TrafficVolumePerPopulation'
	| 'BudgetTaxRateOccWeight_R$$$'
	| 'BudgetTaxRateOccWeight_Cs$$'
	| 'BudgetTaxRateOccWeight_Cs$$$'
	| 'BudgetTaxRateOccWeight_Co$$$'
	| 'HealthCoverageRadiusEffect'
	| 'RippleLandVertexHtAboveSeaLevel'
	| 'UndergroundPieceDepth'
	| 'ScrollingDeceleration'
	| 'MaxVehiclesPerSecond'
	| 'MaxPedsPerSecond'
	| 'StopSignDelay'
	| 'StreetGoTime'
	| 'RoadGoTime'
	| 'AvenueGoTime'
	| 'FadeTime'
	| 'PowerLineCurveDistanceBetweenPoints'
	| 'PowerLineControlHoriz'
	| 'FreightTrafficScalingFactor'
	| 'AutoScrollSpeed'
	| 'QuakeDistBetweenEffects'
	| 'QuakeFaultLineCurviness'
	| 'QuakeMaxFaultLineSlopeVariation'
	| 'QuakeBrushTravelSpeed'
	| 'QuakeDistBetweenAutomataRepulsors'
	| 'PipeBurstMinLeakTimeBeforeBurst'
	| 'PipeBurstMaxLeakTimeBeforeBurst'
	| 'DemandCommercicalCapReliefForAirports'
	| 'DemandCommercicalCapReliefForSeaports'
	| 'DemandIndustrialCapReliefForTrips'
	| 'DemandIndustrialCapReliefForAirports'
	| 'DemandIndustrialCapReliefForSeaports'
	| 'ConstructionCrewTime'
	| 'ConstructionCrewVehicleSpeed'
	| 'LandfillGarbageDecayRate'
	| 'LandfillLevelToleranceThreshold'
	| 'NearestDestinationAttractiveness'
	| 'MaximumEQBoost'
	| 'DeathsDoorEffectChance'
	| 'DeathsDoorEffectHeightDelta'
	| 'LaneSwitchCost'
	| 'LaneSwitchMaxDistance'
	| 'AccidentDuration'
	| 'AccidentCheckPeriod'
	| 'MtnCloudsHeight'
	| 'MtnCloudsFormHeight'
	| 'MtnCloudsFadeInHeight'
	| 'MtnCloudsFadeOutHeight'
	| 'MtnCloudsDisperseHeight'
	| 'MtnCloudsSlowDownHeight'
	| 'MtnCloudsStopHeight'
	| 'MtnCloudsShadeIntensity'
	| 'MtnCloudsMinFadeInTime'
	| 'MtnCloudsParticleMaxAge'
	| 'MtnCloudsParticleGenRate'
	| 'PoliceMaxJailOvercrowdingPercentage'
	| 'PoliceMaxAllowedFundingPercentage'
	| 'PoliceMonthlyCriminalRehabilitationPercent'
	| 'PoliceStrikeEfficiency'
	| 'PoliceMinFundingToEndStrikes'
	| 'SchoolMinGradeToEndStrike'
	| 'SchoolCoverageRadius'
	| 'SchoolEQDecayEffect'
	| 'DistFromShoreToWaveStartLocation'
	| 'WaveMinProductionInterval'
	| 'WaveMaxProductionInterval'
	| 'WaveInnerRadius'
	| 'WaveOuterRadius'
	| 'WaveArcAngle'
	| 'WaveInitialMoveSpeed'
	| 'WaveInitialExpandSpeed'
	| 'WaveMinMoveSpeed'
	| 'WaveMinExpandSpeed'
	| 'WaveMaxMoveSpeed'
	| 'WaveMaxExpandSpeed'
	| 'InterWaveGap'
	| 'WaveMaxOrientationDifference'
	| 'TrafficAirPollutionFactor'
	| 'LavaColorGradientMapFactor'
	| 'LavaMaxFlowRate'
	| 'LavaHtDiffForMaxFlowRate'
	| 'LavaLiquidToSolidConversionFactor'
	| 'LavaMinAlphaDepth'
	| 'LavaMaxAlphaDepth'
	| 'LavaScorchedTerrainDecalSize'
	| 'LavaUnderWaterSolidificationMultiple'
	| 'LavaDepthBurnThreshold'
	| 'LavaDepthDeepFryThreshold'
	| 'LavaMinAmountForDepositToHappen'
	| 'LavaScorchDecalFadeInTime'
	| 'LavaScorchDecalFadeOutTime'
	| 'LotConfigPropertyMinSlopeAllowed'
	| 'BudgetTaxRateOccWeight_IResource'
	| 'MinWaterDepthForDeepSeaBedTexture'
	| 'MaxWaterDepthForDeepSeaBedTexture'
	| 'FireProtectionSimStationNoRoadMultiplier'
	| 'ModKey1StrengthMultiplier'
	| 'ModKey1WidthMultiplier'
	| 'ModKey2StrengthMultiplier'
	| 'ModKey2WidthMultiplier'
	| 'ApplicationTimeIntervalForFullBrushStrength'
	| 'CrimeSimMultiplier'
	| 'HealthEffectRadius'
	| 'SimoleanCostPerMeterDisplaced'
	| 'SFXAlarmTime'
	| 'NDb_MinDealAmountWater'
	| 'NDc_MinDealProfitFactor'
	| 'GraphMaximumYValue'
	| 'GraphYTickSpacing'
	| 'GraphPlotScale'
	| 'Obliterate_SmokeScreenFormationTime'
	| 'CoverageRadiusSlopMultiplier'
	| 'DeathsDoorHQ'
	| 'DeathsDoorEffectHeight'
	| 'NDd_SuspensionPeriod'
	| 'MaxSlopeAlongNetwork'
	| 'LotConfigPropertyMaxSlopeBeforeLotFoundation'
	| 'kSC4FoundationPropertyMaxHeight'
	| 'BudgetMaxTaxRate'
	| 'HealthStrikeEfficiency'
	| 'HealthMinGradeToEndStrike'
	| 'BudgetTaxRateOccWeight_Co$$'
	| 'BudgetTaxRateOccWeight_IManufacturing'
	| 'SchoolCapacityEffect'
	| '24HourClockSpeedTimeMagnification'
	| 'SegmentHeight'
	| 'PostWidth'
	| 'ScaffoldGap'
	| 'PlankWidth'
	| 'PlankTextureScale'
	| 'ScaffoldTextureScale'
	| 'GirdersTextureScale'
	| 'ScaffoldGrowthRate'
	| 'ScaffoldRemovalRate'
	| 'CranePostWidth'
	| 'CranePostGap'
	| 'CraneHeightAboveScaffold'
	| 'CraneRotationTime'
	| 'PowerLineControlMaxVerticalDistance'
	| 'TerrainTexTilingFactor'
	| 'EmergencyVehicleIdleTime'
	| 'BrushWiggleAmount'
	| 'Comp1MaxDecalRotation'
	| 'Comp2MaxDecalRotation'
	| 'Comp3MaxDecalRotation'
	| 'Comp4MaxDecalRotation'
	| 'CrimeJoblessIndicatorSmoothingFactor'
	| 'CrimeCrimeGridDecayFactor'
	| 'CrimeCriminalGridDecayFactor'
	| 'PipeBurstProbability'
	| 'BudgetBondInterestRate'
	| 'AudioLayerWeight'
	| 'NDb_MinDealAmountGarbage'
	| 'VehicleSkid'
	| 'MaxBusesPerSecond'
	| 'TrafficAirPollutionEffect'
	| 'MonthlyCostPerPipe'
	| 'CatalogMonthlyCostFloat'
	| 'NDd_UnsuspensionPeriod'
	| 'FerryFare'
	| 'MfYearlyAmbientTemperature'
	| 'MfYearlyAmbientTemperatureVariation'
	| 'MfYearlyAmbientTemperatureVariationFactor'
	| 'MfSeaModerationFactor'
	| 'MfAltitudeTemperatureFactor'
	| 'MfWindChillTemperatureFactor'
	| 'MfYearlyAmbientMoisture'
	| 'MfYearlyAmbientMoistureVariation'
	| 'MfYearlyAmbientMoistureVariationFactor'
	| 'MfMoistureHillFactor'
	| 'MfValleyMoistureBoost'
	| 'MfMoistureValleySlopeThreshold'
	| 'MfYearlyAmbientWindSpeed'
	| 'MfYearlyAmbientWindDirection0'
	| 'MfYearlyAmbientWindDirection1'
	| 'MfWindPerturbationRange'
	| 'WaterUseReduction'
	| 'PowerLineMonthlyUpkeep'
	| 'BudgetTaxRateOccWeight_R$'
	| 'BudgetTaxRateOccWeight_Cs$'
	| 'BudgetTaxRateOccWeight_IDirty'
	| 'SchoolCoverageRadiusEffect'
	| 'MaxRoadsFundingPercent'
	| 'MaxMassTransitFundingPercent'
	| 'DamagedRoadExtraStepCost'
	| 'CommuteTripMaxTime'
	| 'JobScalingConstant'
	| 'SchoolEQBoost'
	| 'SchoolEQBoostEffect'
	| 'UndergroundTrenchFloorDepth'
	| 'BudgetTaxRateOccWeight_IHighTech'
	| 'WindScalar'
	| 'MaxBeachAltitude'
	| 'KeyboardScrollSpeed'
	| 'NetworkLotConfigPropertyMaxSlopeAllowed'
	| 'NetworkLotConfigPropertyMinSlopeAllowed'
	| 'RelativeOccurrance'
	| 'HealthEffectStrength'
	| 'GarbageServiceCostPerUnitOfGarbage'
	| 'NDd_MinDealTermYears'
	| 'VolcanoLavaScaleIntensityOfProduction'
	| 'RadiationSpewIntensity'
	| 'RadiationSpewRadius'
	| 'MaxTerrainHtIncrease'
	| 'MaxTerrainHtDecrease'
	| 'MaxNetworkHtAdjustment'
	| 'MinTerrainSlopeForTunnelStart'
	| 'MaxTunnelSlope'
	| 'MaxDisplacementBeyondRefPlane'
	| 'MaxDistFromTerrain'
	| 'MaxRetainingWallHt'
	| 'MaxPylonHt'
	| 'MaxHtDiffBetweenLandBridgeEnds'
	| 'NetworkHtChangeThatRequiresFixing'
	| 'PowerPlantEnergyConversionCost'
	| 'kSC4FoundationPropertySideTextureSize'
	| 'kSC4FoundationPropertyTopTextureSize'
	| 'OBSSchoolMinAcceptableFunding'
	| 'HospitalHQBoost'
	| 'EQDecay'
	| 'HealthQuotientDecayEffect'
	| 'FlammabilityMultiplierSummer'
	| 'MovingVanFrequency'
	| 'FloraBurntSweepInterval'
	| 'FloraBurntSweepSize'
	| 'FloraElevationScaleRange'
	| 'GradeMaxAngle'
	| 'GradeSpeedMultiplier'
	| 'FireCrewMaxStreamDist'
	| 'EQResetPercent'
	| 'HQResetPercent'
	| 'ObsoleteDemandThresholdsList'
	| 'EfficiencyDistressThreshold'
	| 'HeightMap'
	| 'ScrollGradient'
	| 'NDa_MinTermToSustainSellDealCostMonths'
	| 'NDc_MaxDealProfitFactor'
	| 'MaxCommuteTrainsPerSecond'
	| 'MaxFreightTrucksPerSecond'
	| 'TripLengthToMinutesDisplayMultiplier'
	| 'AudioAEMSMaxVolume'
	| 'AudioAEMSMasterFxLevel'
	| 'PlayerdriveVehiclesPerSecond'
	| 'CrimePoliceFactor'
	| 'WaterEffect'
	| 'GarbageEffect'
	| 'KMaxCellAltitudeDeltaForFlatnessProperty'
	| 'KMaxSlopeForFlatnessProperty'
	| 'KLotAutoLevelInternalAltitudeDeltaProperty'
	| 'MaxAreaSlopeAllowedForLevellingProperty'
	| 'TransitSwitchEntryCost'
	| 'TransitSwitchTrafficCapacity'
	| 'PowerMaxAllowedFunding'
	| 'PowerPlantMaxProductionRatio'
	| 'OBSHealthMinAcceptableFunding'
	| 'SchoolStrikeEfficiency'
	| 'BudgetTaxRateOccWeight_R$$'
	| 'HealthQuotientBoostEffect'
	| 'TunnelModelHeights'
	| 'LotConfigPropertyMaxSlopeAllowed'
	| 'PowerLineControlMaxHorizDistance'
	| 'PowerLineControlVertical'
	| 'AuraLongTermDecayFactor'
	| 'AuraShortTermDecayFactor'
	| 'AgeDegradationRate'
	| 'SoftFailureThreshold'
	| 'HardFailureThreshold'
	| 'WaterBuildingPumpingCost'
	| 'WaterDepartmentMaxFunding'
	| 'NDb_MinDealAmountPower'
	| 'NDd_MaxDealTermYears'
	| 'NDa_MaxOverDemandFactorForBuyer'
	| 'NDa_MinBudgetForBuyDeals'
	| 'GraphMinimumYValue'
	| 'MaxFreightTrainsPerSecond'
	| 'JailEndJailbreakCapacity'
	| 'MaxMassTransitStrategyTripLength';

type StringKeys_03 =
	| 'kSC4FloraParametersProperty'
	| 'kSC4FloraPreferencesProperty'
	| 'ShadowOffset'
	| 'ShadowColor'
	| 'UtilityStrikeResponseCurve'
	| 'AgeToMaintenanceCostMultiplierResponseCurve'
	| 'FundingPercentageToDecayRateMultiplierResponseCurve'
	| 'UsagePercentageToDecayRateMultiplierResponseCurve'
	| 'FogRateByHour'
	| 'NighttimeGlobalColor'
	| 'Z0_TextureSpreadCurve'
	| 'Z1_TextureSpreadCurve'
	| 'Z2_TextureSpreadCurve'
	| 'Z3_TextureSpreadCurve'
	| 'Z4_TextureSpreadCurve'
	| 'WaterPollutionEffectStrengthCurve'
	| 'AirPollutionEffectStrengthCurve'
	| 'RadiationPollutionEffectStrengthCurve'
	| 'GarbagePollutionEffectStrengthCurve'
	| 'AudioAmbienceAttentionSpanRadii'
	| 'NDe_ProfitResponseCurve'
	| 'FreightTrainDensityCurve'
	| 'HealthFundingToCoverageCurve'
	| 'ExtraLoadRadiusPerMeg'
	| 'FundingToDamageAccelerationCurve'
	| 'BudgetInitialTaxRate'
	| 'OccupantSize'
	| 'LandmarkEffect'
	| 'ParkEffect'
	| 'HealthFundingToEfficiencyCurve'
	| 'DaytimeGlobalColor'
	| 'AtmosphericScatteringColour'
	| 'HospitalPopulationVsDistance'
	| 'FireProtectionSimFundingEfficiencyCurve'
	| 'FireProtectionSimStrikeResponseCurve'
	| 'WaterNightColorAdjustment'
	| 'CityEdgeLayerHeights'
	| 'FlammabilityHotspotFireProbability'
	| 'PathOffsetRangeForPeds'
	| 'PathOffsetRangeForVehicles'
	| 'LotDeveloperCostMultiplierVsLotSlope'
	| 'CommuteTrainDensityCurve'
	| 'AudioListenerGranularity'
	| 'LandValueAltitudeEffect'
	| 'LandValueDesirabilityCurve'
	| 'StagePopluationMultiplier'
	| 'LotDeveloperOccupancyThresholds'
	| 'TractDeveloperReoccupyThresholds'
	| 'TractDeveloperDemolitionCosts'
	| 'TractDeveloperNewLotCosts'
	| 'TractDeveloperMinVacancyRange'
	| 'SupportColumnCorners'
	| 'MainPylonCorners'
	| 'CableStayedFrontAnchors'
	| 'CableStayedRearAnchors'
	| 'PivotPointPosition'
	| 'BoundingBox'
	| 'MaxNormalTerrainHeight'
	| 'MinRegularHtFactor'
	| 'MaxRegularHtFactor'
	| 'MinMountainHtFactor'
	| 'MaxMountainHtFactor'
	| 'SeaLevelChangeDueToWaterSlider'
	| 'TypicalBrushAngleIncrement'
	| 'EdgeReconcilliationSmoothingRadiusVsHeightDiff'
	| 'MaxSpeedByNetworkForWalking'
	| 'MaxSpeedByNetworkForDriving'
	| 'MaxSpeedByNetworkForABus'
	| 'MaxSpeedByNetworkForATrain'
	| 'MaxSpeedByNetworkForATruck'
	| 'MaxSpeedByNetworkForAFrtTrain'
	| 'MaxSpeedByNetworkForSubways'
	| 'MaxSpeedByNetworkForElTrain'
	| 'MaxSpeedByNetworkForMonorail'
	| 'RippleQuadWidth'
	| 'RippleTextureUIncrementPerQuad'
	| 'RippleWaterSideRibbonWidth'
	| 'RippleLandSideRibbonWidth'
	| 'RippleWaterSideRibbonWidthVariation'
	| 'RippleConcavityThresholdAngle'
	| 'LifeExpectancyToWorkforceCurve'
	| 'VehicleDensityCurve'
	| 'PedDensityCurve'
	| 'OccupantTripNoiseRange'
	| 'CommuteClock'
	| 'BusClock'
	| 'FreightTrainClock'
	| 'CommuteTrainClock'
	| 'OccupantTripClock'
	| 'FreightTruckClock'
	| 'CrimePropRequestCurve'
	| 'QuakeBrushStrengthAtEpicenterVsQuakeIntensity'
	| 'QuakeBrushWidthAtEpicenterVsQuakeIntensity'
	| 'QuakeBrushStrengthVsDistance'
	| 'QuakeBrushWidthVsDistance'
	| 'PropTimeOfDay'
	| 'DemandNeutralTaxRateVsPopulation'
	| 'DemandTaxModifierVsRateVariance'
	| 'DemandCommercicalCapReliefForConnections'
	| 'NationDefaultDemandModifierVsMonth'
	| 'NationDemandModifier1VsMonth'
	| 'NationDemandModifier2VsMonth'
	| 'NationDemandModifier3VsMonth'
	| 'NationDemandModifier4VsMonth'
	| 'NationDemandModifier5VsMonth'
	| 'NationDemandModifier6VsMonth'
	| 'NationDemandModifier7VsMonth'
	| 'NationDemandModifier8VsMonth'
	| 'NationDemandModifier9VsMonth'
	| 'NationDemandModifier10VsMonth'
	| 'NationDemandModifier11VsMonth'
	| 'NationDemandModifier12VsMonth'
	| 'NationDifficultyDemandModifier'
	| 'VolcanoLavaCurveSolidifcationRate'
	| 'BusDensityCurve'
	| 'DesirabilityEffectValues'
	| 'ZooEscapeChanceCurve'
	| 'BudgetLandValueToSimoleans'
	| 'NDe_MaxUnitCostForGarbageDealsRCurve'
	| 'SpeedMultiplierByNetwork'
	| 'CongestionToAccidentProbability'
	| 'CapacityToAccidentProbability'
	| 'AudioAEMSVolumeCurve'
	| 'MtnCloudsSizeRange'
	| 'MtnCloudsAspectRange'
	| 'MtnCloudsOpacityRange'
	| 'MtnCloudsIntensityRange'
	| 'MtnCloudsSpeedRange'
	| 'MtnCloudsShadeOffsetRange'
	| 'MtnCloudsCursorHideRange'
	| 'MtnCloudsSimSpeedFactor'
	| 'MtnCloudsShadeOffsetDir'
	| 'MtnCloudsZoomFade'
	| 'PoliceFundingToEfficiencyResponseCurve'
	| 'PoliceStrikeResponseCurve'
	| 'JailFundingToEfficiencyResponseCurve'
	| 'PollutionRadii'
	| 'PowerFundingToEfficiencyCurve'
	| 'HealthStrikeResponseCurve'
	| 'SchoolFundingToEfficiencyCurve'
	| 'WaveMinTimeInState'
	| 'WaveMaxTimeInState'
	| 'WaveMinExpandAcceleration'
	| 'WaveMaxExpandAcceleration'
	| 'WaveMinMoveAcceleration'
	| 'WaveMaxMoveAcceleration'
	| 'HealthQuotientToLifeExpectancyCurve'
	| 'AirPollutionToHQDecayCurve'
	| 'GarbagePropRequestCurve'
	| 'CrimeLayerClock'
	| 'AudioZoomDistanceTweaks'
	| 'WaterFundingToEfficiencyCurve'
	| 'AudioDensity2FreshVolumeCurve'
	| 'AudioDensity2LoopVolumeCurve'
	| 'Obliterate_NumClustersVsTime'
	| 'TrendBarResponseCurve'
	| 'MonthlyCostForNetworkTile'
	| 'AudioVolumeLimitingCurve'
	| 'SimulationSpeedMultiplier'
	| 'LandValueEffect'
	| 'R$ProximityEffect'
	| 'R$$ProximityEffect'
	| 'R$$$ProximityEffect'
	| 'TrafficEffect'
	| 'TripLengthEffect'
	| 'SchoolEffect'
	| 'HospitalEffect'
	| 'PollutionEffectAir'
	| 'PollutionEffectWater'
	| 'PollutionEffectGarbage'
	| 'PollutionEffectRadiation'
	| 'Stage1VsSize'
	| 'Stage2VsSize'
	| 'Stage3VsSize'
	| 'Stage4VsSize'
	| 'Stage5VsSize'
	| 'Stage6VsSize'
	| 'Stage7VsSize'
	| 'Stage8VsSize'
	| 'Stage9VsSize'
	| 'Stage10VsSize'
	| 'Stage11VsSize'
	| 'Stage12VsSize'
	| 'Stage13VsSize'
	| 'Stage14VsSize'
	| 'Stage15VsSize'
	| 'Co$$ProximityEffect'
	| 'Co$$$ProximityEffect'
	| 'TransientAuraEffect'
	| 'SlopeEffect'
	| 'SchoolInitMaxAllowedFunding'
	| 'HealthEffectivenessVsDistanceEffect'
	| 'KAnimationTimeDilationProperty'
	| 'BrushCost'
	| 'Comp1Width'
	| 'Comp1Strength'
	| 'Comp2Width'
	| 'Comp2Strength'
	| 'Comp3Width'
	| 'Comp3Strength'
	| 'Comp4Width'
	| 'Comp4Strength'
	| 'CrimeR$EQBaseCriminalityCurve'
	| 'CrimeR$$EQBaseCriminalityCurve'
	| 'CrimeR$$$EQBaseCriminalityCurve'
	| 'CrimeR$JoblessRatioCriminalityCurve'
	| 'CrimeR$$JoblessRatioCriminalityCurve'
	| 'CrimeR$$$JoblessRatioCriminalityCurve'
	| 'CrimeCriminalityCrimesCurve'
	| 'CrimePoliceProtectionCrimeAttenuation'
	| 'AgeToOutputLevelResponseCurve'
	| 'BudgetWaningWealthPropertyTaxMultiplier'
	| 'AirEffectByZoneType'
	| 'WaterEffectByZoneType'
	| 'GarbageEffectByZoneType'
	| 'GarbageTransportVersusLandfillTiles'
	| 'AudioAEMSZoomVolumes'
	| 'HealthInitMaxAllowedFunding'
	| 'SchoolEffectivenessVsDistanceEffect'
	| 'ShimmerMinQuadWidth'
	| 'ShimmerMaxQuadWidth'
	| 'IncomePerTileByTravelType'
	| 'NetworkTrafficCapacity'
	| 'CongestionVsSpeed'
	| 'IntersectionAndTurnCapacityEffect'
	| 'TripStartingCostByTravelType'
	| 'PopulationBackgroundTraffic'
	| 'HospitalEffectivenessVsAverageAge'
	| 'HospitalEffectivenessVsWealth'
	| 'WaterPollutionToHQDecayCurve'
	| 'FiresAreaTop'
	| 'FiresAreaSide'
	| 'ExtinguishRateVsProtection'
	| 'PercentFireStartVsFlammability'
	| 'FireCrewOffsets'
	| 'FireCrewCompetencePct'
	| 'GoofyStatResponseCurve'
	| 'FundingPercentageToPowerPoleDecayrepair'
	| 'SchoolStrikeResponseCurve'
	| 'SchoolEffectivenessVsAverageAgeEffect'
	| 'SchoolEffectivenessVsAverageAge'
	| 'SchoolEffectivenessVsWealth'
	| 'GarbagePollutionToHQDecayCurve'
	| 'AttractionThreshold'
	| 'AudioZoomDistances'
	| 'AudioDensity2FreshPlayCurve'
	| 'FreightTruckDensityCurve'
	| 'TransitSwitchEntryCostVsBudget'
	| 'FundingPercentageToPipeDecayrepair'
	| 'TripStartingCostByTravelTypeForCarPref'
	| 'SpawnRecallForStreets'
	| 'SpawnRecallForRoads'
	| 'SpawnRecallForAvenues'
	| 'SpawnRecallForHighway'
	| 'SpawnRecallForRail'
	| 'CongestionToCPSForStreets'
	| 'CongestionToCPSForRoads'
	| 'CongestionToCPSForAvenues'
	| 'CongestionToCPSForHighway'
	| 'CongestionToCPSForRail'
	| 'SchoolPopulationVsDistance'
	| 'HealthEffectivenessVsAverageAgeEffect'
	| 'ZoneMaxSlope'
	| 'PylonCornerXZs'
	| 'PowerLineScalingFactor'
	| 'AuraParkEffect'
	| 'AuraPollutionEffectAir'
	| 'AuraPollutionEffectWater'
	| 'AuraPollutionEffectGarbage'
	| 'AuraPollutionEffectRadiation'
	| 'AuraSchoolEffect'
	| 'AuraHospitalEffect'
	| 'AuraCrimeEffect'
	| 'AuraTripLength'
	| 'AuraTraffic'
	| 'AuraTaxRateChangeEffect'
	| 'AuraValueWealthEffect'
	| 'AuraTransientEffectFire'
	| 'AuraTransientEffectFlora'
	| 'AuraTransientEffectCivicPlop'
	| 'AuraTransientEffectNetworkPlop'
	| 'AuraHotspotRiotProbability'
	| 'RiotProtectionvsSuppression'
	| 'AudioZoomDistanceCameraPull'
	| 'VolcanoLavaCurveProductionRate'
	| 'SchoolFundingToCoverageCurve'
	| 'AvgAgeTo1_10AgeGroup'
	| 'AvgAgeTo11_20AgeGroup'
	| 'AvgAgeTo21_30AgeGroup'
	| 'AvgAgeTo31_40AgeGroup'
	| 'AvgAgeTo41_50AgeGroup'
	| 'AvgAgeTo51_60AgeGroup'
	| 'AvgAgeTo61_70AgeGroup'
	| 'AvgAgeTo71_80AgeGroup'
	| 'AvgAgeTo81_90AgeGroup'
	| 'JailJailbreakResponseCurve'
	| 'JailJailbreakEscapeePercentage'
	| 'NoHighlight'
	| 'GeneralOK'
	| 'GeneralNotOK'
	| 'CreateOK'
	| 'CreateNotOK'
	| 'DestroyOK'
	| 'DestroyNotOK'
	| 'QueryOK'
	| 'QueryNotOK'
	| 'TripStartingCostByTravelTypeForMassTransit'
	| 'BudgetDifficultyTaxMultiplier'
	| 'MayorLimoMoneyProperties';

type StringKeys_04 =
	| 'FireStationCenterStrength'
	| 'FireStationExteriorStrength'
	| 'FireStationTotalDispatches'
	| 'FireStationTotalPlaneDispatches'
	| 'EnactmentIncome'
	| 'RetractmentIncome'
	| 'MonthlyConstantIncome'
	| 'FireProtectionSimMaxStrikeDuration'
	| 'FireStationDispatchCenterStrength'
	| 'FireStationDispatchExteriorStrength'
	| 'MinimumValue'
	| 'MaximumValue'
	| 'InitialSupply'
	| 'InitialDemand'
	| 'TractDeveloperYearsBetweenStyles'
	| 'PoliceStationCenterStrength'
	| 'PoliceStationExteriorStrength'
	| 'PoliceStationTotalDispatches'
	| 'PoliceStationDispatchCenterStrength'
	| 'PoliceStationDispatchExteriorStrength'
	| 'JailInmateCapacity'
	| 'JailOvercapacityCostPerPerson'
	| 'MaximumCatalogCost'
	| 'MaximumAltCatalogCost'
	| 'CatalogMonthlyCost'
	| 'DesirabilityThresholdDecline'
	| 'DesirabilityThresholdGrowth'
	| 'BaselineDesirability'
	| 'MnWeeksForCompleteTemperatureSimulation'
	| 'MnWeeksForCompleteMoistureSimulation'
	| 'MnSimulationSpreadWritingRadius'
	| 'MnSeaModerationRadius'
	| 'MayorRating'
	| 'PoliceStationTotalCopterDispatches'
	| 'AuraBaseAuraLow'
	| 'AuraBaseAuraMed'
	| 'AuraBaseAuraHigh'
	| 'MySimSortOrder';

type StringKeys_05 =
	| 'BudgetMinAllowableFunds'
	| 'PowerPoleMonthlyUpkeep'
	| 'BulldozeCost'
	| 'LandfillCostForAltitudeChange'
	| 'BudgetBondIncrement'
	| 'PlopCost'
	| 'LandfillDefaultLandfillCellMaintenanceCost'
	| 'BudgetMaxBondAmount'
	| 'Worth'
	| 'BudgetRequirementsList'
	| 'StageUpgradeCost'
	| 'BuildingValue'
	| 'BudgetItemCost';

type StringKeys_06 =
	| 'BudgetMaxBonds'
	| 'MediumWealthAverageAge'
	| 'HighWealthAverageAge'
	| 'MediumWealthEQ'
	| 'AudioZoomScoreEnable'
	| 'FerryTerminalType'
	| 'AirplaneHangerType'
	| 'Wealth'
	| 'Purpose'
	| 'GrowthStage'
	| 'Flammability'
	| 'HighWealthEQ'
	| 'WealthFilter'
	| 'WaterMinAlpha'
	| 'RegionUse'
	| 'TractSize'
	| 'EndPieceRotations'
	| 'RepeatPieceRotation'
	| 'SupportPieceRotations'
	| 'AutoFlattenUponCreation'
	| 'ShoreCliffsUponCreation'
	| 'WaterSource'
	| 'HighWealthHQ'
	| 'ZonePurposeFilter'
	| 'ActiveTravelTypes'
	| 'VehicleMinZoomVisibility'
	| 'PedestrianMinZoomVisibility'
	| 'AircraftMinZoomVisibility'
	| 'WatercraftMinZoomVisibility'
	| 'OccupantTripPopulationRadius'
	| 'ConstructionTime'
	| 'MaxFireStage'
	| 'NighttimeStateChange'
	| 'DataViewZoneOpacity'
	| 'DataViewNetworkVislevel'
	| 'LotConfigRequiredRoads'
	| 'PropRandomChance'
	| 'MediumWealthHQ'
	| 'ZoneFilter'
	| 'LavaMinAlpha'
	| 'GraphPlotColor'
	| 'GraphPlotSeriesFillColor'
	| 'GraphPlotSeriesLineColor'
	| 'ActiveLotState'
	| 'AnimatedPropPlayMode'
	| 'PathLookaheadTiles'
	| 'TargetZone'
	| 'WealthType'
	| 'PurposeType'
	| 'StageCount'
	| 'WaterSupplyCap'
	| 'FireCoverageCap'
	| 'ParkCap'
	| 'PowerSupplyCap'
	| 'UseMonopolyPieces'
	| 'LotConfigPropertyVersion'
	| 'LotConfigPropertyWaterCompatibility'
	| 'EmergencyVehicleMaxCellDistance'
	| 'EmergencyVehicleRepathAttempts'
	| 'Comp1BaseTextureVal'
	| 'Comp2BaseTextureVal'
	| 'Comp3BaseTextureVal'
	| 'Comp4BaseTextureVal'
	| 'RunwayEndNumber'
	| 'MassTransitUsageChance'
	| 'OccupantTripZoneFilter'
	| 'OccupantTripPurposeFilter'
	| 'MaxBeachWidth'
	| 'CrimeGridValue'
	| 'TriggerFire'
	| 'LotConditionFilter'
	| 'IndustrialBuildingType'
	| 'AudioZoomLoopEnable'
	| 'CraneHints'
	| 'HelipadType'
	| 'LowWealthAverageAge'
	| 'LowWealthEQ'
	| 'LowWealthHQ'
	| 'LayerFilter'
	| 'EmergencyVehicleClearRadius'
	| 'AverageAgeResetValue'
	| 'PortSize'
	| 'PortWidth'
	| 'PortHeight'
	| 'RegionUIPlainsMapLevel'
	| 'RegionUIWaterMapLevel'
	| 'GoToZoomLevel'
	| 'KPropertyID_FlipsAllowed'
	| 'ZoneDisplayAlpha'
	| 'LotConfigPropertyDoConstruction'
	| 'PropWealth'
	| 'ResponseVehicleCount'
	| 'ResponsePedestrianCount'
	| 'MySimZodiacSign'
	| 'MaxCSIs'
	| 'KPropertyID_RotationsAllowed';

type StringKeys_07 =
	| 'UnwateredTerrainColor'
	| 'CrimeEffect'
	| 'LandValueIntrinsicMinMax'
	| 'LandValueWealthBoundaries'
	| 'LandValueWaterEffect'
	| 'RippleLandVertexAlpha'
	| 'RippleWaterVertexAlpha'
	| 'TravelStrategyPercentWealthNone'
	| 'TravelStrategyPercentWealth$'
	| 'TravelStrategyPercentWealth$$'
	| 'TravelStrategyPercentWealth$$$'
	| 'UnwateredBuildingColor'
	| 'VehicleLifespanRange'
	| 'PedLifespanRange'
	| 'KPropertyID_NetworkPlacementPattern'
	| 'SimPropAnimRange'
	| 'LandValueRange'
	| 'LotConfigPropertySize'
	| 'LotConfigPropertyZoneTypes'
	| 'LotConfigPropertyWealthTypes'
	| 'LotConfigPropertyPurposeTypes'
	| 'CommuteTrainLength'
	| 'WateredTerrainColor'
	| 'RegionUICloudOpacityRange'
	| 'SimulatorDateStart'
	| 'TransitSwitchPoint'
	| 'WateredBuildingColor'
	| 'FreightTrainLength'
	| 'AnimLoopCountRange';

type StringKeys_08 =
	| 'ModelResourceKey'
	| 'AuxiliaryModel1KeyHeadlights'
	| 'MinLoadRadius'
	| 'ResourceKeyType0'
	| 'ResourceKeyType1'
	| 'ResourceKeyType2'
	| 'ResourceKeyType3'
	| 'ResourceKeyType4'
	| 'ResourceKeyType5'
	| 'CapacitySatisfied'
	| 'DemandSatisfied'
	| 'DemandCreated'
	| 'ResourceKeyType1xm'
	| 'ResourceKeyType2xm'
	| 'ResourceKeyType3xm'
	| 'ResourceKeyType4xm'
	| 'ResourceKeyType5xm'
	| 'kSC4RetainingWallPropertyWallTextures'
	| 'FlammabilityHotspotSettings'
	| 'Drives'
	| 'Satisfies'
	| 'Contributes'
	| 'ConstructionResourcesMinMax'
	| 'BridgeImageKey'
	| 'BridgeCosts'
	| 'BridgeNameKey'
	| 'TestResKeyTable'
	| 'NumFlowStepsPerWaterErosionBrushApplication'
	| 'VehicleMinMaxKPH'
	| 'PedMinMaxKPH'
	| 'DataViewTypeFilter'
	| 'DataViewColorRamp'
	| 'DataViewLegendsColor'
	| 'DataViewLegendsGUIDS'
	| 'MapViewUnsignedColors'
	| 'MapViewSignedColors'
	| 'kSC4FoundationPropertySideTextures'
	| 'kSC4FoundationPropertyTopTextures'
	| 'NameKey'
	| 'TrainMinMaxKPH'
	| 'MiniMapWaterRamp'
	| 'StylePercentages'
	| 'LotConfigPropertyLotObject'
	| 'SimulatorSpeeds'
	| 'TextureRandomizationGridSize'
	| 'Comp1IDOfEffectToPlace'
	| 'Comp2IDOfEffectToPlace'
	| 'Comp3IDOfEffectToPlace'
	| 'Comp4IDOfEffectToPlace'
	| 'UserVisibleNameKey'
	| 'AudioMusicPlaylistEntry1'
	| 'AudioMusicPlaylistEntry2'
	| 'AudioMusicPlaylistEntry3'
	| 'AudioMusicPlaylistEntry4'
	| 'AudioMusicPlaylistEntry5'
	| 'AudioMusicPlaylistEntry6'
	| 'AudioMusicPlaylistEntry7'
	| 'AudioMusicPlaylistEntry8'
	| 'AudioMusicPlaylistEntry9'
	| 'AudioMusicPlaylistEntry10'
	| 'AudioMusicPlaylistEntry11'
	| 'AudioMusicPlaylistEntry12'
	| 'AudioMusicPlaylistEntry13'
	| 'AudioMusicPlaylistEntry14'
	| 'AudioMusicPlaylistEntry15'
	| 'AudioMusicPlaylistEntry16'
	| 'AudioMusicPlaylistEntry17'
	| 'AudioMusicPlaylistEntry18'
	| 'AudioMusicPlaylistEntry19'
	| 'AudioMusicPlaylistEntry20'
	| 'AudioMusicPlaylistEntry21'
	| 'MinForPurposeFundingPercentageToAnimate'
	| 'AverageSalaryForDemographic'
	| 'kSC4FloraFamilyProperty'
	| 'ShimmerQuadDensity'
	| 'StageTime'
	| 'SpreadTime'
	| 'SpreadRadius'
	| 'IconResourceKey'
	| 'UIActiveEffectID'
	| 'UIIdleEffectID'
	| 'UIActiveIconID'
	| 'UIIdleIconID'
	| 'LandmarkHomageKey'
	| 'DVRegionalTransportColorTable'
	| 'ShadowModelKey'
	| 'HospitalCapacityChunkSize'
	| 'NumCellsBetweenAnchorPtFreeze'
	| 'AuxiliaryModel2Key'
	| 'ItemDescriptionKey'
	| 'DescriptionKey'
	| 'MySimNameResKey'
	| 'KZM_mZoneTextureResourceInstanceArray'
	| 'ZoneDragColor'
	| 'ConnectedVerts'
	| 'MiniMapTerrainRamp'
	| 'AudioFreshScoreKey'
	| 'RiotSpawnArray'
	| 'AuxiliaryModel3Key'
	| 'SchoolCapacityChunkSize'
	| 'ExemplarPatchTargets';

type StringKeys_09 =
	| 'IgnoreLotStateEffects'
	| 'DisableBackgroundLoader'
	| 'AllowJointOccupancy'
	| 'MonopolyPiece'
	| 'DemandIsVariable'
	| 'IncomeOrdinance'
	| 'UseEnvironmentMap'
	| 'TestEnvironmentMap'
	| 'TestTerrainShadowing'
	| 'DrawUnwateredTerrainCellColor'
	| 'DisplayWaterSurface'
	| 'DisplayTerrainSurface'
	| 'PropDestroysLot'
	| 'TractDeveloperKickOutLowerWealth'
	| 'CanWorkAsLandBridge'
	| 'CanWorkAsWaterBridge'
	| 'RipplesEnabled'
	| 'UsePipeDepth'
	| 'ScrollingDecelerationIsPercentage'
	| 'Use24hourClock'
	| 'DriveOnRight'
	| 'StopPickAtWaterSurface'
	| 'DataViewInvertFilter'
	| 'DataViewHideZones'
	| 'DataViewInterpolateData'
	| 'DataViewForceZones'
	| 'DataViewShowZoneMap'
	| 'LandfillMoveLandfillTilesWithTerrain'
	| 'StatesAsFrames'
	| 'Previewable'
	| 'Light'
	| 'TransitSwitchCapacityEffect'
	| 'MtnCloudsAllowHiddenParticles'
	| 'OrientToSlope'
	| 'FloraWild'
	| 'VolcanoLavaShouldLavaFlow'
	| 'RequiresPowerToAppear'
	| 'QueryAsMainBuilding'
	| 'LandValueUseIntrinsic'
	| 'PhantomDemand'
	| 'Comp1AlignedWithMouseMoveDirection'
	| 'Comp2AlignedWithMouseMoveDirection'
	| 'Comp3AlignedWithMouseMoveDirection'
	| 'Comp4AlignedWithMouseMoveDirection'
	| 'IsGroundModel'
	| 'ConditionalAutomaton'
	| 'IgnoreLighting'
	| 'BridgeObstruction'
	| 'UseFreehandMode'
	| 'SmoothenOnlyConnectedTiles'
	| 'UnusedMedicalProperty'
	| 'HoverQueryOnly'
	| 'kSC4BuildingModelRotationProperty'
	| 'kSC4BuildingNoModelProperty'
	| 'SpecialCaseOnly'
	| 'Selfilluminated'
	| 'MySimIsMale'
	| 'ConditionalBuilding'
	| 'NoShadows'
	| 'KPropertyID_WaterFlora'
	| 'RequiresPowerToAnimate';

type StringKeys_10 =
	| 'PollutionAtCenter'
	| 'TravelStrategyModifier'
	| 'PollutionAtOuterEdgeOfCircle'
	| 'MayorRatingEffect'
	| 'SubjectiveFactorThresholdMinValue'
	| 'SubjectiveFactorThresholdMaxValue'
	| 'KZM_mZoneMinCellSize'
	| 'KZM_mZoneMaxCellSize'
	| 'AuraHotspotSettings';

type StringKeys_11 =
	| 'BudgetInitialFunds'
	| 'KZM_mZoneCreationCostArray'
	| 'KZM_mZoneDestructionCostArray';

type StringKeys_12 =
	| 'TravelTypeGeneratesTraffic'
	| 'TravelTypeCanReachDestination'
	| 'TravelTypeAffectedByTraffic';

export type ExemplarPropertyIdLikeToValueType<T, R = unknown> =
	T extends
		| 0x00000010
		| 0x00000011
		| 0x00000012
		| 0xcbe243f7
		| 0x00000021
		| 0x07af514b
		| 0x083de16f
		| 0x085489c7
		| 0x085489c8
		| 0x09134be2
		| 0x0913519b
		| 0x091351ae
		| 0x09135479
		| 0x098b25c8
		| 0x09b00b34
		| 0x09b73421
		| 0x09b73422
		| 0x0a36afa2
		| 0x0a3fb9a8
		| 0x0a410ba0
		| 0x0a4bc752
		| 0x0a4c13cb
		| 0x0a53fd32
		| 0x0a751675
		| 0x0a902434
		| 0x0a93036f
		| 0x0a946a57
		| 0x0abfc024
		| 0x0b579c21
		| 0x0b579c22
		| 0x0b579c23
		| 0x27812852
		| 0x27812853
		| 0x27812854
		| 0x27812870
		| 0x28ebbc30
		| 0x28ebbc35
		| 0x28ebbc3b
		| 0x2912202e
		| 0x291351b5
		| 0x292d8f9b
		| 0x29b55f73
		| 0x2a0348ba
		| 0x2a3143d7
		| 0x2a3fbde1
		| 0x2a3fbde5
		| 0x2a3ff8cd
		| 0x2a499f85
		| 0x2a53be13
		| 0x2a62d9f3
		| 0x2ab845e7
		| 0x2adb6b6d
		| 0x2c0c922e
		| 0x2c23a3a1
		| 0x2c8f8746
		| 0x47bb3f41
		| 0x47bb3f50
		| 0x47e2c330
		| 0x47e2c382
		| 0x47e2c400
		| 0x47e2c550
		| 0x482cb442
		| 0x482cb443
		| 0x482cb445
		| 0x482cb447
		| 0x482cb448
		| 0x482cb449
		| 0x482cb458
		| 0x482cb459
		| 0x482cb45a
		| 0x482cb45b
		| 0x482cb45c
		| 0x482cb45d
		| 0x482cb45f
		| 0x482cb467
		| 0x482cb46b
		| 0x482cb46e
		| 0x48cd7b40
		| 0x48cd7b41
		| 0x48cd7b42
		| 0x48cd7b50
		| 0x48cd7b54
		| 0x48cd7b60
		| 0x48cd7b64
		| 0x48cd7bf2
		| 0x48cd7bf3
		| 0x48cd7c01
		| 0x48ebd0b1
		| 0x48ee7a44
		| 0x49134bd4
		| 0x49134bdd
		| 0x491c9c01
		| 0x491c9c07
		| 0x491c9c0c
		| 0x491c9c0d
		| 0x4998c89f
		| 0x4998c904
		| 0x4998c908
		| 0x4998c90b
		| 0x49a1e05a
		| 0x4a08c508
		| 0x4a08c701
		| 0x4a0b47e3
		| 0x4a0b47e5
		| 0x4a0b47e8
		| 0x4a0b47e9
		| 0x4a0b47eb
		| 0x4a0b47ec
		| 0x4a0b47ed
		| 0x4a0b47ee
		| 0x4a0b47ef
		| 0x4a0b47f4
		| 0x4a1f38b7
		| 0x4a1f629f
		| 0x4a271248
		| 0x4a27124f
		| 0x4a275748
		| 0x4a2d49b9
		| 0x4a4c132e
		| 0x4a5f5953
		| 0x4a5f7c4b
		| 0x4a652679
		| 0x4a65267a
		| 0x4a677e5b
		| 0x4a677e5c
		| 0x4a677e5e
		| 0x4a764564
		| 0x4a7cb3ba
		| 0x4a7cb3bb
		| 0x4a7cb3bc
		| 0x4a7cb3bd
		| 0x4a7cb3be
		| 0x4a7cb3bf
		| 0x4a946a5d
		| 0x4aa03db1
		| 0x4aa60ebc
		| 0x4aa60ebd
		| 0x4aa60ebf
		| 0x4aa60ec0
		| 0x4aa60ec1
		| 0x66fbf7bc
		| 0x68ddae9b
		| 0x68ddae9f
		| 0x68ed1736
		| 0x68f5436a
		| 0x68f5436b
		| 0x68f5436c
		| 0x68f5436d
		| 0x69220415
		| 0x6932dc12
		| 0x69987e6b
		| 0x69987e6d
		| 0x69db8d00
		| 0x6a33d682
		| 0x6a36afac
		| 0x6a3fbdda
		| 0x6a3fc4c7
		| 0x6a3fcc37
		| 0x6a406201
		| 0x6a43150f
		| 0x6a4aee40
		| 0x6a4aee5f
		| 0x6a4aee68
		| 0x6a4aeedc
		| 0x6a4aeee3
		| 0x6a5a6700
		| 0x6a6564f4
		| 0x6a845768
		| 0x6a871b82
		| 0x6b7c5cdd
		| 0x6c044bb5
		| 0x6c200139
		| 0x8761abd0
		| 0x87cd6301
		| 0x88ed1059
		| 0x88ed3303
		| 0x88edc791
		| 0x88edc797
		| 0x88edc798
		| 0x88fcd877
		| 0x89135044
		| 0x8918948b
		| 0x8922041b
		| 0x89861864
		| 0x89a1e8fb
		| 0x89aec88e
		| 0x8a020103
		| 0x8a020104
		| 0x8a020200
		| 0x8a020205
		| 0x8a020206
		| 0x8a020208
		| 0x8a020300
		| 0x8a020305
		| 0x8a020306
		| 0x8a020308
		| 0x8a020400
		| 0x8a020405
		| 0x8a020406
		| 0x8a020408
		| 0x8a020500
		| 0x8a020505
		| 0x8a020506
		| 0x8a020508
		| 0x8a0b4103
		| 0x8a2602b8
		| 0x8a2602b9
		| 0x8a2602ba
		| 0x8a2602bb
		| 0x8a270fc3
		| 0x8a2d49ea
		| 0x8a2d49f0
		| 0x8a3143b7
		| 0x8a40620b
		| 0x8a552758
		| 0x8a70b1a2
		| 0x8a891421
		| 0x8a89142a
		| 0x8aa039b7
		| 0x8aa864d5
		| 0x8c3e8185
		| 0x8cb3511f
		| 0xa7607d80
		| 0xa7607d81
		| 0xa8ebcf0c
		| 0xca383ca3
		| 0xa911e2f1
		| 0xa91351a6
		| 0xa91894bc
		| 0xa92356b8
		| 0xa92d8e40
		| 0xa977a86b
		| 0xaa161f81
		| 0xaa1dd396
		| 0xaa1dd397
		| 0xaa2ed804
		| 0xaa2ed805
		| 0xaa3fc48e
		| 0xaa4c0d1b
		| 0xaa87817a
		| 0xaa905ab9
		| 0xaabaa0d3
		| 0xc804dd91
		| 0xc804dd98
		| 0xc804dd99
		| 0xc804dd9b
		| 0xc8ebd131
		| 0xc8ed2d84
		| 0xc9a5a1be
		| 0xc9b93a56
		| 0xca19d7ca
		| 0xca271780
		| 0xca271781
		| 0xca271784
		| 0xe90f5de4
		| 0xca383ca5
		| 0xca383ca6
		| 0xca383ca8
		| 0xca383ca9
		| 0xca383caa
		| 0xca383cab
		| 0xca383cac
		| 0xca5545ea
		| 0xcadb6b3e
		| 0xcbbba52f
		| 0xcc21420d
		| 0xe82b68eb
		| 0xe8ec2720
		| 0xe900ea26
		| 0xe900ea27
		| 0xe900ea28
		| 0xe900ea2b
		| 0xe900ea2c
		| 0xe974eaa1
		| 0xe974eaa4
		| 0xe974eaa5
		| 0xe974eaa7
		| 0xe9aee3da
		| 0xe9aee3dc
		| 0xea123cef
		| 0xea260589
		| 0xea296f8d
		| 0xea2e078b
		| 0xea33d694
		| 0xea3fc42a
		| 0xea400620
		| 0xea400621
		| 0xea400622
		| 0xea54d283
		| 0xea54d284
		| 0xea54d285
		| 0xea86e3b5
		| 0xebfb0404
		| 0xebfc5e26
		| 0xebfc5e5e
		| 0x8a2602ca
		| 0x8a2602cc
		| StringKeys_00
		? uint32 :
	T extends
		| 0x00000020
		| 0x28ebbc32
		| 0x28ebbc34
		| 0x4a08c700
		| 0x4a0b47ea
		| 0x4b733e12
		| 0x899afbad
		| 0x8a2602a9
		| 0xaa12fcb0
		| 0xc98204b8
		| 0xc98204b9
		| 0xea296f8f
		| StringKeys_01
		? string :
	T extends
		| 0x07b36c71
		| 0x085489ca
		| 0x085489cc
		| 0x085489cd
		| 0x085489ce
		| 0x085489cf
		| 0x085489d0
		| 0x085489d1
		| 0x085489d2
		| 0x08f55dc2
		| 0x08f79b8e
		| 0x0911e117
		| 0x09122027
		| 0x09135482
		| 0x091b42a2
		| 0x0929c439
		| 0x092d909b
		| 0x096e5653
		| 0x098b27d0
		| 0x09b00b2b
		| 0x09b00b2c
		| 0x09b00b2d
		| 0x09b00b2e
		| 0x09b00b2f
		| 0x09b00b30
		| 0x09b00b31
		| 0x09b00b32
		| 0x09b00b33
		| 0x09c2aef0
		| 0x0a2eced8
		| 0x0a4168e1
		| 0x0a4bc742
		| 0x0a56212a
		| 0x0a5f596b
		| 0x0a9599bf
		| 0x0b579c24
		| 0x0b579c25
		| 0x0b579c26
		| 0x0bd86fd5
		| 0x0bfc0a4c
		| 0x27812811
		| 0x27812842
		| 0x27812843
		| 0x279d1707
		| 0x28ebbc36
		| 0x28ebbc3a
		| 0x28f42aa0
		| 0x29121e8b
		| 0x29136788
		| 0x29189beb
		| 0x29189bee
		| 0x29189bf1
		| 0x29189bf2
		| 0x29189bf3
		| 0x29189bf5
		| 0x29189bf6
		| 0x29189bf7
		| 0x29233e8f
		| 0x29233e94
		| 0x29233e96
		| 0x29233e9c
		| 0x295961f3
		| 0x29ab15c0
		| 0x29ab15c2
		| 0x29ab15c7
		| 0x29b40134
		| 0x29b4013b
		| 0x29b4013e
		| 0x2a0348bb
		| 0x2a0348bc
		| 0x2a35a25f
		| 0x2a36e3cb
		| 0x2a511cbc
		| 0x2a633000
		| 0x2a634000
		| 0x2a653110
		| 0x2a653120
		| 0x2a653130
		| 0x2a653320
		| 0x2a653330
		| 0x2a654100
		| 0x2a654200
		| 0x2a654300
		| 0x2a654400
		| 0x2a9590de
		| 0x2aa84164
		| 0x47e2c331
		| 0x47e2c381
		| 0x47e2c500
		| 0x47e2c502
		| 0x47e2c530
		| 0x482cb441
		| 0x482cb44b
		| 0x482cb44c
		| 0x482cb44d
		| 0x482cb455
		| 0x482cb456
		| 0x482cb457
		| 0x482cb468
		| 0x482cb46c
		| 0x482cb46d
		| 0x482cb471
		| 0x482cb472
		| 0x482cd460
		| 0x482cd461
		| 0x482cd462
		| 0x482cd463
		| 0x482cd464
		| 0x482cd465
		| 0x48cd7b21
		| 0x48cd7b26
		| 0x48cd7b27
		| 0x48cd7b28
		| 0x48cd7b2a
		| 0x48cd7b30
		| 0x48cd7b31
		| 0x48cd7b51
		| 0x48cd7b52
		| 0x48cd7b53
		| 0x48cd7b61
		| 0x48cd7b62
		| 0x48cd7b63
		| 0x48cd7b65
		| 0x48cd7b70
		| 0x48cd7b71
		| 0x48cd7b72
		| 0x48cd7b73
		| 0x48cd7c02
		| 0x48d71ed2
		| 0x48d71edb
		| 0x49122036
		| 0x491332e6
		| 0x4918c925
		| 0x4918c92c
		| 0x4918c930
		| 0x4918c93a
		| 0x491b3ad5
		| 0x491c9c03
		| 0x496e564c
		| 0xca383ca2
		| 0x4998c89e
		| 0x4998c903
		| 0x4998c912
		| 0x4998c913
		| 0x4998c914
		| 0x4998c915
		| 0x4998c916
		| 0x49a195c0
		| 0x49a1e8c4
		| 0x49a2e8be
		| 0x49e5522f
		| 0x4a08c504
		| 0x4a08c505
		| 0x4a08c506
		| 0x4a08c507
		| 0x4a08c509
		| 0x4a08c600
		| 0x4a08c601
		| 0x4a1f38c6
		| 0x4a1f38c7
		| 0x4a1f38c8
		| 0x4a1f38c9
		| 0x4a1f38ca
		| 0x4a270db0
		| 0x4a270e94
		| 0x4a280510
		| 0x4a280513
		| 0x4a678060
		| 0x4aa84161
		| 0x4ab70dac
		| 0x4ab71659
		| 0x4bae8fe1
		| 0x4bae8fe2
		| 0x4be09ecb
		| 0x4be09ecc
		| 0x66fbf7a9
		| 0x66fbf7aa
		| 0x66fbf7ab
		| 0x66fbf7ac
		| 0x66fbf7ad
		| 0x66fbf7ae
		| 0x66fbf7af
		| 0x66fbf7b8
		| 0x66fbf7bd
		| 0x66fbf7be
		| 0x66fbf7bf
		| 0x68ddae92
		| 0x68ddae95
		| 0x68ddae97
		| 0x68ddae9a
		| 0x68ddae9c
		| 0x691894c0
		| 0x691b42b3
		| 0x692ef65a
		| 0x6932dc00
		| 0x6932dc01
		| 0x6932dc02
		| 0x6932dc03
		| 0x6932dc04
		| 0x6932dc05
		| 0x6932dc08
		| 0x6932dc09
		| 0x6932dc0a
		| 0x6932dc0b
		| 0x6932dc0c
		| 0x6932dc0d
		| 0x6932dc13
		| 0x6932dc14
		| 0x69501944
		| 0x69987e60
		| 0x69987e61
		| 0x69987e62
		| 0x69987e63
		| 0x69987e65
		| 0x69987e66
		| 0x69987e67
		| 0x69987e68
		| 0x69987e69
		| 0x69987e6a
		| 0x69987e6c
		| 0x69987e6e
		| 0x69987e6f
		| 0x699b08a4
		| 0x69a36e40
		| 0x69ac5640
		| 0x69ac5641
		| 0x69b425db
		| 0x69db8d01
		| 0x69db8d02
		| 0x69db8d03
		| 0x69db8d04
		| 0x69db8d05
		| 0x6a09f62f
		| 0x6a19f6b5
		| 0x6a2d49f4
		| 0x6a36afab
		| 0x6a469337
		| 0x6a469342
		| 0x6a4aeded
		| 0x6a4aedef
		| 0x6a4aeee2
		| 0x6a5a6702
		| 0x6a9f6edd
		| 0x6ab70da7
		| 0x6ab71654
		| 0x6b588fad
		| 0x879d12e7
		| 0x88edc792
		| 0x88fcc3e3
		| 0x890e0a99
		| 0x89189482
		| 0x89189495
		| 0x8918c937
		| 0x8918c93e
		| 0x892d9d02
		| 0x897e709f
		| 0x8989ec22
		| 0x8989ec23
		| 0x8989ec24
		| 0x8989ec25
		| 0x8989ec26
		| 0x8989ec27
		| 0x8989ec28
		| 0x8989ec29
		| 0x8989ec2a
		| 0x8989ec2b
		| 0x8989ec2c
		| 0x8989ec2d
		| 0x8989ec2e
		| 0x89a18fc4
		| 0x89a312c0
		| 0x89aec88b
		| 0x8a020102
		| 0x8a020207
		| 0x8a020307
		| 0x8a020407
		| 0x8a020507
		| 0x8a0cbaa3
		| 0x8a0cbaac
		| 0x8a0cbaad
		| 0x8a235c56
		| 0x8a3fb98d
		| 0x8a3fc5dd
		| 0x8a46933d
		| 0x8a4efa75
		| 0x8a511dd1
		| 0x8a67e378
		| 0x8a84778f
		| 0x8a94eee0
		| 0x8b58c59e
		| 0x8c3caef5
		| 0xa7607d73
		| 0xa7607d74
		| 0xa7607d75
		| 0xa7607d77
		| 0xa7607d78
		| 0xa7607d79
		| 0xa7607d7a
		| 0xa7607d7b
		| 0xa7607d7c
		| 0xa7607d7d
		| 0xa7607d7e
		| 0xa7607d7f
		| 0xa7607d86
		| 0xa7607d87
		| 0xa7607d88
		| 0xa7607d89
		| 0xa8f4eb0c
		| 0xa9132ef9
		| 0xa9188ef5
		| 0xa918c929
		| 0xa918c942
		| 0xa91b3af4
		| 0xa92356ae
		| 0xa92356af
		| 0xa92356b0
		| 0xa92356ba
		| 0xa92356bd
		| 0xa92ae446
		| 0xa92d9d7a
		| 0xa96e5641
		| 0xa9a36e47
		| 0xa9b6ecd6
		| 0xa9c283d1
		| 0xa9e581fb
		| 0xaa120972
		| 0xaa120973
		| 0xaa12fcb8
		| 0xaa19f6ea
		| 0xaa1f8ab7
		| 0xaa46934b
		| 0xaa4bc72a
		| 0xaa5c04c5
		| 0xaa5c04c8
		| 0xc7b36ca4
		| 0xc7b36ca5
		| 0xc804dd86
		| 0xc804dd87
		| 0xc804dd88
		| 0xc804dd89
		| 0xc804dd93
		| 0xc804dd94
		| 0xc804dd95
		| 0xc804dd96
		| 0xc804dd9a
		| 0xc910b4ce
		| 0xc911eda0
		| 0xc911eda1
		| 0xc91894a8
		| 0xc9299659
		| 0xc929c433
		| 0xc92d9c7a
		| 0xc9b40128
		| 0xc9c18eae
		| 0xc9dbdd00
		| 0xc9dbdd01
		| 0xc9dbdd02
		| 0xc9ee640a
		| 0xc9ee640b
		| 0xc9ee640c
		| 0xca027325
		| 0xca027328
		| 0xca271782
		| 0xca480830
		| 0xca271800
		| 0xca383ca7
		| 0xca46931f
		| 0xca469346
		| 0xca511de6
		| 0xca511df2
		| 0xca76013b
		| 0xcbfb03fa
		| 0xcbfb03ff
		| 0xcc101142
		| 0xe8ec2721
		| 0xe8f79c8b
		| 0xe8f79c90
		| 0xe900ea24
		| 0xe900ea25
		| 0xe900ea29
		| 0xe900ea2a
		| 0xe90e25a2
		| 0xe90e25a3
		| 0xe911e2d1
		| 0xe911e2fc
		| 0xe918946f
		| 0xe91894b3
		| 0xe918c920
		| 0xe91b3aee
		| 0xe974eaa6
		| 0xe99b068c
		| 0xe9a18d3f
		| 0xe9a1e8d4
		| 0xea02327a
		| 0xea02327b
		| 0xea1cf220
		| 0xea1cf221
		| 0xea1cf222
		| 0xea1e3c53
		| 0xea4025a9
		| 0xea46932c
		| 0xea46934f
		| 0xea4ad2ff
		| 0xea4ae9ef
		| 0xea4aedc6
		| 0xea511de0
		| 0xea614f65
		| 0xea7b5f06
		| StringKeys_02
		? float :
	T extends
		| 0x083dc35b
		| 0x083dc487
		| 0x085489c9
		| 0x085489cb
		| 0x0911e2e6
		| 0x0911e2e7
		| 0x0911e2e8
		| 0x0911e2e9
		| 0x09b00b35
		| 0x09b6d6ae
		| 0x09c2aef3
		| 0x09c2aef4
		| 0x09c2aef5
		| 0x09c2aef6
		| 0x09c2aef7
		| 0x0a10c772
		| 0x0a10c773
		| 0x0a10c774
		| 0x0a10c775
		| 0x0a36f410
		| 0x0a469353
		| 0x0a51188a
		| 0x0a53b2f9
		| 0x0b579c29
		| 0x0bd86fd4
		| 0x0c032488
		| 0x27812810
		| 0x87cd6399
		| 0x87cd6341
		| 0x2918949e
		| 0x29189bf0
		| 0x29189bf4
		| 0x2921a9cc
		| 0x29233e8d
		| 0x29233e98
		| 0x29ab15c5
		| 0x29ab15c6
		| 0x29b4013d
		| 0x29dd40c1
		| 0x29dd40c2
		| 0x2a2d7824
		| 0x2a511893
		| 0x2aa40ccc
		| 0x47e2c320
		| 0x47e2c332
		| 0x47e2c383
		| 0x47e2c401
		| 0x47e2c501
		| 0x47e2c510
		| 0x47e2c511
		| 0x47e2c531
		| 0x482cb44e
		| 0x482cb45e
		| 0x482cb469
		| 0x482cb46a
		| 0x4835c6a4
		| 0x4835c6a5
		| 0x48cd7b20
		| 0x48cd7b22
		| 0x48cd7b23
		| 0x48cd7b24
		| 0x48cd7b25
		| 0x48cd7b43
		| 0x48cd7ba0
		| 0x48cd7c00
		| 0x491332e7
		| 0x491332e8
		| 0x491332e9
		| 0x491332ea
		| 0x491332eb
		| 0x491332ec
		| 0x491332ed
		| 0x491332ee
		| 0x491332ef
		| 0x491c9c02
		| 0x491c9c04
		| 0x491c9c05
		| 0x491c9c06
		| 0x491c9c0a
		| 0x491c9c0b
		| 0x4941a92b
		| 0x4998c89c
		| 0x4998c901
		| 0x4998c90a
		| 0x4998c90c
		| 0x4998c90d
		| 0x4998c90e
		| 0x4998c90f
		| 0x4998c910
		| 0x4998c911
		| 0x49a34301
		| 0x4a08c500
		| 0x4a08c501
		| 0x4a08c502
		| 0x4a08c503
		| 0x4a149631
		| 0x4a1f38b5
		| 0x4a1f38b6
		| 0x4a1f38c5
		| 0x4a1f62a0
		| 0x4a1f62a1
		| 0x4a1f62a2
		| 0x4a1f62a3
		| 0x4a1f62a4
		| 0x4a1f62a5
		| 0x4a1f62a6
		| 0x4a1f62a7
		| 0x4a1f62a8
		| 0x4a1f62a9
		| 0x4a1f62b0
		| 0x4a1f62b1
		| 0x4a1f62b2
		| 0x4a1f6300
		| 0x4a4bc714
		| 0x4a511873
		| 0x4a5f7315
		| 0x4a6676ad
		| 0x4ac519b8
		| 0x4b61ffc9
		| 0x4bae8fe0
		| 0x4be09ec9
		| 0x4be09eca
		| 0x4bfdd955
		| 0x66fbf7b0
		| 0x66fbf7b1
		| 0x66fbf7b2
		| 0x66fbf7b3
		| 0x66fbf7b4
		| 0x66fbf7b5
		| 0x66fbf7b6
		| 0x66fbf7ba
		| 0x66fbf7bb
		| 0x66fbf7c1
		| 0x68ddae93
		| 0x68ddae9e
		| 0x68ddaea0
		| 0x68ee9764
		| 0x6911e2df
		| 0x691894a4
		| 0x691894c6
		| 0x6932dc06
		| 0x6932dc07
		| 0x6932dc0e
		| 0x6932dc0f
		| 0x6932dc10
		| 0x6932dc11
		| 0x6941a67f
		| 0x6941b022
		| 0x69a437f6
		| 0x6a09f631
		| 0x6a359f22
		| 0x6a410bf2
		| 0x6a4132f3
		| 0x6a4132f6
		| 0x6a5a6701
		| 0x6a6564f6
		| 0x6a84493e
		| 0x6a946a50
		| 0x6b42922c
		| 0x87cd6340
		| 0x87cd6343
		| 0x87cd6344
		| 0x87cd6345
		| 0x87cd6346
		| 0x87cd6347
		| 0x87cd6348
		| 0x87cd6349
		| 0x87cd634b
		| 0x87cd634c
		| 0x87cd634d
		| 0x87cd634e
		| 0x87cd6361
		| 0x87cd6362
		| 0x87cd6363
		| 0x87cd6364
		| 0x87cd6365
		| 0x87cd6366
		| 0x87cd6367
		| 0x87cd6368
		| 0x87cd6369
		| 0x87cd636a
		| 0x87cd636b
		| 0x87cd636c
		| 0x87cd636d
		| 0x87cd636e
		| 0x87cd636f
		| 0x87cd6391
		| 0x87cd6392
		| 0x87cd6397
		| 0x87cd6398
		| 0x891894ad
		| 0x891b3ae6
		| 0x89590e6e
		| 0x8a020101
		| 0x8a020202
		| 0x8a020203
		| 0x8a020302
		| 0x8a020303
		| 0x8a020402
		| 0x8a020403
		| 0x8a020502
		| 0x8a020503
		| 0x8a0cbaa4
		| 0x8a0cbaa5
		| 0x8a0cbaa6
		| 0x8a0cbaa7
		| 0x8a0cbaa8
		| 0x8a0cbaa9
		| 0x8a0cbaaa
		| 0x8a0cbaab
		| 0x8a1e07ee
		| 0x8a480df7
		| 0x8a67e373
		| 0x8a67e374
		| 0x8a67e376
		| 0x8c19c3e9
		| 0x8c376d4f
		| 0xa9189479
		| 0xa91b3afa
		| 0xa91cbe00
		| 0xa91cbe01
		| 0xa92356b1
		| 0xa92356b3
		| 0xa92356b9
		| 0xa92356bb
		| 0xa92356bc
		| 0xa92356be
		| 0xa92ae3bd
		| 0xa92d9fcd
		| 0xa941b028
		| 0xa9b6ecd7
		| 0xa9b6ecd8
		| 0xa9b6ecd9
		| 0xa9b6ecda
		| 0xa9d6cc17
		| 0xa9d6cc18
		| 0xaa60e745
		| 0xaa713782
		| 0xc91894cb
		| 0xc91b3b02
		| 0xc9299662
		| 0xc92d7ec0
		| 0xc941b02e
		| 0xc9da95d4
		| 0xca359f17
		| 0xca4132e9
		| 0xca51189a
		| 0xca5f7821
		| 0xca7138c4
		| 0xcad64136
		| 0xcba5895b
		| 0xcba5895c
		| 0xcba5895d
		| 0xcba5895e
		| 0xcba5895f
		| 0xcba58a5b
		| 0xcba58a5c
		| 0xcba58a5d
		| 0xcba58a5e
		| 0xcba58a5f
		| 0xe921a936
		| 0xe92d9db4
		| 0xe94825b9
		| 0xe974eaa3
		| 0xe9ac43e7
		| 0xea023270
		| 0xea023271
		| 0xea023272
		| 0xea023273
		| 0xea023274
		| 0xea023275
		| 0xea023276
		| 0xea023277
		| 0xea023278
		| 0xea023279
		| 0xea02327f
		| 0xea023280
		| 0xea023290
		| 0xea023291
		| 0xea023292
		| 0xea023293
		| 0xea0232a1
		| 0xea400624
		| 0xea4a7c55
		| 0xea4bc6e4
		| 0xea53b30f
		| 0xea540621
		| 0xea540622
		| 0xea540623
		| 0xea540624
		| 0xea540625
		| 0xea540626
		| 0xea540627
		| 0xea540628
		| 0xea540629
		| 0xea614f63
		| 0xea614f64
		| 0xea639fb1
		| 0xea639fb2
		| 0xea639fb3
		| 0xea639fb4
		| 0xea639fb5
		| 0xea639fb6
		| 0xea639fb7
		| 0xea639fb8
		| 0xea639fb9
		| 0xea8c3cdb
		| 0xebff69e7
		| 0xec15654a
		| StringKeys_03
		? float[] :
	T extends
		| 0x08f55dc0
		| 0x08f55dc1
		| 0x08f55dc5
		| 0x0c0afdd7
		| 0x28ebbc37
		| 0x28ebbc38
		| 0x28ebbc39
		| 0x29233e95
		| 0x29233e9a
		| 0x29233e9b
		| 0x47bb3f10
		| 0x47bb3f11
		| 0x47bb3f20
		| 0x47bb3f21
		| 0x47e2c551
		| 0x48d71ed0
		| 0x48d71ed1
		| 0x48d71ed5
		| 0x48d71ed9
		| 0x48d71eda
		| 0x48d71ee0
		| 0x48d71ee4
		| 0x4aa60ebe
		| 0x4aa60ec2
		| 0x6ad54804
		| 0x87cd6354
		| 0x87cd6355
		| 0x87cd6357
		| 0xa7607d70
		| 0xa7607d71
		| 0xa7607d72
		| 0xa7607d76
		| 0xaa5b8407
		| 0xcc0b0705
		| 0xea02327c
		| 0xea02327d
		| 0xea02327e
		| 0xebfc5fba
		| StringKeys_04
		? sint32 :
	T extends
		| 0x090e0a9f
		| 0x09132de8
		| 0x099afacd
		| 0x2aa00fe7
		| 0x490e0aa6
		| 0x49cac341
		| 0x4a677e5f
		| 0x890e0ab4
		| 0x8a1c3e72
		| 0xca271783
		| 0xca271786
		| 0xe91a0b5f
		| 0xea54d286
		| StringKeys_05
		? sint64 :
	T extends
		| 0x090e0aac
		| 0x0929cc30
		| 0x0929cc36
		| 0x0929cc65
		| 0x0a25896b
		| 0x0bd86fd3
		| 0x0bfa15a5
		| 0x27812832
		| 0x27812833
		| 0x27812837
		| 0x29244db5
		| 0x2929cc6b
		| 0xaa12fcb3
		| 0x29ab15c1
		| 0x47bb3f60
		| 0x87cd6310
		| 0x482cb444
		| 0x482cb446
		| 0x482cb44a
		| 0x48cd7b80
		| 0x48cd7b81
		| 0x48f23a7e
		| 0x4929cc97
		| 0xaa12fcb4
		| 0x4998c89d
		| 0x4998c918
		| 0x4998c919
		| 0x4998c91a
		| 0x4998c91b
		| 0x4998c91d
		| 0x499afa38
		| 0x49beda31
		| 0x49c9c93c
		| 0x4a0b47e6
		| 0x4a0b47f1
		| 0x4a4a88f0
		| 0x4a751ad5
		| 0x6929cc92
		| 0xaa12fcb2
		| 0x69987e64
		| 0x6a4aeedf
		| 0x6a4aeee4
		| 0x6a4aeee5
		| 0x6a5e0727
		| 0x6a9edd07
		| 0x6bac0b3e
		| 0x87cd6300
		| 0x87cd6330
		| 0x87cd6332
		| 0x87cd6360
		| 0x87cd6370
		| 0x87cd6371
		| 0x87cd6372
		| 0x87cd6373
		| 0x87cd6381
		| 0x88edc789
		| 0x89136440
		| 0x89aec88c
		| 0x89aec88d
		| 0x8a020204
		| 0x8a020304
		| 0x8a020404
		| 0x8a020504
		| 0x8bfb1072
		| 0xa92356b2
		| 0xa9af1e54
		| 0xa9af1e55
		| 0xa9c283d0
		| 0xaa12fcb5
		| 0xaa12fcb6
		| 0xaa12fcb7
		| 0xaa230baf
		| 0xaa3fbdde
		| 0xaa83558f
		| 0xabb90e58
		| 0xc929c652
		| 0xc929cc58
		| 0xc929cc8d
		| 0xc973c9aa
		| 0xc9ee640d
		| 0xca027307
		| 0xca271787
		| 0xca271788
		| 0xca271789
		| 0xca383cad
		| 0xca383cae
		| 0xca821b8c
		| 0xcc3e4755
		| 0xe94825b7
		| 0xe99b068d
		| 0xe9a316eb
		| 0xe9aee3db
		| 0xe9aee3dd
		| 0xea296f90
		| 0xebfb4a0a
		| 0xec3bd470
		| StringKeys_06
		? uint8 :
	T extends
		| 0x097f4c4e
		| 0xca5b9306
		| 0x47e2c300
		| 0x47e2c301
		| 0x47e2c310
		| 0x491c9c08
		| 0x491c9c09
		| 0x4953e8a3
		| 0x4953e8a4
		| 0x4953e8a5
		| 0x4953e8a6
		| 0x497f42a4
		| 0x4998c902
		| 0x4998c909
		| 0x49d55951
		| 0x6a09f630
		| 0x87cd6333
		| 0x88edc790
		| 0x88edc793
		| 0x88edc795
		| 0x88edc796
		| 0x8a441c9c
		| 0xa97f42ce
		| 0xca383cb1
		| 0xca7515cc
		| 0xe90e25a1
		| 0xe97f42b0
		| 0xea441c97
		| 0xea958845
		| StringKeys_07
		? uint8[] :
	T extends
		| 0x09c80416
		| 0x09c80417
		| 0x0b579c28
		| 0x27812820
		| 0x27812821
		| 0x27812822
		| 0x27812823
		| 0x27812824
		| 0x27812825
		| 0x27812834
		| 0x27812840
		| 0x27812841
		| 0x27812921
		| 0x27812922
		| 0x27812923
		| 0x27812924
		| 0x27812925
		| 0x295961f2
		| 0x29b4013c
		| 0x47bb3f30
		| 0x47bb3f31
		| 0x47bb3f32
		| 0x47e2c380
		| 0x482cb46f
		| 0x482cb470
		| 0x482cd466
		| 0x489b6974
		| 0x48cd7bf1
		| 0x4998c900
		| 0x4998c905
		| 0x4a0b47e0
		| 0x4a0b47e4
		| 0x4a0b47f2
		| 0x4a0b47f3
		| 0x68f26014
		| 0x68f26015
		| 0x68fcff37
		| 0x68fcff38
		| 0x6a416b21
		| 0x6a440d40
		| 0x6b733233
		| 0x87cd63a0
		| 0x88edc900
		| 0x89590e6d
		| 0x89a312c2
		| 0x8a020209
		| 0x8a020309
		| 0x8a020409
		| 0x8a020509
		| 0x8a416a99
		| 0x8a5e7b50
		| 0x8a5e7b51
		| 0x8a5e7b52
		| 0x8a5e7b53
		| 0x8a5e7b54
		| 0x8a5e7b55
		| 0x8a5e7b56
		| 0x8a5e7b57
		| 0x8a5e7b58
		| 0x8a5e7b59
		| 0x8a5e7b5a
		| 0x8a5e7b5b
		| 0x8a5e7b5c
		| 0x8a5e7b5d
		| 0x8a5e7b5e
		| 0x8a5e7b5f
		| 0x8a5e7b60
		| 0x8a5e7b61
		| 0x8a5e7b62
		| 0x8a5e7b63
		| 0x8a5e7b64
		| 0x8a5f88e3
		| 0x8a63f2a1
		| 0xa8f149c5
		| 0xa91cbe02
		| 0xa9b6ecd3
		| 0xa9b6ecd4
		| 0xa9b6ecd5
		| 0xaa12fcb1
		| 0xaa2ed800
		| 0xaa2ed801
		| 0xaa2ed802
		| 0xaa2ed803
		| 0xaa5c23fa
		| 0xab9ec143
		| 0xac2bc81c
		| 0xac43826d
		| 0xc804dd92
		| 0xc9e69af6
		| 0xca416ab5
		| 0xca416b2a
		| 0xca416b3f
		| 0xe94825b6
		| 0xe94825b8
		| 0xe974eaa2
		| 0xea3573af
		| 0xea3fbdd7
		| 0xea400623
		| 0xec214180
		| 0xec43826b
		| 0x0062e78a
		| StringKeys_08
		? uint32[] :
	T extends
		| 0x09f00e59
		| 0x0b579c27
		| 0x27812836
		| 0x2781283f
		| 0x27812844
		| 0x28ebbc3c
		| 0x29189bec
		| 0x29189bed
		| 0x29189bef
		| 0x297f42b7
		| 0x29ab15c3
		| 0x29ab15c4
		| 0x2a89b677
		| 0x47e2c540
		| 0x482cb44f
		| 0x482cb450
		| 0x491c9c00
		| 0x496e5a36
		| 0x4975dd25
		| 0x4998c91c
		| 0x49be9565
		| 0x4a08c702
		| 0x4a0b47e1
		| 0x4a0b47e2
		| 0x4a0b47e7
		| 0x4a0b47f0
		| 0x4a0b47f5
		| 0x4a677e5d
		| 0x4a70d491
		| 0x4a89fcf3
		| 0x4a9f188b
		| 0x4bfc47b0
		| 0x66fbf7c0
		| 0x69f14d33
		| 0x6a37ebb6
		| 0x6a4bc8ed
		| 0x6a959e71
		| 0x6a95e503
		| 0x87cd633f
		| 0x87cd6356
		| 0x8a020201
		| 0x8a020301
		| 0x8a020401
		| 0x8a020501
		| 0x8a5e5db8
		| 0x8bbd735e
		| 0xaa5a9633
		| 0xabe1b5a3
		| 0xc804dd90
		| 0xc804dd97
		| 0xca9b4ca8
		| 0xcaa9ab92
		| 0xe83a081d
		| 0xe9822d62
		| 0xe9d117c3
		| 0xe9f0fa86
		| 0xea296f91
		| 0xea3209f8
		| 0xea3209f9
		| 0xea346888
		| 0xea5393ed
		| StringKeys_09
		? boolean :
	T extends
		| 0x27812851
		| 0x8a612fee
		| 0xaa5832f3
		| 0xca5b9305
		| 0xcab1ce3a
		| 0xcab1ce3c
		| 0xe94825b2
		| 0xe94825b3
		| 0xea0232a0
		| StringKeys_10
		? sint32[] :
	T extends
		| 0x6a9c7718
		| 0xe94825b4
		| 0xe94825b5
		| StringKeys_11
		? sint64[] :
	T extends
		| 0xa92356b4
		| 0xa92356b5
		| 0xa92356bf
		| StringKeys_12
		? boolean[] :
	R;

export type StringKey =
	| StringKeys_00
	| StringKeys_01
	| StringKeys_02
	| StringKeys_03
	| StringKeys_04
	| StringKeys_05
	| StringKeys_06
	| StringKeys_07
	| StringKeys_08
	| StringKeys_09
	| StringKeys_10
	| StringKeys_11
	| StringKeys_12;
